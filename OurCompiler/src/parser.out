Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DECLARE
    DO
    LBRACKET
    NEWLINE
    NUMBER
    RBRACKET
    STRING
    SYMBOLS
    TERMINALS

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> class_decl
Rule 3     program -> class_decl program
Rule 4     class_decl -> CLASS ID EXTENDS ID LBRACE class_body_decl RBRACE
Rule 5     class_decl -> CLASS ID LBRACE class_body_decl RBRACE
Rule 6     class_body_decl -> class_body_sub_decls
Rule 7     class_body_sub_decls -> field_decl SEMICOLON class_body_sub_decls
Rule 8     class_body_sub_decls -> method_decl class_body_sub_decls
Rule 9     class_body_sub_decls -> constructor_decl class_body_sub_decls
Rule 10    class_body_sub_decls -> field_decl SEMICOLON
Rule 11    class_body_sub_decls -> constructor_decl
Rule 12    class_body_sub_decls -> method_decl
Rule 13    class_body_sub_decls -> empty
Rule 14    field_decl -> modifier var_decl
Rule 15    modifier -> PUBLIC STATIC
Rule 16    modifier -> PRIVATE STATIC
Rule 17    modifier -> PUBLIC
Rule 18    modifier -> PRIVATE
Rule 19    modifier -> STATIC
Rule 20    modifier -> empty
Rule 21    var_decl -> type variables
Rule 22    type -> INT
Rule 23    type -> FLOAT
Rule 24    type -> BOOLEAN
Rule 25    type -> VOID
Rule 26    type -> ID
Rule 27    variables -> variable
Rule 28    variables -> variables COMMA variable
Rule 29    variables -> empty
Rule 30    variable -> ID
Rule 31    method_decl -> modifier type ID LPAREN RPAREN block
Rule 32    method_decl -> modifier VOID ID LPAREN RPAREN block
Rule 33    method_decl -> modifier type ID LPAREN formals RPAREN block
Rule 34    method_decl -> modifier VOID ID LPAREN formals RPAREN block
Rule 35    constructor_decl -> modifier ID LPAREN RPAREN block
Rule 36    constructor_decl -> modifier ID LPAREN formals RPAREN block
Rule 37    formals -> formals COMMA formal_param
Rule 38    formals -> formal_param
Rule 39    formals -> empty
Rule 40    formal_param -> type variable
Rule 41    block -> LBRACE block_end RBRACE
Rule 42    block_end -> stmt
Rule 43    block_end -> stmt block_end
Rule 44    block_end -> empty
Rule 45    stmt -> IF LPAREN expr RPAREN stmt
Rule 46    stmt -> IF LPAREN expr RPAREN stmt ELSE stmt
Rule 47    stmt -> WHILE LPAREN expr RPAREN stmt
Rule 48    stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
Rule 49    stmt -> RETURN SEMICOLON
Rule 50    stmt -> RETURN expr SEMICOLON
Rule 51    stmt -> stmt_expr SEMICOLON
Rule 52    stmt -> BREAK SEMICOLON
Rule 53    stmt -> CONTINUE SEMICOLON
Rule 54    stmt -> block
Rule 55    stmt -> var_decl SEMICOLON
Rule 56    stmt -> SEMICOLON
Rule 57    literal -> INTCONST
Rule 58    literal -> FLOATCONST
Rule 59    literal -> STRINGCONST
Rule 60    literal -> NULL
Rule 61    literal -> TRUE
Rule 62    literal -> FALSE
Rule 63    primary -> literal
Rule 64    primary -> THIS
Rule 65    primary -> SUPER
Rule 66    primary -> LPAREN expr RPAREN
Rule 67    primary -> NEW ID LPAREN arguments RPAREN
Rule 68    primary -> NEW ID LPAREN RPAREN
Rule 69    primary -> lhs
Rule 70    primary -> method_invocation
Rule 71    arguments -> expr
Rule 72    arguments -> arguments COMMA expr
Rule 73    arguments -> empty
Rule 74    lhs -> field_access
Rule 75    field_access -> primary PERIOD ID
Rule 76    field_access -> ID
Rule 77    method_invocation -> field_access LPAREN RPAREN
Rule 78    method_invocation -> field_access LPAREN arguments RPAREN
Rule 79    expr -> primary
Rule 80    expr -> assign
Rule 81    expr -> expr arith_op expr
Rule 82    expr -> expr bool_op expr
Rule 83    expr -> unary_op expr
Rule 84    assign -> lhs EQUALS expr
Rule 85    assign -> lhs PLUSPLUS
Rule 86    assign -> PLUSPLUS lhs
Rule 87    assign -> lhs MINUSMINUS
Rule 88    assign -> MINUSMINUS lhs
Rule 89    arith_op -> PLUS
Rule 90    arith_op -> MINUS
Rule 91    arith_op -> TIMES
Rule 92    arith_op -> DIVIDE
Rule 93    bool_op -> AND
Rule 94    bool_op -> OR
Rule 95    bool_op -> EQUALSCOMPARE
Rule 96    bool_op -> NOTEQUALS
Rule 97    bool_op -> LESSTHAN
Rule 98    bool_op -> GREATERTHAN
Rule 99    bool_op -> LESSTHANOREQ
Rule 100   bool_op -> GREATERTHANOREQ
Rule 101   unary_op -> PLUS
Rule 102   unary_op -> MINUS
Rule 103   unary_op -> NOT
Rule 104   stmt_expr -> assign
Rule 105   stmt_expr -> method_invocation

Terminals, with rules where they appear

AND                  : 93
BOOLEAN              : 24
BREAK                : 52
CLASS                : 4 5
COMMA                : 28 37 72
CONTINUE             : 53
DECLARE              : 
DIVIDE               : 92
DO                   : 
ELSE                 : 46
EQUALS               : 84
EQUALSCOMPARE        : 95
EXTENDS              : 4
FALSE                : 62
FLOAT                : 23
FLOATCONST           : 58
FOR                  : 48
GREATERTHAN          : 98
GREATERTHANOREQ      : 100
ID                   : 4 4 5 26 30 31 32 33 34 35 36 67 68 75 76
IF                   : 45 46
INT                  : 22
INTCONST             : 57
LBRACE               : 4 5 41
LBRACKET             : 
LESSTHAN             : 97
LESSTHANOREQ         : 99
LPAREN               : 31 32 33 34 35 36 45 46 47 48 66 67 68 77 78
MINUS                : 90 102
MINUSMINUS           : 87 88
NEW                  : 67 68
NEWLINE              : 
NOT                  : 103
NOTEQUALS            : 96
NULL                 : 60
NUMBER               : 
OR                   : 94
PERIOD               : 75
PLUS                 : 89 101
PLUSPLUS             : 85 86
PRIVATE              : 16 18
PUBLIC               : 15 17
RBRACE               : 4 5 41
RBRACKET             : 
RETURN               : 49 50
RPAREN               : 31 32 33 34 35 36 45 46 47 48 66 67 68 77 78
SEMICOLON            : 7 10 48 48 49 50 51 52 53 55 56
STATIC               : 15 16 19
STRING               : 
STRINGCONST          : 59
SUPER                : 65
SYMBOLS              : 
TERMINALS            : 
THIS                 : 64
TIMES                : 91
TRUE                 : 61
VOID                 : 25 32 34
WHILE                : 47
error                : 

Nonterminals, with rules where they appear

arguments            : 67 72 78
arith_op             : 81
assign               : 80 104
block                : 31 32 33 34 35 36 54
block_end            : 41 43
bool_op              : 82
class_body_decl      : 4 5
class_body_sub_decls : 6 7 8 9
class_decl           : 2 3
constructor_decl     : 9 11
empty                : 13 20 29 39 44 73
expr                 : 45 46 47 48 50 66 71 72 81 81 82 82 83 84
field_access         : 74 77 78
field_decl           : 7 10
formal_param         : 37 38
formals              : 33 34 36 37
lhs                  : 69 84 85 86 87 88
literal              : 63
method_decl          : 8 12
method_invocation    : 70 105
modifier             : 14 31 32 33 34 35 36
primary              : 75 79
program              : 3 0
stmt                 : 42 43 45 46 46 47 48
stmt_expr            : 48 48 51
type                 : 21 31 33 40
unary_op             : 83
var_decl             : 14 55
variable             : 27 28 40
variables            : 21 28

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . class_decl
    (3) program -> . class_decl program
    (4) class_decl -> . CLASS ID EXTENDS ID LBRACE class_body_decl RBRACE
    (5) class_decl -> . CLASS ID LBRACE class_body_decl RBRACE

    CLASS           shift and go to state 3

    program                        shift and go to state 1
    class_decl                     shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (2) program -> class_decl .
    (3) program -> class_decl . program
    (2) program -> . class_decl
    (3) program -> . class_decl program
    (4) class_decl -> . CLASS ID EXTENDS ID LBRACE class_body_decl RBRACE
    (5) class_decl -> . CLASS ID LBRACE class_body_decl RBRACE

    $end            reduce using rule 2 (program -> class_decl .)
    CLASS           shift and go to state 3

    class_decl                     shift and go to state 2
    program                        shift and go to state 4

state 3

    (4) class_decl -> CLASS . ID EXTENDS ID LBRACE class_body_decl RBRACE
    (5) class_decl -> CLASS . ID LBRACE class_body_decl RBRACE

    ID              shift and go to state 5


state 4

    (3) program -> class_decl program .

    $end            reduce using rule 3 (program -> class_decl program .)


state 5

    (4) class_decl -> CLASS ID . EXTENDS ID LBRACE class_body_decl RBRACE
    (5) class_decl -> CLASS ID . LBRACE class_body_decl RBRACE

    EXTENDS         shift and go to state 6
    LBRACE          shift and go to state 7


state 6

    (4) class_decl -> CLASS ID EXTENDS . ID LBRACE class_body_decl RBRACE

    ID              shift and go to state 8


state 7

    (5) class_decl -> CLASS ID LBRACE . class_body_decl RBRACE
    (6) class_body_decl -> . class_body_sub_decls
    (7) class_body_sub_decls -> . field_decl SEMICOLON class_body_sub_decls
    (8) class_body_sub_decls -> . method_decl class_body_sub_decls
    (9) class_body_sub_decls -> . constructor_decl class_body_sub_decls
    (10) class_body_sub_decls -> . field_decl SEMICOLON
    (11) class_body_sub_decls -> . constructor_decl
    (12) class_body_sub_decls -> . method_decl
    (13) class_body_sub_decls -> . empty
    (14) field_decl -> . modifier var_decl
    (31) method_decl -> . modifier type ID LPAREN RPAREN block
    (32) method_decl -> . modifier VOID ID LPAREN RPAREN block
    (33) method_decl -> . modifier type ID LPAREN formals RPAREN block
    (34) method_decl -> . modifier VOID ID LPAREN formals RPAREN block
    (35) constructor_decl -> . modifier ID LPAREN RPAREN block
    (36) constructor_decl -> . modifier ID LPAREN formals RPAREN block
    (1) empty -> .
    (15) modifier -> . PUBLIC STATIC
    (16) modifier -> . PRIVATE STATIC
    (17) modifier -> . PUBLIC
    (18) modifier -> . PRIVATE
    (19) modifier -> . STATIC
    (20) modifier -> . empty

    RBRACE          reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    PUBLIC          shift and go to state 16
    PRIVATE         shift and go to state 18
    STATIC          shift and go to state 17

    class_body_decl                shift and go to state 9
    class_body_sub_decls           shift and go to state 10
    field_decl                     shift and go to state 11
    method_decl                    shift and go to state 12
    constructor_decl               shift and go to state 13
    empty                          shift and go to state 14
    modifier                       shift and go to state 15

state 8

    (4) class_decl -> CLASS ID EXTENDS ID . LBRACE class_body_decl RBRACE

    LBRACE          shift and go to state 19


state 9

    (5) class_decl -> CLASS ID LBRACE class_body_decl . RBRACE

    RBRACE          shift and go to state 20


state 10

    (6) class_body_decl -> class_body_sub_decls .

    RBRACE          reduce using rule 6 (class_body_decl -> class_body_sub_decls .)


state 11

    (7) class_body_sub_decls -> field_decl . SEMICOLON class_body_sub_decls
    (10) class_body_sub_decls -> field_decl . SEMICOLON

    SEMICOLON       shift and go to state 21


state 12

    (8) class_body_sub_decls -> method_decl . class_body_sub_decls
    (12) class_body_sub_decls -> method_decl .
    (7) class_body_sub_decls -> . field_decl SEMICOLON class_body_sub_decls
    (8) class_body_sub_decls -> . method_decl class_body_sub_decls
    (9) class_body_sub_decls -> . constructor_decl class_body_sub_decls
    (10) class_body_sub_decls -> . field_decl SEMICOLON
    (11) class_body_sub_decls -> . constructor_decl
    (12) class_body_sub_decls -> . method_decl
    (13) class_body_sub_decls -> . empty
    (14) field_decl -> . modifier var_decl
    (31) method_decl -> . modifier type ID LPAREN RPAREN block
    (32) method_decl -> . modifier VOID ID LPAREN RPAREN block
    (33) method_decl -> . modifier type ID LPAREN formals RPAREN block
    (34) method_decl -> . modifier VOID ID LPAREN formals RPAREN block
    (35) constructor_decl -> . modifier ID LPAREN RPAREN block
    (36) constructor_decl -> . modifier ID LPAREN formals RPAREN block
    (1) empty -> .
    (15) modifier -> . PUBLIC STATIC
    (16) modifier -> . PRIVATE STATIC
    (17) modifier -> . PUBLIC
    (18) modifier -> . PRIVATE
    (19) modifier -> . STATIC
    (20) modifier -> . empty

  ! reduce/reduce conflict for RBRACE resolved using rule 1 (empty -> .)
    RBRACE          reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    PUBLIC          shift and go to state 16
    PRIVATE         shift and go to state 18
    STATIC          shift and go to state 17

  ! RBRACE          [ reduce using rule 12 (class_body_sub_decls -> method_decl .) ]

    method_decl                    shift and go to state 12
    class_body_sub_decls           shift and go to state 22
    field_decl                     shift and go to state 11
    constructor_decl               shift and go to state 13
    empty                          shift and go to state 14
    modifier                       shift and go to state 15

state 13

    (9) class_body_sub_decls -> constructor_decl . class_body_sub_decls
    (11) class_body_sub_decls -> constructor_decl .
    (7) class_body_sub_decls -> . field_decl SEMICOLON class_body_sub_decls
    (8) class_body_sub_decls -> . method_decl class_body_sub_decls
    (9) class_body_sub_decls -> . constructor_decl class_body_sub_decls
    (10) class_body_sub_decls -> . field_decl SEMICOLON
    (11) class_body_sub_decls -> . constructor_decl
    (12) class_body_sub_decls -> . method_decl
    (13) class_body_sub_decls -> . empty
    (14) field_decl -> . modifier var_decl
    (31) method_decl -> . modifier type ID LPAREN RPAREN block
    (32) method_decl -> . modifier VOID ID LPAREN RPAREN block
    (33) method_decl -> . modifier type ID LPAREN formals RPAREN block
    (34) method_decl -> . modifier VOID ID LPAREN formals RPAREN block
    (35) constructor_decl -> . modifier ID LPAREN RPAREN block
    (36) constructor_decl -> . modifier ID LPAREN formals RPAREN block
    (1) empty -> .
    (15) modifier -> . PUBLIC STATIC
    (16) modifier -> . PRIVATE STATIC
    (17) modifier -> . PUBLIC
    (18) modifier -> . PRIVATE
    (19) modifier -> . STATIC
    (20) modifier -> . empty

  ! reduce/reduce conflict for RBRACE resolved using rule 1 (empty -> .)
    RBRACE          reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    PUBLIC          shift and go to state 16
    PRIVATE         shift and go to state 18
    STATIC          shift and go to state 17

  ! RBRACE          [ reduce using rule 11 (class_body_sub_decls -> constructor_decl .) ]

    constructor_decl               shift and go to state 13
    class_body_sub_decls           shift and go to state 23
    field_decl                     shift and go to state 11
    method_decl                    shift and go to state 12
    empty                          shift and go to state 14
    modifier                       shift and go to state 15

state 14

    (13) class_body_sub_decls -> empty .
    (20) modifier -> empty .

    RBRACE          reduce using rule 13 (class_body_sub_decls -> empty .)
    VOID            reduce using rule 20 (modifier -> empty .)
    ID              reduce using rule 20 (modifier -> empty .)
    INT             reduce using rule 20 (modifier -> empty .)
    FLOAT           reduce using rule 20 (modifier -> empty .)
    BOOLEAN         reduce using rule 20 (modifier -> empty .)


state 15

    (14) field_decl -> modifier . var_decl
    (31) method_decl -> modifier . type ID LPAREN RPAREN block
    (32) method_decl -> modifier . VOID ID LPAREN RPAREN block
    (33) method_decl -> modifier . type ID LPAREN formals RPAREN block
    (34) method_decl -> modifier . VOID ID LPAREN formals RPAREN block
    (35) constructor_decl -> modifier . ID LPAREN RPAREN block
    (36) constructor_decl -> modifier . ID LPAREN formals RPAREN block
    (21) var_decl -> . type variables
    (22) type -> . INT
    (23) type -> . FLOAT
    (24) type -> . BOOLEAN
    (25) type -> . VOID
    (26) type -> . ID

    VOID            shift and go to state 27
    ID              shift and go to state 26
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30

    var_decl                       shift and go to state 24
    type                           shift and go to state 25

state 16

    (15) modifier -> PUBLIC . STATIC
    (17) modifier -> PUBLIC .

    STATIC          shift and go to state 31
    VOID            reduce using rule 17 (modifier -> PUBLIC .)
    ID              reduce using rule 17 (modifier -> PUBLIC .)
    INT             reduce using rule 17 (modifier -> PUBLIC .)
    FLOAT           reduce using rule 17 (modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 17 (modifier -> PUBLIC .)


state 17

    (19) modifier -> STATIC .

    VOID            reduce using rule 19 (modifier -> STATIC .)
    ID              reduce using rule 19 (modifier -> STATIC .)
    INT             reduce using rule 19 (modifier -> STATIC .)
    FLOAT           reduce using rule 19 (modifier -> STATIC .)
    BOOLEAN         reduce using rule 19 (modifier -> STATIC .)


state 18

    (16) modifier -> PRIVATE . STATIC
    (18) modifier -> PRIVATE .

    STATIC          shift and go to state 32
    VOID            reduce using rule 18 (modifier -> PRIVATE .)
    ID              reduce using rule 18 (modifier -> PRIVATE .)
    INT             reduce using rule 18 (modifier -> PRIVATE .)
    FLOAT           reduce using rule 18 (modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 18 (modifier -> PRIVATE .)


state 19

    (4) class_decl -> CLASS ID EXTENDS ID LBRACE . class_body_decl RBRACE
    (6) class_body_decl -> . class_body_sub_decls
    (7) class_body_sub_decls -> . field_decl SEMICOLON class_body_sub_decls
    (8) class_body_sub_decls -> . method_decl class_body_sub_decls
    (9) class_body_sub_decls -> . constructor_decl class_body_sub_decls
    (10) class_body_sub_decls -> . field_decl SEMICOLON
    (11) class_body_sub_decls -> . constructor_decl
    (12) class_body_sub_decls -> . method_decl
    (13) class_body_sub_decls -> . empty
    (14) field_decl -> . modifier var_decl
    (31) method_decl -> . modifier type ID LPAREN RPAREN block
    (32) method_decl -> . modifier VOID ID LPAREN RPAREN block
    (33) method_decl -> . modifier type ID LPAREN formals RPAREN block
    (34) method_decl -> . modifier VOID ID LPAREN formals RPAREN block
    (35) constructor_decl -> . modifier ID LPAREN RPAREN block
    (36) constructor_decl -> . modifier ID LPAREN formals RPAREN block
    (1) empty -> .
    (15) modifier -> . PUBLIC STATIC
    (16) modifier -> . PRIVATE STATIC
    (17) modifier -> . PUBLIC
    (18) modifier -> . PRIVATE
    (19) modifier -> . STATIC
    (20) modifier -> . empty

    RBRACE          reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    PUBLIC          shift and go to state 16
    PRIVATE         shift and go to state 18
    STATIC          shift and go to state 17

    class_body_decl                shift and go to state 33
    class_body_sub_decls           shift and go to state 10
    field_decl                     shift and go to state 11
    method_decl                    shift and go to state 12
    constructor_decl               shift and go to state 13
    empty                          shift and go to state 14
    modifier                       shift and go to state 15

state 20

    (5) class_decl -> CLASS ID LBRACE class_body_decl RBRACE .

    CLASS           reduce using rule 5 (class_decl -> CLASS ID LBRACE class_body_decl RBRACE .)
    $end            reduce using rule 5 (class_decl -> CLASS ID LBRACE class_body_decl RBRACE .)


state 21

    (7) class_body_sub_decls -> field_decl SEMICOLON . class_body_sub_decls
    (10) class_body_sub_decls -> field_decl SEMICOLON .
    (7) class_body_sub_decls -> . field_decl SEMICOLON class_body_sub_decls
    (8) class_body_sub_decls -> . method_decl class_body_sub_decls
    (9) class_body_sub_decls -> . constructor_decl class_body_sub_decls
    (10) class_body_sub_decls -> . field_decl SEMICOLON
    (11) class_body_sub_decls -> . constructor_decl
    (12) class_body_sub_decls -> . method_decl
    (13) class_body_sub_decls -> . empty
    (14) field_decl -> . modifier var_decl
    (31) method_decl -> . modifier type ID LPAREN RPAREN block
    (32) method_decl -> . modifier VOID ID LPAREN RPAREN block
    (33) method_decl -> . modifier type ID LPAREN formals RPAREN block
    (34) method_decl -> . modifier VOID ID LPAREN formals RPAREN block
    (35) constructor_decl -> . modifier ID LPAREN RPAREN block
    (36) constructor_decl -> . modifier ID LPAREN formals RPAREN block
    (1) empty -> .
    (15) modifier -> . PUBLIC STATIC
    (16) modifier -> . PRIVATE STATIC
    (17) modifier -> . PUBLIC
    (18) modifier -> . PRIVATE
    (19) modifier -> . STATIC
    (20) modifier -> . empty

  ! reduce/reduce conflict for RBRACE resolved using rule 1 (empty -> .)
    RBRACE          reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    PUBLIC          shift and go to state 16
    PRIVATE         shift and go to state 18
    STATIC          shift and go to state 17

  ! RBRACE          [ reduce using rule 10 (class_body_sub_decls -> field_decl SEMICOLON .) ]

    field_decl                     shift and go to state 11
    class_body_sub_decls           shift and go to state 34
    method_decl                    shift and go to state 12
    constructor_decl               shift and go to state 13
    empty                          shift and go to state 14
    modifier                       shift and go to state 15

state 22

    (8) class_body_sub_decls -> method_decl class_body_sub_decls .

    RBRACE          reduce using rule 8 (class_body_sub_decls -> method_decl class_body_sub_decls .)


state 23

    (9) class_body_sub_decls -> constructor_decl class_body_sub_decls .

    RBRACE          reduce using rule 9 (class_body_sub_decls -> constructor_decl class_body_sub_decls .)


state 24

    (14) field_decl -> modifier var_decl .

    SEMICOLON       reduce using rule 14 (field_decl -> modifier var_decl .)


state 25

    (31) method_decl -> modifier type . ID LPAREN RPAREN block
    (33) method_decl -> modifier type . ID LPAREN formals RPAREN block
    (21) var_decl -> type . variables
    (27) variables -> . variable
    (28) variables -> . variables COMMA variable
    (29) variables -> . empty
    (30) variable -> . ID
    (1) empty -> .

    ID              shift and go to state 35
    COMMA           reduce using rule 1 (empty -> .)
    SEMICOLON       reduce using rule 1 (empty -> .)

    variables                      shift and go to state 36
    variable                       shift and go to state 37
    empty                          shift and go to state 38

state 26

    (35) constructor_decl -> modifier ID . LPAREN RPAREN block
    (36) constructor_decl -> modifier ID . LPAREN formals RPAREN block
    (26) type -> ID .

    LPAREN          shift and go to state 39
    ID              reduce using rule 26 (type -> ID .)
    COMMA           reduce using rule 26 (type -> ID .)
    SEMICOLON       reduce using rule 26 (type -> ID .)


state 27

    (32) method_decl -> modifier VOID . ID LPAREN RPAREN block
    (34) method_decl -> modifier VOID . ID LPAREN formals RPAREN block
    (25) type -> VOID .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 40
    COMMA           reduce using rule 25 (type -> VOID .)
    SEMICOLON       reduce using rule 25 (type -> VOID .)

  ! ID              [ reduce using rule 25 (type -> VOID .) ]


state 28

    (22) type -> INT .

    ID              reduce using rule 22 (type -> INT .)
    COMMA           reduce using rule 22 (type -> INT .)
    SEMICOLON       reduce using rule 22 (type -> INT .)


state 29

    (23) type -> FLOAT .

    ID              reduce using rule 23 (type -> FLOAT .)
    COMMA           reduce using rule 23 (type -> FLOAT .)
    SEMICOLON       reduce using rule 23 (type -> FLOAT .)


state 30

    (24) type -> BOOLEAN .

    ID              reduce using rule 24 (type -> BOOLEAN .)
    COMMA           reduce using rule 24 (type -> BOOLEAN .)
    SEMICOLON       reduce using rule 24 (type -> BOOLEAN .)


state 31

    (15) modifier -> PUBLIC STATIC .

    VOID            reduce using rule 15 (modifier -> PUBLIC STATIC .)
    ID              reduce using rule 15 (modifier -> PUBLIC STATIC .)
    INT             reduce using rule 15 (modifier -> PUBLIC STATIC .)
    FLOAT           reduce using rule 15 (modifier -> PUBLIC STATIC .)
    BOOLEAN         reduce using rule 15 (modifier -> PUBLIC STATIC .)


state 32

    (16) modifier -> PRIVATE STATIC .

    VOID            reduce using rule 16 (modifier -> PRIVATE STATIC .)
    ID              reduce using rule 16 (modifier -> PRIVATE STATIC .)
    INT             reduce using rule 16 (modifier -> PRIVATE STATIC .)
    FLOAT           reduce using rule 16 (modifier -> PRIVATE STATIC .)
    BOOLEAN         reduce using rule 16 (modifier -> PRIVATE STATIC .)


state 33

    (4) class_decl -> CLASS ID EXTENDS ID LBRACE class_body_decl . RBRACE

    RBRACE          shift and go to state 41


state 34

    (7) class_body_sub_decls -> field_decl SEMICOLON class_body_sub_decls .

    RBRACE          reduce using rule 7 (class_body_sub_decls -> field_decl SEMICOLON class_body_sub_decls .)


state 35

    (31) method_decl -> modifier type ID . LPAREN RPAREN block
    (33) method_decl -> modifier type ID . LPAREN formals RPAREN block
    (30) variable -> ID .

    LPAREN          shift and go to state 42
    COMMA           reduce using rule 30 (variable -> ID .)
    SEMICOLON       reduce using rule 30 (variable -> ID .)


state 36

    (21) var_decl -> type variables .
    (28) variables -> variables . COMMA variable

    SEMICOLON       reduce using rule 21 (var_decl -> type variables .)
    COMMA           shift and go to state 43


state 37

    (27) variables -> variable .

    COMMA           reduce using rule 27 (variables -> variable .)
    SEMICOLON       reduce using rule 27 (variables -> variable .)


state 38

    (29) variables -> empty .

    COMMA           reduce using rule 29 (variables -> empty .)
    SEMICOLON       reduce using rule 29 (variables -> empty .)


state 39

    (35) constructor_decl -> modifier ID LPAREN . RPAREN block
    (36) constructor_decl -> modifier ID LPAREN . formals RPAREN block
    (37) formals -> . formals COMMA formal_param
    (38) formals -> . formal_param
    (39) formals -> . empty
    (40) formal_param -> . type variable
    (1) empty -> .
    (22) type -> . INT
    (23) type -> . FLOAT
    (24) type -> . BOOLEAN
    (25) type -> . VOID
    (26) type -> . ID

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 45
    COMMA           reduce using rule 1 (empty -> .)
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 44

  ! RPAREN          [ reduce using rule 1 (empty -> .) ]

    formals                        shift and go to state 46
    formal_param                   shift and go to state 47
    empty                          shift and go to state 48
    type                           shift and go to state 49

state 40

    (32) method_decl -> modifier VOID ID . LPAREN RPAREN block
    (34) method_decl -> modifier VOID ID . LPAREN formals RPAREN block

    LPAREN          shift and go to state 51


state 41

    (4) class_decl -> CLASS ID EXTENDS ID LBRACE class_body_decl RBRACE .

    CLASS           reduce using rule 4 (class_decl -> CLASS ID EXTENDS ID LBRACE class_body_decl RBRACE .)
    $end            reduce using rule 4 (class_decl -> CLASS ID EXTENDS ID LBRACE class_body_decl RBRACE .)


state 42

    (31) method_decl -> modifier type ID LPAREN . RPAREN block
    (33) method_decl -> modifier type ID LPAREN . formals RPAREN block
    (37) formals -> . formals COMMA formal_param
    (38) formals -> . formal_param
    (39) formals -> . empty
    (40) formal_param -> . type variable
    (1) empty -> .
    (22) type -> . INT
    (23) type -> . FLOAT
    (24) type -> . BOOLEAN
    (25) type -> . VOID
    (26) type -> . ID

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 52
    COMMA           reduce using rule 1 (empty -> .)
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 44

  ! RPAREN          [ reduce using rule 1 (empty -> .) ]

    type                           shift and go to state 49
    formals                        shift and go to state 53
    formal_param                   shift and go to state 47
    empty                          shift and go to state 48

state 43

    (28) variables -> variables COMMA . variable
    (30) variable -> . ID

    ID              shift and go to state 55

    variable                       shift and go to state 54

state 44

    (26) type -> ID .

    ID              reduce using rule 26 (type -> ID .)


state 45

    (35) constructor_decl -> modifier ID LPAREN RPAREN . block
    (41) block -> . LBRACE block_end RBRACE

    LBRACE          shift and go to state 57

    block                          shift and go to state 56

state 46

    (36) constructor_decl -> modifier ID LPAREN formals . RPAREN block
    (37) formals -> formals . COMMA formal_param

    RPAREN          shift and go to state 58
    COMMA           shift and go to state 59


state 47

    (38) formals -> formal_param .

    RPAREN          reduce using rule 38 (formals -> formal_param .)
    COMMA           reduce using rule 38 (formals -> formal_param .)


state 48

    (39) formals -> empty .

    RPAREN          reduce using rule 39 (formals -> empty .)
    COMMA           reduce using rule 39 (formals -> empty .)


state 49

    (40) formal_param -> type . variable
    (30) variable -> . ID

    ID              shift and go to state 55

    variable                       shift and go to state 60

state 50

    (25) type -> VOID .

    ID              reduce using rule 25 (type -> VOID .)
    COMMA           reduce using rule 25 (type -> VOID .)
    SEMICOLON       reduce using rule 25 (type -> VOID .)


state 51

    (32) method_decl -> modifier VOID ID LPAREN . RPAREN block
    (34) method_decl -> modifier VOID ID LPAREN . formals RPAREN block
    (37) formals -> . formals COMMA formal_param
    (38) formals -> . formal_param
    (39) formals -> . empty
    (40) formal_param -> . type variable
    (1) empty -> .
    (22) type -> . INT
    (23) type -> . FLOAT
    (24) type -> . BOOLEAN
    (25) type -> . VOID
    (26) type -> . ID

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 61
    COMMA           reduce using rule 1 (empty -> .)
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 44

  ! RPAREN          [ reduce using rule 1 (empty -> .) ]

    formals                        shift and go to state 62
    formal_param                   shift and go to state 47
    empty                          shift and go to state 48
    type                           shift and go to state 49

state 52

    (31) method_decl -> modifier type ID LPAREN RPAREN . block
    (41) block -> . LBRACE block_end RBRACE

    LBRACE          shift and go to state 57

    block                          shift and go to state 63

state 53

    (33) method_decl -> modifier type ID LPAREN formals . RPAREN block
    (37) formals -> formals . COMMA formal_param

    RPAREN          shift and go to state 64
    COMMA           shift and go to state 59


state 54

    (28) variables -> variables COMMA variable .

    COMMA           reduce using rule 28 (variables -> variables COMMA variable .)
    SEMICOLON       reduce using rule 28 (variables -> variables COMMA variable .)


state 55

    (30) variable -> ID .

    COMMA           reduce using rule 30 (variable -> ID .)
    SEMICOLON       reduce using rule 30 (variable -> ID .)
    RPAREN          reduce using rule 30 (variable -> ID .)


state 56

    (35) constructor_decl -> modifier ID LPAREN RPAREN block .

    PUBLIC          reduce using rule 35 (constructor_decl -> modifier ID LPAREN RPAREN block .)
    PRIVATE         reduce using rule 35 (constructor_decl -> modifier ID LPAREN RPAREN block .)
    STATIC          reduce using rule 35 (constructor_decl -> modifier ID LPAREN RPAREN block .)
    VOID            reduce using rule 35 (constructor_decl -> modifier ID LPAREN RPAREN block .)
    ID              reduce using rule 35 (constructor_decl -> modifier ID LPAREN RPAREN block .)
    INT             reduce using rule 35 (constructor_decl -> modifier ID LPAREN RPAREN block .)
    FLOAT           reduce using rule 35 (constructor_decl -> modifier ID LPAREN RPAREN block .)
    BOOLEAN         reduce using rule 35 (constructor_decl -> modifier ID LPAREN RPAREN block .)
    RBRACE          reduce using rule 35 (constructor_decl -> modifier ID LPAREN RPAREN block .)


state 57

    (41) block -> LBRACE . block_end RBRACE
    (42) block_end -> . stmt
    (43) block_end -> . stmt block_end
    (44) block_end -> . empty
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (47) stmt -> . WHILE LPAREN expr RPAREN stmt
    (48) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (49) stmt -> . RETURN SEMICOLON
    (50) stmt -> . RETURN expr SEMICOLON
    (51) stmt -> . stmt_expr SEMICOLON
    (52) stmt -> . BREAK SEMICOLON
    (53) stmt -> . CONTINUE SEMICOLON
    (54) stmt -> . block
    (55) stmt -> . var_decl SEMICOLON
    (56) stmt -> . SEMICOLON
    (1) empty -> .
    (104) stmt_expr -> . assign
    (105) stmt_expr -> . method_invocation
    (41) block -> . LBRACE block_end RBRACE
    (21) var_decl -> . type variables
    (84) assign -> . lhs EQUALS expr
    (85) assign -> . lhs PLUSPLUS
    (86) assign -> . PLUSPLUS lhs
    (87) assign -> . lhs MINUSMINUS
    (88) assign -> . MINUSMINUS lhs
    (77) method_invocation -> . field_access LPAREN RPAREN
    (78) method_invocation -> . field_access LPAREN arguments RPAREN
    (22) type -> . INT
    (23) type -> . FLOAT
    (24) type -> . BOOLEAN
    (25) type -> . VOID
    (26) type -> . ID
    (74) lhs -> . field_access
    (75) field_access -> . primary PERIOD ID
    (76) field_access -> . ID
    (63) primary -> . literal
    (64) primary -> . THIS
    (65) primary -> . SUPER
    (66) primary -> . LPAREN expr RPAREN
    (67) primary -> . NEW ID LPAREN arguments RPAREN
    (68) primary -> . NEW ID LPAREN RPAREN
    (69) primary -> . lhs
    (70) primary -> . method_invocation
    (57) literal -> . INTCONST
    (58) literal -> . FLOATCONST
    (59) literal -> . STRINGCONST
    (60) literal -> . NULL
    (61) literal -> . TRUE
    (62) literal -> . FALSE

    IF              shift and go to state 68
    WHILE           shift and go to state 70
    FOR             shift and go to state 71
    RETURN          shift and go to state 74
    BREAK           shift and go to state 75
    CONTINUE        shift and go to state 76
    SEMICOLON       shift and go to state 73
    RBRACE          reduce using rule 1 (empty -> .)
    LBRACE          shift and go to state 57
    PLUSPLUS        shift and go to state 83
    MINUSMINUS      shift and go to state 84
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 86
    THIS            shift and go to state 89
    SUPER           shift and go to state 90
    LPAREN          shift and go to state 69
    NEW             shift and go to state 91
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 93
    STRINGCONST     shift and go to state 94
    NULL            shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97

    block_end                      shift and go to state 65
    stmt                           shift and go to state 66
    empty                          shift and go to state 67
    stmt_expr                      shift and go to state 72
    block                          shift and go to state 77
    var_decl                       shift and go to state 78
    assign                         shift and go to state 79
    method_invocation              shift and go to state 80
    type                           shift and go to state 81
    lhs                            shift and go to state 82
    field_access                   shift and go to state 85
    primary                        shift and go to state 87
    literal                        shift and go to state 88

state 58

    (36) constructor_decl -> modifier ID LPAREN formals RPAREN . block
    (41) block -> . LBRACE block_end RBRACE

    LBRACE          shift and go to state 57

    block                          shift and go to state 98

state 59

    (37) formals -> formals COMMA . formal_param
    (40) formal_param -> . type variable
    (22) type -> . INT
    (23) type -> . FLOAT
    (24) type -> . BOOLEAN
    (25) type -> . VOID
    (26) type -> . ID

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 44

    formal_param                   shift and go to state 99
    type                           shift and go to state 49

state 60

    (40) formal_param -> type variable .

    RPAREN          reduce using rule 40 (formal_param -> type variable .)
    COMMA           reduce using rule 40 (formal_param -> type variable .)


state 61

    (32) method_decl -> modifier VOID ID LPAREN RPAREN . block
    (41) block -> . LBRACE block_end RBRACE

    LBRACE          shift and go to state 57

    block                          shift and go to state 100

state 62

    (34) method_decl -> modifier VOID ID LPAREN formals . RPAREN block
    (37) formals -> formals . COMMA formal_param

    RPAREN          shift and go to state 101
    COMMA           shift and go to state 59


state 63

    (31) method_decl -> modifier type ID LPAREN RPAREN block .

    PUBLIC          reduce using rule 31 (method_decl -> modifier type ID LPAREN RPAREN block .)
    PRIVATE         reduce using rule 31 (method_decl -> modifier type ID LPAREN RPAREN block .)
    STATIC          reduce using rule 31 (method_decl -> modifier type ID LPAREN RPAREN block .)
    VOID            reduce using rule 31 (method_decl -> modifier type ID LPAREN RPAREN block .)
    ID              reduce using rule 31 (method_decl -> modifier type ID LPAREN RPAREN block .)
    INT             reduce using rule 31 (method_decl -> modifier type ID LPAREN RPAREN block .)
    FLOAT           reduce using rule 31 (method_decl -> modifier type ID LPAREN RPAREN block .)
    BOOLEAN         reduce using rule 31 (method_decl -> modifier type ID LPAREN RPAREN block .)
    RBRACE          reduce using rule 31 (method_decl -> modifier type ID LPAREN RPAREN block .)


state 64

    (33) method_decl -> modifier type ID LPAREN formals RPAREN . block
    (41) block -> . LBRACE block_end RBRACE

    LBRACE          shift and go to state 57

    block                          shift and go to state 102

state 65

    (41) block -> LBRACE block_end . RBRACE

    RBRACE          shift and go to state 103


state 66

    (42) block_end -> stmt .
    (43) block_end -> stmt . block_end
    (42) block_end -> . stmt
    (43) block_end -> . stmt block_end
    (44) block_end -> . empty
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (47) stmt -> . WHILE LPAREN expr RPAREN stmt
    (48) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (49) stmt -> . RETURN SEMICOLON
    (50) stmt -> . RETURN expr SEMICOLON
    (51) stmt -> . stmt_expr SEMICOLON
    (52) stmt -> . BREAK SEMICOLON
    (53) stmt -> . CONTINUE SEMICOLON
    (54) stmt -> . block
    (55) stmt -> . var_decl SEMICOLON
    (56) stmt -> . SEMICOLON
    (1) empty -> .
    (104) stmt_expr -> . assign
    (105) stmt_expr -> . method_invocation
    (41) block -> . LBRACE block_end RBRACE
    (21) var_decl -> . type variables
    (84) assign -> . lhs EQUALS expr
    (85) assign -> . lhs PLUSPLUS
    (86) assign -> . PLUSPLUS lhs
    (87) assign -> . lhs MINUSMINUS
    (88) assign -> . MINUSMINUS lhs
    (77) method_invocation -> . field_access LPAREN RPAREN
    (78) method_invocation -> . field_access LPAREN arguments RPAREN
    (22) type -> . INT
    (23) type -> . FLOAT
    (24) type -> . BOOLEAN
    (25) type -> . VOID
    (26) type -> . ID
    (74) lhs -> . field_access
    (75) field_access -> . primary PERIOD ID
    (76) field_access -> . ID
    (63) primary -> . literal
    (64) primary -> . THIS
    (65) primary -> . SUPER
    (66) primary -> . LPAREN expr RPAREN
    (67) primary -> . NEW ID LPAREN arguments RPAREN
    (68) primary -> . NEW ID LPAREN RPAREN
    (69) primary -> . lhs
    (70) primary -> . method_invocation
    (57) literal -> . INTCONST
    (58) literal -> . FLOATCONST
    (59) literal -> . STRINGCONST
    (60) literal -> . NULL
    (61) literal -> . TRUE
    (62) literal -> . FALSE

  ! reduce/reduce conflict for RBRACE resolved using rule 1 (empty -> .)
    IF              shift and go to state 68
    WHILE           shift and go to state 70
    FOR             shift and go to state 71
    RETURN          shift and go to state 74
    BREAK           shift and go to state 75
    CONTINUE        shift and go to state 76
    SEMICOLON       shift and go to state 73
    RBRACE          reduce using rule 1 (empty -> .)
    LBRACE          shift and go to state 57
    PLUSPLUS        shift and go to state 83
    MINUSMINUS      shift and go to state 84
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 86
    THIS            shift and go to state 89
    SUPER           shift and go to state 90
    LPAREN          shift and go to state 69
    NEW             shift and go to state 91
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 93
    STRINGCONST     shift and go to state 94
    NULL            shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97

  ! RBRACE          [ reduce using rule 42 (block_end -> stmt .) ]

    stmt                           shift and go to state 66
    block_end                      shift and go to state 104
    empty                          shift and go to state 67
    stmt_expr                      shift and go to state 72
    block                          shift and go to state 77
    var_decl                       shift and go to state 78
    assign                         shift and go to state 79
    method_invocation              shift and go to state 80
    type                           shift and go to state 81
    lhs                            shift and go to state 82
    field_access                   shift and go to state 85
    primary                        shift and go to state 87
    literal                        shift and go to state 88

state 67

    (44) block_end -> empty .

    RBRACE          reduce using rule 44 (block_end -> empty .)


state 68

    (45) stmt -> IF . LPAREN expr RPAREN stmt
    (46) stmt -> IF . LPAREN expr RPAREN stmt ELSE stmt

    LPAREN          shift and go to state 105


state 69

    (66) primary -> LPAREN . expr RPAREN
    (79) expr -> . primary
    (80) expr -> . assign
    (81) expr -> . expr arith_op expr
    (82) expr -> . expr bool_op expr
    (83) expr -> . unary_op expr
    (63) primary -> . literal
    (64) primary -> . THIS
    (65) primary -> . SUPER
    (66) primary -> . LPAREN expr RPAREN
    (67) primary -> . NEW ID LPAREN arguments RPAREN
    (68) primary -> . NEW ID LPAREN RPAREN
    (69) primary -> . lhs
    (70) primary -> . method_invocation
    (84) assign -> . lhs EQUALS expr
    (85) assign -> . lhs PLUSPLUS
    (86) assign -> . PLUSPLUS lhs
    (87) assign -> . lhs MINUSMINUS
    (88) assign -> . MINUSMINUS lhs
    (101) unary_op -> . PLUS
    (102) unary_op -> . MINUS
    (103) unary_op -> . NOT
    (57) literal -> . INTCONST
    (58) literal -> . FLOATCONST
    (59) literal -> . STRINGCONST
    (60) literal -> . NULL
    (61) literal -> . TRUE
    (62) literal -> . FALSE
    (74) lhs -> . field_access
    (77) method_invocation -> . field_access LPAREN RPAREN
    (78) method_invocation -> . field_access LPAREN arguments RPAREN
    (75) field_access -> . primary PERIOD ID
    (76) field_access -> . ID

    THIS            shift and go to state 89
    SUPER           shift and go to state 90
    LPAREN          shift and go to state 69
    NEW             shift and go to state 91
    PLUSPLUS        shift and go to state 83
    MINUSMINUS      shift and go to state 84
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    NOT             shift and go to state 115
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 93
    STRINGCONST     shift and go to state 94
    NULL            shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    ID              shift and go to state 110

    expr                           shift and go to state 106
    primary                        shift and go to state 107
    assign                         shift and go to state 108
    unary_op                       shift and go to state 109
    literal                        shift and go to state 88
    lhs                            shift and go to state 111
    method_invocation              shift and go to state 112
    field_access                   shift and go to state 116

state 70

    (47) stmt -> WHILE . LPAREN expr RPAREN stmt

    LPAREN          shift and go to state 117


state 71

    (48) stmt -> FOR . LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt

    LPAREN          shift and go to state 118


state 72

    (51) stmt -> stmt_expr . SEMICOLON

    SEMICOLON       shift and go to state 119


state 73

    (56) stmt -> SEMICOLON .

    IF              reduce using rule 56 (stmt -> SEMICOLON .)
    WHILE           reduce using rule 56 (stmt -> SEMICOLON .)
    FOR             reduce using rule 56 (stmt -> SEMICOLON .)
    RETURN          reduce using rule 56 (stmt -> SEMICOLON .)
    BREAK           reduce using rule 56 (stmt -> SEMICOLON .)
    CONTINUE        reduce using rule 56 (stmt -> SEMICOLON .)
    SEMICOLON       reduce using rule 56 (stmt -> SEMICOLON .)
    LBRACE          reduce using rule 56 (stmt -> SEMICOLON .)
    PLUSPLUS        reduce using rule 56 (stmt -> SEMICOLON .)
    MINUSMINUS      reduce using rule 56 (stmt -> SEMICOLON .)
    INT             reduce using rule 56 (stmt -> SEMICOLON .)
    FLOAT           reduce using rule 56 (stmt -> SEMICOLON .)
    BOOLEAN         reduce using rule 56 (stmt -> SEMICOLON .)
    VOID            reduce using rule 56 (stmt -> SEMICOLON .)
    ID              reduce using rule 56 (stmt -> SEMICOLON .)
    THIS            reduce using rule 56 (stmt -> SEMICOLON .)
    SUPER           reduce using rule 56 (stmt -> SEMICOLON .)
    LPAREN          reduce using rule 56 (stmt -> SEMICOLON .)
    NEW             reduce using rule 56 (stmt -> SEMICOLON .)
    INTCONST        reduce using rule 56 (stmt -> SEMICOLON .)
    FLOATCONST      reduce using rule 56 (stmt -> SEMICOLON .)
    STRINGCONST     reduce using rule 56 (stmt -> SEMICOLON .)
    NULL            reduce using rule 56 (stmt -> SEMICOLON .)
    TRUE            reduce using rule 56 (stmt -> SEMICOLON .)
    FALSE           reduce using rule 56 (stmt -> SEMICOLON .)
    RBRACE          reduce using rule 56 (stmt -> SEMICOLON .)
    ELSE            reduce using rule 56 (stmt -> SEMICOLON .)


state 74

    (49) stmt -> RETURN . SEMICOLON
    (50) stmt -> RETURN . expr SEMICOLON
    (79) expr -> . primary
    (80) expr -> . assign
    (81) expr -> . expr arith_op expr
    (82) expr -> . expr bool_op expr
    (83) expr -> . unary_op expr
    (63) primary -> . literal
    (64) primary -> . THIS
    (65) primary -> . SUPER
    (66) primary -> . LPAREN expr RPAREN
    (67) primary -> . NEW ID LPAREN arguments RPAREN
    (68) primary -> . NEW ID LPAREN RPAREN
    (69) primary -> . lhs
    (70) primary -> . method_invocation
    (84) assign -> . lhs EQUALS expr
    (85) assign -> . lhs PLUSPLUS
    (86) assign -> . PLUSPLUS lhs
    (87) assign -> . lhs MINUSMINUS
    (88) assign -> . MINUSMINUS lhs
    (101) unary_op -> . PLUS
    (102) unary_op -> . MINUS
    (103) unary_op -> . NOT
    (57) literal -> . INTCONST
    (58) literal -> . FLOATCONST
    (59) literal -> . STRINGCONST
    (60) literal -> . NULL
    (61) literal -> . TRUE
    (62) literal -> . FALSE
    (74) lhs -> . field_access
    (77) method_invocation -> . field_access LPAREN RPAREN
    (78) method_invocation -> . field_access LPAREN arguments RPAREN
    (75) field_access -> . primary PERIOD ID
    (76) field_access -> . ID

    SEMICOLON       shift and go to state 120
    THIS            shift and go to state 89
    SUPER           shift and go to state 90
    LPAREN          shift and go to state 69
    NEW             shift and go to state 91
    PLUSPLUS        shift and go to state 83
    MINUSMINUS      shift and go to state 84
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    NOT             shift and go to state 115
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 93
    STRINGCONST     shift and go to state 94
    NULL            shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    ID              shift and go to state 110

    expr                           shift and go to state 121
    primary                        shift and go to state 107
    assign                         shift and go to state 108
    unary_op                       shift and go to state 109
    literal                        shift and go to state 88
    lhs                            shift and go to state 111
    method_invocation              shift and go to state 112
    field_access                   shift and go to state 116

state 75

    (52) stmt -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 122


state 76

    (53) stmt -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 123


state 77

    (54) stmt -> block .

    IF              reduce using rule 54 (stmt -> block .)
    WHILE           reduce using rule 54 (stmt -> block .)
    FOR             reduce using rule 54 (stmt -> block .)
    RETURN          reduce using rule 54 (stmt -> block .)
    BREAK           reduce using rule 54 (stmt -> block .)
    CONTINUE        reduce using rule 54 (stmt -> block .)
    SEMICOLON       reduce using rule 54 (stmt -> block .)
    LBRACE          reduce using rule 54 (stmt -> block .)
    PLUSPLUS        reduce using rule 54 (stmt -> block .)
    MINUSMINUS      reduce using rule 54 (stmt -> block .)
    INT             reduce using rule 54 (stmt -> block .)
    FLOAT           reduce using rule 54 (stmt -> block .)
    BOOLEAN         reduce using rule 54 (stmt -> block .)
    VOID            reduce using rule 54 (stmt -> block .)
    ID              reduce using rule 54 (stmt -> block .)
    THIS            reduce using rule 54 (stmt -> block .)
    SUPER           reduce using rule 54 (stmt -> block .)
    LPAREN          reduce using rule 54 (stmt -> block .)
    NEW             reduce using rule 54 (stmt -> block .)
    INTCONST        reduce using rule 54 (stmt -> block .)
    FLOATCONST      reduce using rule 54 (stmt -> block .)
    STRINGCONST     reduce using rule 54 (stmt -> block .)
    NULL            reduce using rule 54 (stmt -> block .)
    TRUE            reduce using rule 54 (stmt -> block .)
    FALSE           reduce using rule 54 (stmt -> block .)
    RBRACE          reduce using rule 54 (stmt -> block .)
    ELSE            reduce using rule 54 (stmt -> block .)


state 78

    (55) stmt -> var_decl . SEMICOLON

    SEMICOLON       shift and go to state 124


state 79

    (104) stmt_expr -> assign .

    SEMICOLON       reduce using rule 104 (stmt_expr -> assign .)
    RPAREN          reduce using rule 104 (stmt_expr -> assign .)


state 80

    (105) stmt_expr -> method_invocation .
    (70) primary -> method_invocation .

    SEMICOLON       reduce using rule 105 (stmt_expr -> method_invocation .)
    RPAREN          reduce using rule 105 (stmt_expr -> method_invocation .)
    PERIOD          reduce using rule 70 (primary -> method_invocation .)


state 81

    (21) var_decl -> type . variables
    (27) variables -> . variable
    (28) variables -> . variables COMMA variable
    (29) variables -> . empty
    (30) variable -> . ID
    (1) empty -> .

    ID              shift and go to state 55
    COMMA           reduce using rule 1 (empty -> .)
    SEMICOLON       reduce using rule 1 (empty -> .)

    variables                      shift and go to state 36
    variable                       shift and go to state 37
    empty                          shift and go to state 38

state 82

    (84) assign -> lhs . EQUALS expr
    (85) assign -> lhs . PLUSPLUS
    (87) assign -> lhs . MINUSMINUS
    (69) primary -> lhs .

    EQUALS          shift and go to state 125
    PLUSPLUS        shift and go to state 126
    MINUSMINUS      shift and go to state 127
    PERIOD          reduce using rule 69 (primary -> lhs .)


state 83

    (86) assign -> PLUSPLUS . lhs
    (74) lhs -> . field_access
    (75) field_access -> . primary PERIOD ID
    (76) field_access -> . ID
    (63) primary -> . literal
    (64) primary -> . THIS
    (65) primary -> . SUPER
    (66) primary -> . LPAREN expr RPAREN
    (67) primary -> . NEW ID LPAREN arguments RPAREN
    (68) primary -> . NEW ID LPAREN RPAREN
    (69) primary -> . lhs
    (70) primary -> . method_invocation
    (57) literal -> . INTCONST
    (58) literal -> . FLOATCONST
    (59) literal -> . STRINGCONST
    (60) literal -> . NULL
    (61) literal -> . TRUE
    (62) literal -> . FALSE
    (77) method_invocation -> . field_access LPAREN RPAREN
    (78) method_invocation -> . field_access LPAREN arguments RPAREN

    ID              shift and go to state 110
    THIS            shift and go to state 89
    SUPER           shift and go to state 90
    LPAREN          shift and go to state 69
    NEW             shift and go to state 91
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 93
    STRINGCONST     shift and go to state 94
    NULL            shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97

    lhs                            shift and go to state 128
    field_access                   shift and go to state 116
    primary                        shift and go to state 87
    literal                        shift and go to state 88
    method_invocation              shift and go to state 112

state 84

    (88) assign -> MINUSMINUS . lhs
    (74) lhs -> . field_access
    (75) field_access -> . primary PERIOD ID
    (76) field_access -> . ID
    (63) primary -> . literal
    (64) primary -> . THIS
    (65) primary -> . SUPER
    (66) primary -> . LPAREN expr RPAREN
    (67) primary -> . NEW ID LPAREN arguments RPAREN
    (68) primary -> . NEW ID LPAREN RPAREN
    (69) primary -> . lhs
    (70) primary -> . method_invocation
    (57) literal -> . INTCONST
    (58) literal -> . FLOATCONST
    (59) literal -> . STRINGCONST
    (60) literal -> . NULL
    (61) literal -> . TRUE
    (62) literal -> . FALSE
    (77) method_invocation -> . field_access LPAREN RPAREN
    (78) method_invocation -> . field_access LPAREN arguments RPAREN

    ID              shift and go to state 110
    THIS            shift and go to state 89
    SUPER           shift and go to state 90
    LPAREN          shift and go to state 69
    NEW             shift and go to state 91
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 93
    STRINGCONST     shift and go to state 94
    NULL            shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97

    lhs                            shift and go to state 129
    field_access                   shift and go to state 116
    primary                        shift and go to state 87
    literal                        shift and go to state 88
    method_invocation              shift and go to state 112

state 85

    (77) method_invocation -> field_access . LPAREN RPAREN
    (78) method_invocation -> field_access . LPAREN arguments RPAREN
    (74) lhs -> field_access .

    LPAREN          shift and go to state 130
    EQUALS          reduce using rule 74 (lhs -> field_access .)
    PLUSPLUS        reduce using rule 74 (lhs -> field_access .)
    MINUSMINUS      reduce using rule 74 (lhs -> field_access .)
    PERIOD          reduce using rule 74 (lhs -> field_access .)


state 86

    (26) type -> ID .
    (76) field_access -> ID .

    ID              reduce using rule 26 (type -> ID .)
    COMMA           reduce using rule 26 (type -> ID .)
    SEMICOLON       reduce using rule 26 (type -> ID .)
    LPAREN          reduce using rule 76 (field_access -> ID .)
    EQUALS          reduce using rule 76 (field_access -> ID .)
    PLUSPLUS        reduce using rule 76 (field_access -> ID .)
    MINUSMINUS      reduce using rule 76 (field_access -> ID .)
    PERIOD          reduce using rule 76 (field_access -> ID .)


state 87

    (75) field_access -> primary . PERIOD ID

    PERIOD          shift and go to state 131


state 88

    (63) primary -> literal .

    PERIOD          reduce using rule 63 (primary -> literal .)
    RPAREN          reduce using rule 63 (primary -> literal .)
    PLUS            reduce using rule 63 (primary -> literal .)
    MINUS           reduce using rule 63 (primary -> literal .)
    TIMES           reduce using rule 63 (primary -> literal .)
    DIVIDE          reduce using rule 63 (primary -> literal .)
    AND             reduce using rule 63 (primary -> literal .)
    OR              reduce using rule 63 (primary -> literal .)
    EQUALSCOMPARE   reduce using rule 63 (primary -> literal .)
    NOTEQUALS       reduce using rule 63 (primary -> literal .)
    LESSTHAN        reduce using rule 63 (primary -> literal .)
    GREATERTHAN     reduce using rule 63 (primary -> literal .)
    LESSTHANOREQ    reduce using rule 63 (primary -> literal .)
    GREATERTHANOREQ reduce using rule 63 (primary -> literal .)
    SEMICOLON       reduce using rule 63 (primary -> literal .)
    COMMA           reduce using rule 63 (primary -> literal .)


state 89

    (64) primary -> THIS .

    PERIOD          reduce using rule 64 (primary -> THIS .)
    RPAREN          reduce using rule 64 (primary -> THIS .)
    PLUS            reduce using rule 64 (primary -> THIS .)
    MINUS           reduce using rule 64 (primary -> THIS .)
    TIMES           reduce using rule 64 (primary -> THIS .)
    DIVIDE          reduce using rule 64 (primary -> THIS .)
    AND             reduce using rule 64 (primary -> THIS .)
    OR              reduce using rule 64 (primary -> THIS .)
    EQUALSCOMPARE   reduce using rule 64 (primary -> THIS .)
    NOTEQUALS       reduce using rule 64 (primary -> THIS .)
    LESSTHAN        reduce using rule 64 (primary -> THIS .)
    GREATERTHAN     reduce using rule 64 (primary -> THIS .)
    LESSTHANOREQ    reduce using rule 64 (primary -> THIS .)
    GREATERTHANOREQ reduce using rule 64 (primary -> THIS .)
    SEMICOLON       reduce using rule 64 (primary -> THIS .)
    COMMA           reduce using rule 64 (primary -> THIS .)


state 90

    (65) primary -> SUPER .

    PERIOD          reduce using rule 65 (primary -> SUPER .)
    RPAREN          reduce using rule 65 (primary -> SUPER .)
    PLUS            reduce using rule 65 (primary -> SUPER .)
    MINUS           reduce using rule 65 (primary -> SUPER .)
    TIMES           reduce using rule 65 (primary -> SUPER .)
    DIVIDE          reduce using rule 65 (primary -> SUPER .)
    AND             reduce using rule 65 (primary -> SUPER .)
    OR              reduce using rule 65 (primary -> SUPER .)
    EQUALSCOMPARE   reduce using rule 65 (primary -> SUPER .)
    NOTEQUALS       reduce using rule 65 (primary -> SUPER .)
    LESSTHAN        reduce using rule 65 (primary -> SUPER .)
    GREATERTHAN     reduce using rule 65 (primary -> SUPER .)
    LESSTHANOREQ    reduce using rule 65 (primary -> SUPER .)
    GREATERTHANOREQ reduce using rule 65 (primary -> SUPER .)
    SEMICOLON       reduce using rule 65 (primary -> SUPER .)
    COMMA           reduce using rule 65 (primary -> SUPER .)


state 91

    (67) primary -> NEW . ID LPAREN arguments RPAREN
    (68) primary -> NEW . ID LPAREN RPAREN

    ID              shift and go to state 132


state 92

    (57) literal -> INTCONST .

    PERIOD          reduce using rule 57 (literal -> INTCONST .)
    RPAREN          reduce using rule 57 (literal -> INTCONST .)
    PLUS            reduce using rule 57 (literal -> INTCONST .)
    MINUS           reduce using rule 57 (literal -> INTCONST .)
    TIMES           reduce using rule 57 (literal -> INTCONST .)
    DIVIDE          reduce using rule 57 (literal -> INTCONST .)
    AND             reduce using rule 57 (literal -> INTCONST .)
    OR              reduce using rule 57 (literal -> INTCONST .)
    EQUALSCOMPARE   reduce using rule 57 (literal -> INTCONST .)
    NOTEQUALS       reduce using rule 57 (literal -> INTCONST .)
    LESSTHAN        reduce using rule 57 (literal -> INTCONST .)
    GREATERTHAN     reduce using rule 57 (literal -> INTCONST .)
    LESSTHANOREQ    reduce using rule 57 (literal -> INTCONST .)
    GREATERTHANOREQ reduce using rule 57 (literal -> INTCONST .)
    SEMICOLON       reduce using rule 57 (literal -> INTCONST .)
    COMMA           reduce using rule 57 (literal -> INTCONST .)


state 93

    (58) literal -> FLOATCONST .

    PERIOD          reduce using rule 58 (literal -> FLOATCONST .)
    RPAREN          reduce using rule 58 (literal -> FLOATCONST .)
    PLUS            reduce using rule 58 (literal -> FLOATCONST .)
    MINUS           reduce using rule 58 (literal -> FLOATCONST .)
    TIMES           reduce using rule 58 (literal -> FLOATCONST .)
    DIVIDE          reduce using rule 58 (literal -> FLOATCONST .)
    AND             reduce using rule 58 (literal -> FLOATCONST .)
    OR              reduce using rule 58 (literal -> FLOATCONST .)
    EQUALSCOMPARE   reduce using rule 58 (literal -> FLOATCONST .)
    NOTEQUALS       reduce using rule 58 (literal -> FLOATCONST .)
    LESSTHAN        reduce using rule 58 (literal -> FLOATCONST .)
    GREATERTHAN     reduce using rule 58 (literal -> FLOATCONST .)
    LESSTHANOREQ    reduce using rule 58 (literal -> FLOATCONST .)
    GREATERTHANOREQ reduce using rule 58 (literal -> FLOATCONST .)
    SEMICOLON       reduce using rule 58 (literal -> FLOATCONST .)
    COMMA           reduce using rule 58 (literal -> FLOATCONST .)


state 94

    (59) literal -> STRINGCONST .

    PERIOD          reduce using rule 59 (literal -> STRINGCONST .)
    RPAREN          reduce using rule 59 (literal -> STRINGCONST .)
    PLUS            reduce using rule 59 (literal -> STRINGCONST .)
    MINUS           reduce using rule 59 (literal -> STRINGCONST .)
    TIMES           reduce using rule 59 (literal -> STRINGCONST .)
    DIVIDE          reduce using rule 59 (literal -> STRINGCONST .)
    AND             reduce using rule 59 (literal -> STRINGCONST .)
    OR              reduce using rule 59 (literal -> STRINGCONST .)
    EQUALSCOMPARE   reduce using rule 59 (literal -> STRINGCONST .)
    NOTEQUALS       reduce using rule 59 (literal -> STRINGCONST .)
    LESSTHAN        reduce using rule 59 (literal -> STRINGCONST .)
    GREATERTHAN     reduce using rule 59 (literal -> STRINGCONST .)
    LESSTHANOREQ    reduce using rule 59 (literal -> STRINGCONST .)
    GREATERTHANOREQ reduce using rule 59 (literal -> STRINGCONST .)
    SEMICOLON       reduce using rule 59 (literal -> STRINGCONST .)
    COMMA           reduce using rule 59 (literal -> STRINGCONST .)


state 95

    (60) literal -> NULL .

    PERIOD          reduce using rule 60 (literal -> NULL .)
    RPAREN          reduce using rule 60 (literal -> NULL .)
    PLUS            reduce using rule 60 (literal -> NULL .)
    MINUS           reduce using rule 60 (literal -> NULL .)
    TIMES           reduce using rule 60 (literal -> NULL .)
    DIVIDE          reduce using rule 60 (literal -> NULL .)
    AND             reduce using rule 60 (literal -> NULL .)
    OR              reduce using rule 60 (literal -> NULL .)
    EQUALSCOMPARE   reduce using rule 60 (literal -> NULL .)
    NOTEQUALS       reduce using rule 60 (literal -> NULL .)
    LESSTHAN        reduce using rule 60 (literal -> NULL .)
    GREATERTHAN     reduce using rule 60 (literal -> NULL .)
    LESSTHANOREQ    reduce using rule 60 (literal -> NULL .)
    GREATERTHANOREQ reduce using rule 60 (literal -> NULL .)
    SEMICOLON       reduce using rule 60 (literal -> NULL .)
    COMMA           reduce using rule 60 (literal -> NULL .)


state 96

    (61) literal -> TRUE .

    PERIOD          reduce using rule 61 (literal -> TRUE .)
    RPAREN          reduce using rule 61 (literal -> TRUE .)
    PLUS            reduce using rule 61 (literal -> TRUE .)
    MINUS           reduce using rule 61 (literal -> TRUE .)
    TIMES           reduce using rule 61 (literal -> TRUE .)
    DIVIDE          reduce using rule 61 (literal -> TRUE .)
    AND             reduce using rule 61 (literal -> TRUE .)
    OR              reduce using rule 61 (literal -> TRUE .)
    EQUALSCOMPARE   reduce using rule 61 (literal -> TRUE .)
    NOTEQUALS       reduce using rule 61 (literal -> TRUE .)
    LESSTHAN        reduce using rule 61 (literal -> TRUE .)
    GREATERTHAN     reduce using rule 61 (literal -> TRUE .)
    LESSTHANOREQ    reduce using rule 61 (literal -> TRUE .)
    GREATERTHANOREQ reduce using rule 61 (literal -> TRUE .)
    SEMICOLON       reduce using rule 61 (literal -> TRUE .)
    COMMA           reduce using rule 61 (literal -> TRUE .)


state 97

    (62) literal -> FALSE .

    PERIOD          reduce using rule 62 (literal -> FALSE .)
    RPAREN          reduce using rule 62 (literal -> FALSE .)
    PLUS            reduce using rule 62 (literal -> FALSE .)
    MINUS           reduce using rule 62 (literal -> FALSE .)
    TIMES           reduce using rule 62 (literal -> FALSE .)
    DIVIDE          reduce using rule 62 (literal -> FALSE .)
    AND             reduce using rule 62 (literal -> FALSE .)
    OR              reduce using rule 62 (literal -> FALSE .)
    EQUALSCOMPARE   reduce using rule 62 (literal -> FALSE .)
    NOTEQUALS       reduce using rule 62 (literal -> FALSE .)
    LESSTHAN        reduce using rule 62 (literal -> FALSE .)
    GREATERTHAN     reduce using rule 62 (literal -> FALSE .)
    LESSTHANOREQ    reduce using rule 62 (literal -> FALSE .)
    GREATERTHANOREQ reduce using rule 62 (literal -> FALSE .)
    SEMICOLON       reduce using rule 62 (literal -> FALSE .)
    COMMA           reduce using rule 62 (literal -> FALSE .)


state 98

    (36) constructor_decl -> modifier ID LPAREN formals RPAREN block .

    PUBLIC          reduce using rule 36 (constructor_decl -> modifier ID LPAREN formals RPAREN block .)
    PRIVATE         reduce using rule 36 (constructor_decl -> modifier ID LPAREN formals RPAREN block .)
    STATIC          reduce using rule 36 (constructor_decl -> modifier ID LPAREN formals RPAREN block .)
    VOID            reduce using rule 36 (constructor_decl -> modifier ID LPAREN formals RPAREN block .)
    ID              reduce using rule 36 (constructor_decl -> modifier ID LPAREN formals RPAREN block .)
    INT             reduce using rule 36 (constructor_decl -> modifier ID LPAREN formals RPAREN block .)
    FLOAT           reduce using rule 36 (constructor_decl -> modifier ID LPAREN formals RPAREN block .)
    BOOLEAN         reduce using rule 36 (constructor_decl -> modifier ID LPAREN formals RPAREN block .)
    RBRACE          reduce using rule 36 (constructor_decl -> modifier ID LPAREN formals RPAREN block .)


state 99

    (37) formals -> formals COMMA formal_param .

    RPAREN          reduce using rule 37 (formals -> formals COMMA formal_param .)
    COMMA           reduce using rule 37 (formals -> formals COMMA formal_param .)


state 100

    (32) method_decl -> modifier VOID ID LPAREN RPAREN block .

    PUBLIC          reduce using rule 32 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    PRIVATE         reduce using rule 32 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    STATIC          reduce using rule 32 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    VOID            reduce using rule 32 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    ID              reduce using rule 32 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    INT             reduce using rule 32 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    FLOAT           reduce using rule 32 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    BOOLEAN         reduce using rule 32 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    RBRACE          reduce using rule 32 (method_decl -> modifier VOID ID LPAREN RPAREN block .)


state 101

    (34) method_decl -> modifier VOID ID LPAREN formals RPAREN . block
    (41) block -> . LBRACE block_end RBRACE

    LBRACE          shift and go to state 57

    block                          shift and go to state 133

state 102

    (33) method_decl -> modifier type ID LPAREN formals RPAREN block .

    PUBLIC          reduce using rule 33 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    PRIVATE         reduce using rule 33 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    STATIC          reduce using rule 33 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    VOID            reduce using rule 33 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    ID              reduce using rule 33 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    INT             reduce using rule 33 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    FLOAT           reduce using rule 33 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    BOOLEAN         reduce using rule 33 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    RBRACE          reduce using rule 33 (method_decl -> modifier type ID LPAREN formals RPAREN block .)


state 103

    (41) block -> LBRACE block_end RBRACE .

    PUBLIC          reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    PRIVATE         reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    STATIC          reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    VOID            reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    ID              reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    INT             reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    FLOAT           reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    BOOLEAN         reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    RBRACE          reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    IF              reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    WHILE           reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    FOR             reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    RETURN          reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    BREAK           reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    CONTINUE        reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    SEMICOLON       reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    LBRACE          reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    PLUSPLUS        reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    MINUSMINUS      reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    THIS            reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    SUPER           reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    LPAREN          reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    NEW             reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    INTCONST        reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    FLOATCONST      reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    STRINGCONST     reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    NULL            reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    TRUE            reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    FALSE           reduce using rule 41 (block -> LBRACE block_end RBRACE .)
    ELSE            reduce using rule 41 (block -> LBRACE block_end RBRACE .)


state 104

    (43) block_end -> stmt block_end .

    RBRACE          reduce using rule 43 (block_end -> stmt block_end .)


state 105

    (45) stmt -> IF LPAREN . expr RPAREN stmt
    (46) stmt -> IF LPAREN . expr RPAREN stmt ELSE stmt
    (79) expr -> . primary
    (80) expr -> . assign
    (81) expr -> . expr arith_op expr
    (82) expr -> . expr bool_op expr
    (83) expr -> . unary_op expr
    (63) primary -> . literal
    (64) primary -> . THIS
    (65) primary -> . SUPER
    (66) primary -> . LPAREN expr RPAREN
    (67) primary -> . NEW ID LPAREN arguments RPAREN
    (68) primary -> . NEW ID LPAREN RPAREN
    (69) primary -> . lhs
    (70) primary -> . method_invocation
    (84) assign -> . lhs EQUALS expr
    (85) assign -> . lhs PLUSPLUS
    (86) assign -> . PLUSPLUS lhs
    (87) assign -> . lhs MINUSMINUS
    (88) assign -> . MINUSMINUS lhs
    (101) unary_op -> . PLUS
    (102) unary_op -> . MINUS
    (103) unary_op -> . NOT
    (57) literal -> . INTCONST
    (58) literal -> . FLOATCONST
    (59) literal -> . STRINGCONST
    (60) literal -> . NULL
    (61) literal -> . TRUE
    (62) literal -> . FALSE
    (74) lhs -> . field_access
    (77) method_invocation -> . field_access LPAREN RPAREN
    (78) method_invocation -> . field_access LPAREN arguments RPAREN
    (75) field_access -> . primary PERIOD ID
    (76) field_access -> . ID

    THIS            shift and go to state 89
    SUPER           shift and go to state 90
    LPAREN          shift and go to state 69
    NEW             shift and go to state 91
    PLUSPLUS        shift and go to state 83
    MINUSMINUS      shift and go to state 84
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    NOT             shift and go to state 115
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 93
    STRINGCONST     shift and go to state 94
    NULL            shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    ID              shift and go to state 110

    expr                           shift and go to state 134
    primary                        shift and go to state 107
    assign                         shift and go to state 108
    unary_op                       shift and go to state 109
    literal                        shift and go to state 88
    lhs                            shift and go to state 111
    method_invocation              shift and go to state 112
    field_access                   shift and go to state 116

state 106

    (66) primary -> LPAREN expr . RPAREN
    (81) expr -> expr . arith_op expr
    (82) expr -> expr . bool_op expr
    (89) arith_op -> . PLUS
    (90) arith_op -> . MINUS
    (91) arith_op -> . TIMES
    (92) arith_op -> . DIVIDE
    (93) bool_op -> . AND
    (94) bool_op -> . OR
    (95) bool_op -> . EQUALSCOMPARE
    (96) bool_op -> . NOTEQUALS
    (97) bool_op -> . LESSTHAN
    (98) bool_op -> . GREATERTHAN
    (99) bool_op -> . LESSTHANOREQ
    (100) bool_op -> . GREATERTHANOREQ

    RPAREN          shift and go to state 135
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    AND             shift and go to state 142
    OR              shift and go to state 143
    EQUALSCOMPARE   shift and go to state 144
    NOTEQUALS       shift and go to state 145
    LESSTHAN        shift and go to state 146
    GREATERTHAN     shift and go to state 147
    LESSTHANOREQ    shift and go to state 148
    GREATERTHANOREQ shift and go to state 149

    arith_op                       shift and go to state 136
    bool_op                        shift and go to state 137

state 107

    (79) expr -> primary .
    (75) field_access -> primary . PERIOD ID

    RPAREN          reduce using rule 79 (expr -> primary .)
    PLUS            reduce using rule 79 (expr -> primary .)
    MINUS           reduce using rule 79 (expr -> primary .)
    TIMES           reduce using rule 79 (expr -> primary .)
    DIVIDE          reduce using rule 79 (expr -> primary .)
    AND             reduce using rule 79 (expr -> primary .)
    OR              reduce using rule 79 (expr -> primary .)
    EQUALSCOMPARE   reduce using rule 79 (expr -> primary .)
    NOTEQUALS       reduce using rule 79 (expr -> primary .)
    LESSTHAN        reduce using rule 79 (expr -> primary .)
    GREATERTHAN     reduce using rule 79 (expr -> primary .)
    LESSTHANOREQ    reduce using rule 79 (expr -> primary .)
    GREATERTHANOREQ reduce using rule 79 (expr -> primary .)
    SEMICOLON       reduce using rule 79 (expr -> primary .)
    COMMA           reduce using rule 79 (expr -> primary .)
    PERIOD          shift and go to state 131


state 108

    (80) expr -> assign .

    RPAREN          reduce using rule 80 (expr -> assign .)
    PLUS            reduce using rule 80 (expr -> assign .)
    MINUS           reduce using rule 80 (expr -> assign .)
    TIMES           reduce using rule 80 (expr -> assign .)
    DIVIDE          reduce using rule 80 (expr -> assign .)
    AND             reduce using rule 80 (expr -> assign .)
    OR              reduce using rule 80 (expr -> assign .)
    EQUALSCOMPARE   reduce using rule 80 (expr -> assign .)
    NOTEQUALS       reduce using rule 80 (expr -> assign .)
    LESSTHAN        reduce using rule 80 (expr -> assign .)
    GREATERTHAN     reduce using rule 80 (expr -> assign .)
    LESSTHANOREQ    reduce using rule 80 (expr -> assign .)
    GREATERTHANOREQ reduce using rule 80 (expr -> assign .)
    SEMICOLON       reduce using rule 80 (expr -> assign .)
    COMMA           reduce using rule 80 (expr -> assign .)


state 109

    (83) expr -> unary_op . expr
    (79) expr -> . primary
    (80) expr -> . assign
    (81) expr -> . expr arith_op expr
    (82) expr -> . expr bool_op expr
    (83) expr -> . unary_op expr
    (63) primary -> . literal
    (64) primary -> . THIS
    (65) primary -> . SUPER
    (66) primary -> . LPAREN expr RPAREN
    (67) primary -> . NEW ID LPAREN arguments RPAREN
    (68) primary -> . NEW ID LPAREN RPAREN
    (69) primary -> . lhs
    (70) primary -> . method_invocation
    (84) assign -> . lhs EQUALS expr
    (85) assign -> . lhs PLUSPLUS
    (86) assign -> . PLUSPLUS lhs
    (87) assign -> . lhs MINUSMINUS
    (88) assign -> . MINUSMINUS lhs
    (101) unary_op -> . PLUS
    (102) unary_op -> . MINUS
    (103) unary_op -> . NOT
    (57) literal -> . INTCONST
    (58) literal -> . FLOATCONST
    (59) literal -> . STRINGCONST
    (60) literal -> . NULL
    (61) literal -> . TRUE
    (62) literal -> . FALSE
    (74) lhs -> . field_access
    (77) method_invocation -> . field_access LPAREN RPAREN
    (78) method_invocation -> . field_access LPAREN arguments RPAREN
    (75) field_access -> . primary PERIOD ID
    (76) field_access -> . ID

    THIS            shift and go to state 89
    SUPER           shift and go to state 90
    LPAREN          shift and go to state 69
    NEW             shift and go to state 91
    PLUSPLUS        shift and go to state 83
    MINUSMINUS      shift and go to state 84
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    NOT             shift and go to state 115
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 93
    STRINGCONST     shift and go to state 94
    NULL            shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    ID              shift and go to state 110

    unary_op                       shift and go to state 109
    expr                           shift and go to state 150
    primary                        shift and go to state 107
    assign                         shift and go to state 108
    literal                        shift and go to state 88
    lhs                            shift and go to state 111
    method_invocation              shift and go to state 112
    field_access                   shift and go to state 116

state 110

    (76) field_access -> ID .

    LPAREN          reduce using rule 76 (field_access -> ID .)
    EQUALS          reduce using rule 76 (field_access -> ID .)
    PLUSPLUS        reduce using rule 76 (field_access -> ID .)
    MINUSMINUS      reduce using rule 76 (field_access -> ID .)
    PERIOD          reduce using rule 76 (field_access -> ID .)
    RPAREN          reduce using rule 76 (field_access -> ID .)
    PLUS            reduce using rule 76 (field_access -> ID .)
    MINUS           reduce using rule 76 (field_access -> ID .)
    TIMES           reduce using rule 76 (field_access -> ID .)
    DIVIDE          reduce using rule 76 (field_access -> ID .)
    AND             reduce using rule 76 (field_access -> ID .)
    OR              reduce using rule 76 (field_access -> ID .)
    EQUALSCOMPARE   reduce using rule 76 (field_access -> ID .)
    NOTEQUALS       reduce using rule 76 (field_access -> ID .)
    LESSTHAN        reduce using rule 76 (field_access -> ID .)
    GREATERTHAN     reduce using rule 76 (field_access -> ID .)
    LESSTHANOREQ    reduce using rule 76 (field_access -> ID .)
    GREATERTHANOREQ reduce using rule 76 (field_access -> ID .)
    SEMICOLON       reduce using rule 76 (field_access -> ID .)
    COMMA           reduce using rule 76 (field_access -> ID .)


state 111

    (69) primary -> lhs .
    (84) assign -> lhs . EQUALS expr
    (85) assign -> lhs . PLUSPLUS
    (87) assign -> lhs . MINUSMINUS

    PERIOD          reduce using rule 69 (primary -> lhs .)
    RPAREN          reduce using rule 69 (primary -> lhs .)
    PLUS            reduce using rule 69 (primary -> lhs .)
    MINUS           reduce using rule 69 (primary -> lhs .)
    TIMES           reduce using rule 69 (primary -> lhs .)
    DIVIDE          reduce using rule 69 (primary -> lhs .)
    AND             reduce using rule 69 (primary -> lhs .)
    OR              reduce using rule 69 (primary -> lhs .)
    EQUALSCOMPARE   reduce using rule 69 (primary -> lhs .)
    NOTEQUALS       reduce using rule 69 (primary -> lhs .)
    LESSTHAN        reduce using rule 69 (primary -> lhs .)
    GREATERTHAN     reduce using rule 69 (primary -> lhs .)
    LESSTHANOREQ    reduce using rule 69 (primary -> lhs .)
    GREATERTHANOREQ reduce using rule 69 (primary -> lhs .)
    SEMICOLON       reduce using rule 69 (primary -> lhs .)
    COMMA           reduce using rule 69 (primary -> lhs .)
    EQUALS          shift and go to state 125
    PLUSPLUS        shift and go to state 126
    MINUSMINUS      shift and go to state 127


state 112

    (70) primary -> method_invocation .

    PERIOD          reduce using rule 70 (primary -> method_invocation .)
    RPAREN          reduce using rule 70 (primary -> method_invocation .)
    PLUS            reduce using rule 70 (primary -> method_invocation .)
    MINUS           reduce using rule 70 (primary -> method_invocation .)
    TIMES           reduce using rule 70 (primary -> method_invocation .)
    DIVIDE          reduce using rule 70 (primary -> method_invocation .)
    AND             reduce using rule 70 (primary -> method_invocation .)
    OR              reduce using rule 70 (primary -> method_invocation .)
    EQUALSCOMPARE   reduce using rule 70 (primary -> method_invocation .)
    NOTEQUALS       reduce using rule 70 (primary -> method_invocation .)
    LESSTHAN        reduce using rule 70 (primary -> method_invocation .)
    GREATERTHAN     reduce using rule 70 (primary -> method_invocation .)
    LESSTHANOREQ    reduce using rule 70 (primary -> method_invocation .)
    GREATERTHANOREQ reduce using rule 70 (primary -> method_invocation .)
    SEMICOLON       reduce using rule 70 (primary -> method_invocation .)
    COMMA           reduce using rule 70 (primary -> method_invocation .)


state 113

    (101) unary_op -> PLUS .

    THIS            reduce using rule 101 (unary_op -> PLUS .)
    SUPER           reduce using rule 101 (unary_op -> PLUS .)
    LPAREN          reduce using rule 101 (unary_op -> PLUS .)
    NEW             reduce using rule 101 (unary_op -> PLUS .)
    PLUSPLUS        reduce using rule 101 (unary_op -> PLUS .)
    MINUSMINUS      reduce using rule 101 (unary_op -> PLUS .)
    PLUS            reduce using rule 101 (unary_op -> PLUS .)
    MINUS           reduce using rule 101 (unary_op -> PLUS .)
    NOT             reduce using rule 101 (unary_op -> PLUS .)
    INTCONST        reduce using rule 101 (unary_op -> PLUS .)
    FLOATCONST      reduce using rule 101 (unary_op -> PLUS .)
    STRINGCONST     reduce using rule 101 (unary_op -> PLUS .)
    NULL            reduce using rule 101 (unary_op -> PLUS .)
    TRUE            reduce using rule 101 (unary_op -> PLUS .)
    FALSE           reduce using rule 101 (unary_op -> PLUS .)
    ID              reduce using rule 101 (unary_op -> PLUS .)


state 114

    (102) unary_op -> MINUS .

    THIS            reduce using rule 102 (unary_op -> MINUS .)
    SUPER           reduce using rule 102 (unary_op -> MINUS .)
    LPAREN          reduce using rule 102 (unary_op -> MINUS .)
    NEW             reduce using rule 102 (unary_op -> MINUS .)
    PLUSPLUS        reduce using rule 102 (unary_op -> MINUS .)
    MINUSMINUS      reduce using rule 102 (unary_op -> MINUS .)
    PLUS            reduce using rule 102 (unary_op -> MINUS .)
    MINUS           reduce using rule 102 (unary_op -> MINUS .)
    NOT             reduce using rule 102 (unary_op -> MINUS .)
    INTCONST        reduce using rule 102 (unary_op -> MINUS .)
    FLOATCONST      reduce using rule 102 (unary_op -> MINUS .)
    STRINGCONST     reduce using rule 102 (unary_op -> MINUS .)
    NULL            reduce using rule 102 (unary_op -> MINUS .)
    TRUE            reduce using rule 102 (unary_op -> MINUS .)
    FALSE           reduce using rule 102 (unary_op -> MINUS .)
    ID              reduce using rule 102 (unary_op -> MINUS .)


state 115

    (103) unary_op -> NOT .

    THIS            reduce using rule 103 (unary_op -> NOT .)
    SUPER           reduce using rule 103 (unary_op -> NOT .)
    LPAREN          reduce using rule 103 (unary_op -> NOT .)
    NEW             reduce using rule 103 (unary_op -> NOT .)
    PLUSPLUS        reduce using rule 103 (unary_op -> NOT .)
    MINUSMINUS      reduce using rule 103 (unary_op -> NOT .)
    PLUS            reduce using rule 103 (unary_op -> NOT .)
    MINUS           reduce using rule 103 (unary_op -> NOT .)
    NOT             reduce using rule 103 (unary_op -> NOT .)
    INTCONST        reduce using rule 103 (unary_op -> NOT .)
    FLOATCONST      reduce using rule 103 (unary_op -> NOT .)
    STRINGCONST     reduce using rule 103 (unary_op -> NOT .)
    NULL            reduce using rule 103 (unary_op -> NOT .)
    TRUE            reduce using rule 103 (unary_op -> NOT .)
    FALSE           reduce using rule 103 (unary_op -> NOT .)
    ID              reduce using rule 103 (unary_op -> NOT .)


state 116

    (74) lhs -> field_access .
    (77) method_invocation -> field_access . LPAREN RPAREN
    (78) method_invocation -> field_access . LPAREN arguments RPAREN

    EQUALS          reduce using rule 74 (lhs -> field_access .)
    PLUSPLUS        reduce using rule 74 (lhs -> field_access .)
    MINUSMINUS      reduce using rule 74 (lhs -> field_access .)
    PERIOD          reduce using rule 74 (lhs -> field_access .)
    RPAREN          reduce using rule 74 (lhs -> field_access .)
    PLUS            reduce using rule 74 (lhs -> field_access .)
    MINUS           reduce using rule 74 (lhs -> field_access .)
    TIMES           reduce using rule 74 (lhs -> field_access .)
    DIVIDE          reduce using rule 74 (lhs -> field_access .)
    AND             reduce using rule 74 (lhs -> field_access .)
    OR              reduce using rule 74 (lhs -> field_access .)
    EQUALSCOMPARE   reduce using rule 74 (lhs -> field_access .)
    NOTEQUALS       reduce using rule 74 (lhs -> field_access .)
    LESSTHAN        reduce using rule 74 (lhs -> field_access .)
    GREATERTHAN     reduce using rule 74 (lhs -> field_access .)
    LESSTHANOREQ    reduce using rule 74 (lhs -> field_access .)
    GREATERTHANOREQ reduce using rule 74 (lhs -> field_access .)
    SEMICOLON       reduce using rule 74 (lhs -> field_access .)
    COMMA           reduce using rule 74 (lhs -> field_access .)
    LPAREN          shift and go to state 130


state 117

    (47) stmt -> WHILE LPAREN . expr RPAREN stmt
    (79) expr -> . primary
    (80) expr -> . assign
    (81) expr -> . expr arith_op expr
    (82) expr -> . expr bool_op expr
    (83) expr -> . unary_op expr
    (63) primary -> . literal
    (64) primary -> . THIS
    (65) primary -> . SUPER
    (66) primary -> . LPAREN expr RPAREN
    (67) primary -> . NEW ID LPAREN arguments RPAREN
    (68) primary -> . NEW ID LPAREN RPAREN
    (69) primary -> . lhs
    (70) primary -> . method_invocation
    (84) assign -> . lhs EQUALS expr
    (85) assign -> . lhs PLUSPLUS
    (86) assign -> . PLUSPLUS lhs
    (87) assign -> . lhs MINUSMINUS
    (88) assign -> . MINUSMINUS lhs
    (101) unary_op -> . PLUS
    (102) unary_op -> . MINUS
    (103) unary_op -> . NOT
    (57) literal -> . INTCONST
    (58) literal -> . FLOATCONST
    (59) literal -> . STRINGCONST
    (60) literal -> . NULL
    (61) literal -> . TRUE
    (62) literal -> . FALSE
    (74) lhs -> . field_access
    (77) method_invocation -> . field_access LPAREN RPAREN
    (78) method_invocation -> . field_access LPAREN arguments RPAREN
    (75) field_access -> . primary PERIOD ID
    (76) field_access -> . ID

    THIS            shift and go to state 89
    SUPER           shift and go to state 90
    LPAREN          shift and go to state 69
    NEW             shift and go to state 91
    PLUSPLUS        shift and go to state 83
    MINUSMINUS      shift and go to state 84
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    NOT             shift and go to state 115
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 93
    STRINGCONST     shift and go to state 94
    NULL            shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    ID              shift and go to state 110

    expr                           shift and go to state 151
    primary                        shift and go to state 107
    assign                         shift and go to state 108
    unary_op                       shift and go to state 109
    literal                        shift and go to state 88
    lhs                            shift and go to state 111
    method_invocation              shift and go to state 112
    field_access                   shift and go to state 116

state 118

    (48) stmt -> FOR LPAREN . stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (104) stmt_expr -> . assign
    (105) stmt_expr -> . method_invocation
    (84) assign -> . lhs EQUALS expr
    (85) assign -> . lhs PLUSPLUS
    (86) assign -> . PLUSPLUS lhs
    (87) assign -> . lhs MINUSMINUS
    (88) assign -> . MINUSMINUS lhs
    (77) method_invocation -> . field_access LPAREN RPAREN
    (78) method_invocation -> . field_access LPAREN arguments RPAREN
    (74) lhs -> . field_access
    (75) field_access -> . primary PERIOD ID
    (76) field_access -> . ID
    (63) primary -> . literal
    (64) primary -> . THIS
    (65) primary -> . SUPER
    (66) primary -> . LPAREN expr RPAREN
    (67) primary -> . NEW ID LPAREN arguments RPAREN
    (68) primary -> . NEW ID LPAREN RPAREN
    (69) primary -> . lhs
    (70) primary -> . method_invocation
    (57) literal -> . INTCONST
    (58) literal -> . FLOATCONST
    (59) literal -> . STRINGCONST
    (60) literal -> . NULL
    (61) literal -> . TRUE
    (62) literal -> . FALSE

    PLUSPLUS        shift and go to state 83
    MINUSMINUS      shift and go to state 84
    ID              shift and go to state 110
    THIS            shift and go to state 89
    SUPER           shift and go to state 90
    LPAREN          shift and go to state 69
    NEW             shift and go to state 91
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 93
    STRINGCONST     shift and go to state 94
    NULL            shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97

    stmt_expr                      shift and go to state 152
    assign                         shift and go to state 79
    method_invocation              shift and go to state 80
    lhs                            shift and go to state 82
    field_access                   shift and go to state 85
    primary                        shift and go to state 87
    literal                        shift and go to state 88

state 119

    (51) stmt -> stmt_expr SEMICOLON .

    IF              reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    WHILE           reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    FOR             reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    RETURN          reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    BREAK           reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    CONTINUE        reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    SEMICOLON       reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    LBRACE          reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    PLUSPLUS        reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    MINUSMINUS      reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    INT             reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    FLOAT           reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    BOOLEAN         reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    VOID            reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    ID              reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    THIS            reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    SUPER           reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    LPAREN          reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    NEW             reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    INTCONST        reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    FLOATCONST      reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    STRINGCONST     reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    NULL            reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    TRUE            reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    FALSE           reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    RBRACE          reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)
    ELSE            reduce using rule 51 (stmt -> stmt_expr SEMICOLON .)


state 120

    (49) stmt -> RETURN SEMICOLON .

    IF              reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    WHILE           reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    FOR             reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    RETURN          reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    BREAK           reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    PLUSPLUS        reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    MINUSMINUS      reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    INT             reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    BOOLEAN         reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    VOID            reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    ID              reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    THIS            reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    SUPER           reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    NEW             reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    INTCONST        reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    FLOATCONST      reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    STRINGCONST     reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    NULL            reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    TRUE            reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    FALSE           reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 49 (stmt -> RETURN SEMICOLON .)
    ELSE            reduce using rule 49 (stmt -> RETURN SEMICOLON .)


state 121

    (50) stmt -> RETURN expr . SEMICOLON
    (81) expr -> expr . arith_op expr
    (82) expr -> expr . bool_op expr
    (89) arith_op -> . PLUS
    (90) arith_op -> . MINUS
    (91) arith_op -> . TIMES
    (92) arith_op -> . DIVIDE
    (93) bool_op -> . AND
    (94) bool_op -> . OR
    (95) bool_op -> . EQUALSCOMPARE
    (96) bool_op -> . NOTEQUALS
    (97) bool_op -> . LESSTHAN
    (98) bool_op -> . GREATERTHAN
    (99) bool_op -> . LESSTHANOREQ
    (100) bool_op -> . GREATERTHANOREQ

    SEMICOLON       shift and go to state 153
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    AND             shift and go to state 142
    OR              shift and go to state 143
    EQUALSCOMPARE   shift and go to state 144
    NOTEQUALS       shift and go to state 145
    LESSTHAN        shift and go to state 146
    GREATERTHAN     shift and go to state 147
    LESSTHANOREQ    shift and go to state 148
    GREATERTHANOREQ shift and go to state 149

    arith_op                       shift and go to state 136
    bool_op                        shift and go to state 137

state 122

    (52) stmt -> BREAK SEMICOLON .

    IF              reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    WHILE           reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    FOR             reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    RETURN          reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    BREAK           reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    PLUSPLUS        reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    MINUSMINUS      reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    INT             reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    BOOLEAN         reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    VOID            reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    ID              reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    THIS            reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    SUPER           reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    NEW             reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    INTCONST        reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    FLOATCONST      reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    STRINGCONST     reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    NULL            reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    TRUE            reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    FALSE           reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 52 (stmt -> BREAK SEMICOLON .)
    ELSE            reduce using rule 52 (stmt -> BREAK SEMICOLON .)


state 123

    (53) stmt -> CONTINUE SEMICOLON .

    IF              reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    LBRACE          reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    PLUSPLUS        reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    MINUSMINUS      reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    INT             reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    BOOLEAN         reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    ID              reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    THIS            reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    SUPER           reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    NEW             reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    INTCONST        reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    FLOATCONST      reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    STRINGCONST     reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    NULL            reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    RBRACE          reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 53 (stmt -> CONTINUE SEMICOLON .)


state 124

    (55) stmt -> var_decl SEMICOLON .

    IF              reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    WHILE           reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    FOR             reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    RETURN          reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    BREAK           reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    CONTINUE        reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    SEMICOLON       reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    LBRACE          reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    PLUSPLUS        reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    MINUSMINUS      reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    INT             reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    FLOAT           reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    BOOLEAN         reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    VOID            reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    ID              reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    THIS            reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    SUPER           reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    LPAREN          reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    NEW             reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    INTCONST        reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    FLOATCONST      reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    STRINGCONST     reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    NULL            reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    TRUE            reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    FALSE           reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    RBRACE          reduce using rule 55 (stmt -> var_decl SEMICOLON .)
    ELSE            reduce using rule 55 (stmt -> var_decl SEMICOLON .)


state 125

    (84) assign -> lhs EQUALS . expr
    (79) expr -> . primary
    (80) expr -> . assign
    (81) expr -> . expr arith_op expr
    (82) expr -> . expr bool_op expr
    (83) expr -> . unary_op expr
    (63) primary -> . literal
    (64) primary -> . THIS
    (65) primary -> . SUPER
    (66) primary -> . LPAREN expr RPAREN
    (67) primary -> . NEW ID LPAREN arguments RPAREN
    (68) primary -> . NEW ID LPAREN RPAREN
    (69) primary -> . lhs
    (70) primary -> . method_invocation
    (84) assign -> . lhs EQUALS expr
    (85) assign -> . lhs PLUSPLUS
    (86) assign -> . PLUSPLUS lhs
    (87) assign -> . lhs MINUSMINUS
    (88) assign -> . MINUSMINUS lhs
    (101) unary_op -> . PLUS
    (102) unary_op -> . MINUS
    (103) unary_op -> . NOT
    (57) literal -> . INTCONST
    (58) literal -> . FLOATCONST
    (59) literal -> . STRINGCONST
    (60) literal -> . NULL
    (61) literal -> . TRUE
    (62) literal -> . FALSE
    (74) lhs -> . field_access
    (77) method_invocation -> . field_access LPAREN RPAREN
    (78) method_invocation -> . field_access LPAREN arguments RPAREN
    (75) field_access -> . primary PERIOD ID
    (76) field_access -> . ID

    THIS            shift and go to state 89
    SUPER           shift and go to state 90
    LPAREN          shift and go to state 69
    NEW             shift and go to state 91
    PLUSPLUS        shift and go to state 83
    MINUSMINUS      shift and go to state 84
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    NOT             shift and go to state 115
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 93
    STRINGCONST     shift and go to state 94
    NULL            shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    ID              shift and go to state 110

    lhs                            shift and go to state 111
    expr                           shift and go to state 154
    primary                        shift and go to state 107
    assign                         shift and go to state 108
    unary_op                       shift and go to state 109
    literal                        shift and go to state 88
    method_invocation              shift and go to state 112
    field_access                   shift and go to state 116

state 126

    (85) assign -> lhs PLUSPLUS .

    SEMICOLON       reduce using rule 85 (assign -> lhs PLUSPLUS .)
    RPAREN          reduce using rule 85 (assign -> lhs PLUSPLUS .)
    PLUS            reduce using rule 85 (assign -> lhs PLUSPLUS .)
    MINUS           reduce using rule 85 (assign -> lhs PLUSPLUS .)
    TIMES           reduce using rule 85 (assign -> lhs PLUSPLUS .)
    DIVIDE          reduce using rule 85 (assign -> lhs PLUSPLUS .)
    AND             reduce using rule 85 (assign -> lhs PLUSPLUS .)
    OR              reduce using rule 85 (assign -> lhs PLUSPLUS .)
    EQUALSCOMPARE   reduce using rule 85 (assign -> lhs PLUSPLUS .)
    NOTEQUALS       reduce using rule 85 (assign -> lhs PLUSPLUS .)
    LESSTHAN        reduce using rule 85 (assign -> lhs PLUSPLUS .)
    GREATERTHAN     reduce using rule 85 (assign -> lhs PLUSPLUS .)
    LESSTHANOREQ    reduce using rule 85 (assign -> lhs PLUSPLUS .)
    GREATERTHANOREQ reduce using rule 85 (assign -> lhs PLUSPLUS .)
    COMMA           reduce using rule 85 (assign -> lhs PLUSPLUS .)


state 127

    (87) assign -> lhs MINUSMINUS .

    SEMICOLON       reduce using rule 87 (assign -> lhs MINUSMINUS .)
    RPAREN          reduce using rule 87 (assign -> lhs MINUSMINUS .)
    PLUS            reduce using rule 87 (assign -> lhs MINUSMINUS .)
    MINUS           reduce using rule 87 (assign -> lhs MINUSMINUS .)
    TIMES           reduce using rule 87 (assign -> lhs MINUSMINUS .)
    DIVIDE          reduce using rule 87 (assign -> lhs MINUSMINUS .)
    AND             reduce using rule 87 (assign -> lhs MINUSMINUS .)
    OR              reduce using rule 87 (assign -> lhs MINUSMINUS .)
    EQUALSCOMPARE   reduce using rule 87 (assign -> lhs MINUSMINUS .)
    NOTEQUALS       reduce using rule 87 (assign -> lhs MINUSMINUS .)
    LESSTHAN        reduce using rule 87 (assign -> lhs MINUSMINUS .)
    GREATERTHAN     reduce using rule 87 (assign -> lhs MINUSMINUS .)
    LESSTHANOREQ    reduce using rule 87 (assign -> lhs MINUSMINUS .)
    GREATERTHANOREQ reduce using rule 87 (assign -> lhs MINUSMINUS .)
    COMMA           reduce using rule 87 (assign -> lhs MINUSMINUS .)


state 128

    (86) assign -> PLUSPLUS lhs .
    (69) primary -> lhs .

    SEMICOLON       reduce using rule 86 (assign -> PLUSPLUS lhs .)
    RPAREN          reduce using rule 86 (assign -> PLUSPLUS lhs .)
    PLUS            reduce using rule 86 (assign -> PLUSPLUS lhs .)
    MINUS           reduce using rule 86 (assign -> PLUSPLUS lhs .)
    TIMES           reduce using rule 86 (assign -> PLUSPLUS lhs .)
    DIVIDE          reduce using rule 86 (assign -> PLUSPLUS lhs .)
    AND             reduce using rule 86 (assign -> PLUSPLUS lhs .)
    OR              reduce using rule 86 (assign -> PLUSPLUS lhs .)
    EQUALSCOMPARE   reduce using rule 86 (assign -> PLUSPLUS lhs .)
    NOTEQUALS       reduce using rule 86 (assign -> PLUSPLUS lhs .)
    LESSTHAN        reduce using rule 86 (assign -> PLUSPLUS lhs .)
    GREATERTHAN     reduce using rule 86 (assign -> PLUSPLUS lhs .)
    LESSTHANOREQ    reduce using rule 86 (assign -> PLUSPLUS lhs .)
    GREATERTHANOREQ reduce using rule 86 (assign -> PLUSPLUS lhs .)
    COMMA           reduce using rule 86 (assign -> PLUSPLUS lhs .)
    PERIOD          reduce using rule 69 (primary -> lhs .)


state 129

    (88) assign -> MINUSMINUS lhs .
    (69) primary -> lhs .

    SEMICOLON       reduce using rule 88 (assign -> MINUSMINUS lhs .)
    RPAREN          reduce using rule 88 (assign -> MINUSMINUS lhs .)
    PLUS            reduce using rule 88 (assign -> MINUSMINUS lhs .)
    MINUS           reduce using rule 88 (assign -> MINUSMINUS lhs .)
    TIMES           reduce using rule 88 (assign -> MINUSMINUS lhs .)
    DIVIDE          reduce using rule 88 (assign -> MINUSMINUS lhs .)
    AND             reduce using rule 88 (assign -> MINUSMINUS lhs .)
    OR              reduce using rule 88 (assign -> MINUSMINUS lhs .)
    EQUALSCOMPARE   reduce using rule 88 (assign -> MINUSMINUS lhs .)
    NOTEQUALS       reduce using rule 88 (assign -> MINUSMINUS lhs .)
    LESSTHAN        reduce using rule 88 (assign -> MINUSMINUS lhs .)
    GREATERTHAN     reduce using rule 88 (assign -> MINUSMINUS lhs .)
    LESSTHANOREQ    reduce using rule 88 (assign -> MINUSMINUS lhs .)
    GREATERTHANOREQ reduce using rule 88 (assign -> MINUSMINUS lhs .)
    COMMA           reduce using rule 88 (assign -> MINUSMINUS lhs .)
    PERIOD          reduce using rule 69 (primary -> lhs .)


state 130

    (77) method_invocation -> field_access LPAREN . RPAREN
    (78) method_invocation -> field_access LPAREN . arguments RPAREN
    (71) arguments -> . expr
    (72) arguments -> . arguments COMMA expr
    (73) arguments -> . empty
    (79) expr -> . primary
    (80) expr -> . assign
    (81) expr -> . expr arith_op expr
    (82) expr -> . expr bool_op expr
    (83) expr -> . unary_op expr
    (1) empty -> .
    (63) primary -> . literal
    (64) primary -> . THIS
    (65) primary -> . SUPER
    (66) primary -> . LPAREN expr RPAREN
    (67) primary -> . NEW ID LPAREN arguments RPAREN
    (68) primary -> . NEW ID LPAREN RPAREN
    (69) primary -> . lhs
    (70) primary -> . method_invocation
    (84) assign -> . lhs EQUALS expr
    (85) assign -> . lhs PLUSPLUS
    (86) assign -> . PLUSPLUS lhs
    (87) assign -> . lhs MINUSMINUS
    (88) assign -> . MINUSMINUS lhs
    (101) unary_op -> . PLUS
    (102) unary_op -> . MINUS
    (103) unary_op -> . NOT
    (57) literal -> . INTCONST
    (58) literal -> . FLOATCONST
    (59) literal -> . STRINGCONST
    (60) literal -> . NULL
    (61) literal -> . TRUE
    (62) literal -> . FALSE
    (74) lhs -> . field_access
    (77) method_invocation -> . field_access LPAREN RPAREN
    (78) method_invocation -> . field_access LPAREN arguments RPAREN
    (75) field_access -> . primary PERIOD ID
    (76) field_access -> . ID

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 155
    COMMA           reduce using rule 1 (empty -> .)
    THIS            shift and go to state 89
    SUPER           shift and go to state 90
    LPAREN          shift and go to state 69
    NEW             shift and go to state 91
    PLUSPLUS        shift and go to state 83
    MINUSMINUS      shift and go to state 84
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    NOT             shift and go to state 115
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 93
    STRINGCONST     shift and go to state 94
    NULL            shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    ID              shift and go to state 110

  ! RPAREN          [ reduce using rule 1 (empty -> .) ]

    field_access                   shift and go to state 116
    arguments                      shift and go to state 156
    expr                           shift and go to state 157
    empty                          shift and go to state 158
    primary                        shift and go to state 107
    assign                         shift and go to state 108
    unary_op                       shift and go to state 109
    literal                        shift and go to state 88
    lhs                            shift and go to state 111
    method_invocation              shift and go to state 112

state 131

    (75) field_access -> primary PERIOD . ID

    ID              shift and go to state 159


state 132

    (67) primary -> NEW ID . LPAREN arguments RPAREN
    (68) primary -> NEW ID . LPAREN RPAREN

    LPAREN          shift and go to state 160


state 133

    (34) method_decl -> modifier VOID ID LPAREN formals RPAREN block .

    PUBLIC          reduce using rule 34 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    PRIVATE         reduce using rule 34 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    STATIC          reduce using rule 34 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    VOID            reduce using rule 34 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    ID              reduce using rule 34 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    INT             reduce using rule 34 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    FLOAT           reduce using rule 34 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    BOOLEAN         reduce using rule 34 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    RBRACE          reduce using rule 34 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)


state 134

    (45) stmt -> IF LPAREN expr . RPAREN stmt
    (46) stmt -> IF LPAREN expr . RPAREN stmt ELSE stmt
    (81) expr -> expr . arith_op expr
    (82) expr -> expr . bool_op expr
    (89) arith_op -> . PLUS
    (90) arith_op -> . MINUS
    (91) arith_op -> . TIMES
    (92) arith_op -> . DIVIDE
    (93) bool_op -> . AND
    (94) bool_op -> . OR
    (95) bool_op -> . EQUALSCOMPARE
    (96) bool_op -> . NOTEQUALS
    (97) bool_op -> . LESSTHAN
    (98) bool_op -> . GREATERTHAN
    (99) bool_op -> . LESSTHANOREQ
    (100) bool_op -> . GREATERTHANOREQ

    RPAREN          shift and go to state 161
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    AND             shift and go to state 142
    OR              shift and go to state 143
    EQUALSCOMPARE   shift and go to state 144
    NOTEQUALS       shift and go to state 145
    LESSTHAN        shift and go to state 146
    GREATERTHAN     shift and go to state 147
    LESSTHANOREQ    shift and go to state 148
    GREATERTHANOREQ shift and go to state 149

    arith_op                       shift and go to state 136
    bool_op                        shift and go to state 137

state 135

    (66) primary -> LPAREN expr RPAREN .

    PERIOD          reduce using rule 66 (primary -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 66 (primary -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 66 (primary -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 66 (primary -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 66 (primary -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 66 (primary -> LPAREN expr RPAREN .)
    AND             reduce using rule 66 (primary -> LPAREN expr RPAREN .)
    OR              reduce using rule 66 (primary -> LPAREN expr RPAREN .)
    EQUALSCOMPARE   reduce using rule 66 (primary -> LPAREN expr RPAREN .)
    NOTEQUALS       reduce using rule 66 (primary -> LPAREN expr RPAREN .)
    LESSTHAN        reduce using rule 66 (primary -> LPAREN expr RPAREN .)
    GREATERTHAN     reduce using rule 66 (primary -> LPAREN expr RPAREN .)
    LESSTHANOREQ    reduce using rule 66 (primary -> LPAREN expr RPAREN .)
    GREATERTHANOREQ reduce using rule 66 (primary -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 66 (primary -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 66 (primary -> LPAREN expr RPAREN .)


state 136

    (81) expr -> expr arith_op . expr
    (79) expr -> . primary
    (80) expr -> . assign
    (81) expr -> . expr arith_op expr
    (82) expr -> . expr bool_op expr
    (83) expr -> . unary_op expr
    (63) primary -> . literal
    (64) primary -> . THIS
    (65) primary -> . SUPER
    (66) primary -> . LPAREN expr RPAREN
    (67) primary -> . NEW ID LPAREN arguments RPAREN
    (68) primary -> . NEW ID LPAREN RPAREN
    (69) primary -> . lhs
    (70) primary -> . method_invocation
    (84) assign -> . lhs EQUALS expr
    (85) assign -> . lhs PLUSPLUS
    (86) assign -> . PLUSPLUS lhs
    (87) assign -> . lhs MINUSMINUS
    (88) assign -> . MINUSMINUS lhs
    (101) unary_op -> . PLUS
    (102) unary_op -> . MINUS
    (103) unary_op -> . NOT
    (57) literal -> . INTCONST
    (58) literal -> . FLOATCONST
    (59) literal -> . STRINGCONST
    (60) literal -> . NULL
    (61) literal -> . TRUE
    (62) literal -> . FALSE
    (74) lhs -> . field_access
    (77) method_invocation -> . field_access LPAREN RPAREN
    (78) method_invocation -> . field_access LPAREN arguments RPAREN
    (75) field_access -> . primary PERIOD ID
    (76) field_access -> . ID

    THIS            shift and go to state 89
    SUPER           shift and go to state 90
    LPAREN          shift and go to state 69
    NEW             shift and go to state 91
    PLUSPLUS        shift and go to state 83
    MINUSMINUS      shift and go to state 84
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    NOT             shift and go to state 115
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 93
    STRINGCONST     shift and go to state 94
    NULL            shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    ID              shift and go to state 110

    expr                           shift and go to state 162
    primary                        shift and go to state 107
    assign                         shift and go to state 108
    unary_op                       shift and go to state 109
    literal                        shift and go to state 88
    lhs                            shift and go to state 111
    method_invocation              shift and go to state 112
    field_access                   shift and go to state 116

state 137

    (82) expr -> expr bool_op . expr
    (79) expr -> . primary
    (80) expr -> . assign
    (81) expr -> . expr arith_op expr
    (82) expr -> . expr bool_op expr
    (83) expr -> . unary_op expr
    (63) primary -> . literal
    (64) primary -> . THIS
    (65) primary -> . SUPER
    (66) primary -> . LPAREN expr RPAREN
    (67) primary -> . NEW ID LPAREN arguments RPAREN
    (68) primary -> . NEW ID LPAREN RPAREN
    (69) primary -> . lhs
    (70) primary -> . method_invocation
    (84) assign -> . lhs EQUALS expr
    (85) assign -> . lhs PLUSPLUS
    (86) assign -> . PLUSPLUS lhs
    (87) assign -> . lhs MINUSMINUS
    (88) assign -> . MINUSMINUS lhs
    (101) unary_op -> . PLUS
    (102) unary_op -> . MINUS
    (103) unary_op -> . NOT
    (57) literal -> . INTCONST
    (58) literal -> . FLOATCONST
    (59) literal -> . STRINGCONST
    (60) literal -> . NULL
    (61) literal -> . TRUE
    (62) literal -> . FALSE
    (74) lhs -> . field_access
    (77) method_invocation -> . field_access LPAREN RPAREN
    (78) method_invocation -> . field_access LPAREN arguments RPAREN
    (75) field_access -> . primary PERIOD ID
    (76) field_access -> . ID

    THIS            shift and go to state 89
    SUPER           shift and go to state 90
    LPAREN          shift and go to state 69
    NEW             shift and go to state 91
    PLUSPLUS        shift and go to state 83
    MINUSMINUS      shift and go to state 84
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    NOT             shift and go to state 115
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 93
    STRINGCONST     shift and go to state 94
    NULL            shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    ID              shift and go to state 110

    expr                           shift and go to state 163
    primary                        shift and go to state 107
    assign                         shift and go to state 108
    unary_op                       shift and go to state 109
    literal                        shift and go to state 88
    lhs                            shift and go to state 111
    method_invocation              shift and go to state 112
    field_access                   shift and go to state 116

state 138

    (89) arith_op -> PLUS .

    THIS            reduce using rule 89 (arith_op -> PLUS .)
    SUPER           reduce using rule 89 (arith_op -> PLUS .)
    LPAREN          reduce using rule 89 (arith_op -> PLUS .)
    NEW             reduce using rule 89 (arith_op -> PLUS .)
    PLUSPLUS        reduce using rule 89 (arith_op -> PLUS .)
    MINUSMINUS      reduce using rule 89 (arith_op -> PLUS .)
    PLUS            reduce using rule 89 (arith_op -> PLUS .)
    MINUS           reduce using rule 89 (arith_op -> PLUS .)
    NOT             reduce using rule 89 (arith_op -> PLUS .)
    INTCONST        reduce using rule 89 (arith_op -> PLUS .)
    FLOATCONST      reduce using rule 89 (arith_op -> PLUS .)
    STRINGCONST     reduce using rule 89 (arith_op -> PLUS .)
    NULL            reduce using rule 89 (arith_op -> PLUS .)
    TRUE            reduce using rule 89 (arith_op -> PLUS .)
    FALSE           reduce using rule 89 (arith_op -> PLUS .)
    ID              reduce using rule 89 (arith_op -> PLUS .)


state 139

    (90) arith_op -> MINUS .

    THIS            reduce using rule 90 (arith_op -> MINUS .)
    SUPER           reduce using rule 90 (arith_op -> MINUS .)
    LPAREN          reduce using rule 90 (arith_op -> MINUS .)
    NEW             reduce using rule 90 (arith_op -> MINUS .)
    PLUSPLUS        reduce using rule 90 (arith_op -> MINUS .)
    MINUSMINUS      reduce using rule 90 (arith_op -> MINUS .)
    PLUS            reduce using rule 90 (arith_op -> MINUS .)
    MINUS           reduce using rule 90 (arith_op -> MINUS .)
    NOT             reduce using rule 90 (arith_op -> MINUS .)
    INTCONST        reduce using rule 90 (arith_op -> MINUS .)
    FLOATCONST      reduce using rule 90 (arith_op -> MINUS .)
    STRINGCONST     reduce using rule 90 (arith_op -> MINUS .)
    NULL            reduce using rule 90 (arith_op -> MINUS .)
    TRUE            reduce using rule 90 (arith_op -> MINUS .)
    FALSE           reduce using rule 90 (arith_op -> MINUS .)
    ID              reduce using rule 90 (arith_op -> MINUS .)


state 140

    (91) arith_op -> TIMES .

    THIS            reduce using rule 91 (arith_op -> TIMES .)
    SUPER           reduce using rule 91 (arith_op -> TIMES .)
    LPAREN          reduce using rule 91 (arith_op -> TIMES .)
    NEW             reduce using rule 91 (arith_op -> TIMES .)
    PLUSPLUS        reduce using rule 91 (arith_op -> TIMES .)
    MINUSMINUS      reduce using rule 91 (arith_op -> TIMES .)
    PLUS            reduce using rule 91 (arith_op -> TIMES .)
    MINUS           reduce using rule 91 (arith_op -> TIMES .)
    NOT             reduce using rule 91 (arith_op -> TIMES .)
    INTCONST        reduce using rule 91 (arith_op -> TIMES .)
    FLOATCONST      reduce using rule 91 (arith_op -> TIMES .)
    STRINGCONST     reduce using rule 91 (arith_op -> TIMES .)
    NULL            reduce using rule 91 (arith_op -> TIMES .)
    TRUE            reduce using rule 91 (arith_op -> TIMES .)
    FALSE           reduce using rule 91 (arith_op -> TIMES .)
    ID              reduce using rule 91 (arith_op -> TIMES .)


state 141

    (92) arith_op -> DIVIDE .

    THIS            reduce using rule 92 (arith_op -> DIVIDE .)
    SUPER           reduce using rule 92 (arith_op -> DIVIDE .)
    LPAREN          reduce using rule 92 (arith_op -> DIVIDE .)
    NEW             reduce using rule 92 (arith_op -> DIVIDE .)
    PLUSPLUS        reduce using rule 92 (arith_op -> DIVIDE .)
    MINUSMINUS      reduce using rule 92 (arith_op -> DIVIDE .)
    PLUS            reduce using rule 92 (arith_op -> DIVIDE .)
    MINUS           reduce using rule 92 (arith_op -> DIVIDE .)
    NOT             reduce using rule 92 (arith_op -> DIVIDE .)
    INTCONST        reduce using rule 92 (arith_op -> DIVIDE .)
    FLOATCONST      reduce using rule 92 (arith_op -> DIVIDE .)
    STRINGCONST     reduce using rule 92 (arith_op -> DIVIDE .)
    NULL            reduce using rule 92 (arith_op -> DIVIDE .)
    TRUE            reduce using rule 92 (arith_op -> DIVIDE .)
    FALSE           reduce using rule 92 (arith_op -> DIVIDE .)
    ID              reduce using rule 92 (arith_op -> DIVIDE .)


state 142

    (93) bool_op -> AND .

    THIS            reduce using rule 93 (bool_op -> AND .)
    SUPER           reduce using rule 93 (bool_op -> AND .)
    LPAREN          reduce using rule 93 (bool_op -> AND .)
    NEW             reduce using rule 93 (bool_op -> AND .)
    PLUSPLUS        reduce using rule 93 (bool_op -> AND .)
    MINUSMINUS      reduce using rule 93 (bool_op -> AND .)
    PLUS            reduce using rule 93 (bool_op -> AND .)
    MINUS           reduce using rule 93 (bool_op -> AND .)
    NOT             reduce using rule 93 (bool_op -> AND .)
    INTCONST        reduce using rule 93 (bool_op -> AND .)
    FLOATCONST      reduce using rule 93 (bool_op -> AND .)
    STRINGCONST     reduce using rule 93 (bool_op -> AND .)
    NULL            reduce using rule 93 (bool_op -> AND .)
    TRUE            reduce using rule 93 (bool_op -> AND .)
    FALSE           reduce using rule 93 (bool_op -> AND .)
    ID              reduce using rule 93 (bool_op -> AND .)


state 143

    (94) bool_op -> OR .

    THIS            reduce using rule 94 (bool_op -> OR .)
    SUPER           reduce using rule 94 (bool_op -> OR .)
    LPAREN          reduce using rule 94 (bool_op -> OR .)
    NEW             reduce using rule 94 (bool_op -> OR .)
    PLUSPLUS        reduce using rule 94 (bool_op -> OR .)
    MINUSMINUS      reduce using rule 94 (bool_op -> OR .)
    PLUS            reduce using rule 94 (bool_op -> OR .)
    MINUS           reduce using rule 94 (bool_op -> OR .)
    NOT             reduce using rule 94 (bool_op -> OR .)
    INTCONST        reduce using rule 94 (bool_op -> OR .)
    FLOATCONST      reduce using rule 94 (bool_op -> OR .)
    STRINGCONST     reduce using rule 94 (bool_op -> OR .)
    NULL            reduce using rule 94 (bool_op -> OR .)
    TRUE            reduce using rule 94 (bool_op -> OR .)
    FALSE           reduce using rule 94 (bool_op -> OR .)
    ID              reduce using rule 94 (bool_op -> OR .)


state 144

    (95) bool_op -> EQUALSCOMPARE .

    THIS            reduce using rule 95 (bool_op -> EQUALSCOMPARE .)
    SUPER           reduce using rule 95 (bool_op -> EQUALSCOMPARE .)
    LPAREN          reduce using rule 95 (bool_op -> EQUALSCOMPARE .)
    NEW             reduce using rule 95 (bool_op -> EQUALSCOMPARE .)
    PLUSPLUS        reduce using rule 95 (bool_op -> EQUALSCOMPARE .)
    MINUSMINUS      reduce using rule 95 (bool_op -> EQUALSCOMPARE .)
    PLUS            reduce using rule 95 (bool_op -> EQUALSCOMPARE .)
    MINUS           reduce using rule 95 (bool_op -> EQUALSCOMPARE .)
    NOT             reduce using rule 95 (bool_op -> EQUALSCOMPARE .)
    INTCONST        reduce using rule 95 (bool_op -> EQUALSCOMPARE .)
    FLOATCONST      reduce using rule 95 (bool_op -> EQUALSCOMPARE .)
    STRINGCONST     reduce using rule 95 (bool_op -> EQUALSCOMPARE .)
    NULL            reduce using rule 95 (bool_op -> EQUALSCOMPARE .)
    TRUE            reduce using rule 95 (bool_op -> EQUALSCOMPARE .)
    FALSE           reduce using rule 95 (bool_op -> EQUALSCOMPARE .)
    ID              reduce using rule 95 (bool_op -> EQUALSCOMPARE .)


state 145

    (96) bool_op -> NOTEQUALS .

    THIS            reduce using rule 96 (bool_op -> NOTEQUALS .)
    SUPER           reduce using rule 96 (bool_op -> NOTEQUALS .)
    LPAREN          reduce using rule 96 (bool_op -> NOTEQUALS .)
    NEW             reduce using rule 96 (bool_op -> NOTEQUALS .)
    PLUSPLUS        reduce using rule 96 (bool_op -> NOTEQUALS .)
    MINUSMINUS      reduce using rule 96 (bool_op -> NOTEQUALS .)
    PLUS            reduce using rule 96 (bool_op -> NOTEQUALS .)
    MINUS           reduce using rule 96 (bool_op -> NOTEQUALS .)
    NOT             reduce using rule 96 (bool_op -> NOTEQUALS .)
    INTCONST        reduce using rule 96 (bool_op -> NOTEQUALS .)
    FLOATCONST      reduce using rule 96 (bool_op -> NOTEQUALS .)
    STRINGCONST     reduce using rule 96 (bool_op -> NOTEQUALS .)
    NULL            reduce using rule 96 (bool_op -> NOTEQUALS .)
    TRUE            reduce using rule 96 (bool_op -> NOTEQUALS .)
    FALSE           reduce using rule 96 (bool_op -> NOTEQUALS .)
    ID              reduce using rule 96 (bool_op -> NOTEQUALS .)


state 146

    (97) bool_op -> LESSTHAN .

    THIS            reduce using rule 97 (bool_op -> LESSTHAN .)
    SUPER           reduce using rule 97 (bool_op -> LESSTHAN .)
    LPAREN          reduce using rule 97 (bool_op -> LESSTHAN .)
    NEW             reduce using rule 97 (bool_op -> LESSTHAN .)
    PLUSPLUS        reduce using rule 97 (bool_op -> LESSTHAN .)
    MINUSMINUS      reduce using rule 97 (bool_op -> LESSTHAN .)
    PLUS            reduce using rule 97 (bool_op -> LESSTHAN .)
    MINUS           reduce using rule 97 (bool_op -> LESSTHAN .)
    NOT             reduce using rule 97 (bool_op -> LESSTHAN .)
    INTCONST        reduce using rule 97 (bool_op -> LESSTHAN .)
    FLOATCONST      reduce using rule 97 (bool_op -> LESSTHAN .)
    STRINGCONST     reduce using rule 97 (bool_op -> LESSTHAN .)
    NULL            reduce using rule 97 (bool_op -> LESSTHAN .)
    TRUE            reduce using rule 97 (bool_op -> LESSTHAN .)
    FALSE           reduce using rule 97 (bool_op -> LESSTHAN .)
    ID              reduce using rule 97 (bool_op -> LESSTHAN .)


state 147

    (98) bool_op -> GREATERTHAN .

    THIS            reduce using rule 98 (bool_op -> GREATERTHAN .)
    SUPER           reduce using rule 98 (bool_op -> GREATERTHAN .)
    LPAREN          reduce using rule 98 (bool_op -> GREATERTHAN .)
    NEW             reduce using rule 98 (bool_op -> GREATERTHAN .)
    PLUSPLUS        reduce using rule 98 (bool_op -> GREATERTHAN .)
    MINUSMINUS      reduce using rule 98 (bool_op -> GREATERTHAN .)
    PLUS            reduce using rule 98 (bool_op -> GREATERTHAN .)
    MINUS           reduce using rule 98 (bool_op -> GREATERTHAN .)
    NOT             reduce using rule 98 (bool_op -> GREATERTHAN .)
    INTCONST        reduce using rule 98 (bool_op -> GREATERTHAN .)
    FLOATCONST      reduce using rule 98 (bool_op -> GREATERTHAN .)
    STRINGCONST     reduce using rule 98 (bool_op -> GREATERTHAN .)
    NULL            reduce using rule 98 (bool_op -> GREATERTHAN .)
    TRUE            reduce using rule 98 (bool_op -> GREATERTHAN .)
    FALSE           reduce using rule 98 (bool_op -> GREATERTHAN .)
    ID              reduce using rule 98 (bool_op -> GREATERTHAN .)


state 148

    (99) bool_op -> LESSTHANOREQ .

    THIS            reduce using rule 99 (bool_op -> LESSTHANOREQ .)
    SUPER           reduce using rule 99 (bool_op -> LESSTHANOREQ .)
    LPAREN          reduce using rule 99 (bool_op -> LESSTHANOREQ .)
    NEW             reduce using rule 99 (bool_op -> LESSTHANOREQ .)
    PLUSPLUS        reduce using rule 99 (bool_op -> LESSTHANOREQ .)
    MINUSMINUS      reduce using rule 99 (bool_op -> LESSTHANOREQ .)
    PLUS            reduce using rule 99 (bool_op -> LESSTHANOREQ .)
    MINUS           reduce using rule 99 (bool_op -> LESSTHANOREQ .)
    NOT             reduce using rule 99 (bool_op -> LESSTHANOREQ .)
    INTCONST        reduce using rule 99 (bool_op -> LESSTHANOREQ .)
    FLOATCONST      reduce using rule 99 (bool_op -> LESSTHANOREQ .)
    STRINGCONST     reduce using rule 99 (bool_op -> LESSTHANOREQ .)
    NULL            reduce using rule 99 (bool_op -> LESSTHANOREQ .)
    TRUE            reduce using rule 99 (bool_op -> LESSTHANOREQ .)
    FALSE           reduce using rule 99 (bool_op -> LESSTHANOREQ .)
    ID              reduce using rule 99 (bool_op -> LESSTHANOREQ .)


state 149

    (100) bool_op -> GREATERTHANOREQ .

    THIS            reduce using rule 100 (bool_op -> GREATERTHANOREQ .)
    SUPER           reduce using rule 100 (bool_op -> GREATERTHANOREQ .)
    LPAREN          reduce using rule 100 (bool_op -> GREATERTHANOREQ .)
    NEW             reduce using rule 100 (bool_op -> GREATERTHANOREQ .)
    PLUSPLUS        reduce using rule 100 (bool_op -> GREATERTHANOREQ .)
    MINUSMINUS      reduce using rule 100 (bool_op -> GREATERTHANOREQ .)
    PLUS            reduce using rule 100 (bool_op -> GREATERTHANOREQ .)
    MINUS           reduce using rule 100 (bool_op -> GREATERTHANOREQ .)
    NOT             reduce using rule 100 (bool_op -> GREATERTHANOREQ .)
    INTCONST        reduce using rule 100 (bool_op -> GREATERTHANOREQ .)
    FLOATCONST      reduce using rule 100 (bool_op -> GREATERTHANOREQ .)
    STRINGCONST     reduce using rule 100 (bool_op -> GREATERTHANOREQ .)
    NULL            reduce using rule 100 (bool_op -> GREATERTHANOREQ .)
    TRUE            reduce using rule 100 (bool_op -> GREATERTHANOREQ .)
    FALSE           reduce using rule 100 (bool_op -> GREATERTHANOREQ .)
    ID              reduce using rule 100 (bool_op -> GREATERTHANOREQ .)


state 150

    (83) expr -> unary_op expr .
    (81) expr -> expr . arith_op expr
    (82) expr -> expr . bool_op expr
    (89) arith_op -> . PLUS
    (90) arith_op -> . MINUS
    (91) arith_op -> . TIMES
    (92) arith_op -> . DIVIDE
    (93) bool_op -> . AND
    (94) bool_op -> . OR
    (95) bool_op -> . EQUALSCOMPARE
    (96) bool_op -> . NOTEQUALS
    (97) bool_op -> . LESSTHAN
    (98) bool_op -> . GREATERTHAN
    (99) bool_op -> . LESSTHANOREQ
    (100) bool_op -> . GREATERTHANOREQ

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUALSCOMPARE resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANOREQ resolved as shift
  ! shift/reduce conflict for GREATERTHANOREQ resolved as shift
    RPAREN          reduce using rule 83 (expr -> unary_op expr .)
    SEMICOLON       reduce using rule 83 (expr -> unary_op expr .)
    COMMA           reduce using rule 83 (expr -> unary_op expr .)
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    AND             shift and go to state 142
    OR              shift and go to state 143
    EQUALSCOMPARE   shift and go to state 144
    NOTEQUALS       shift and go to state 145
    LESSTHAN        shift and go to state 146
    GREATERTHAN     shift and go to state 147
    LESSTHANOREQ    shift and go to state 148
    GREATERTHANOREQ shift and go to state 149

  ! PLUS            [ reduce using rule 83 (expr -> unary_op expr .) ]
  ! MINUS           [ reduce using rule 83 (expr -> unary_op expr .) ]
  ! TIMES           [ reduce using rule 83 (expr -> unary_op expr .) ]
  ! DIVIDE          [ reduce using rule 83 (expr -> unary_op expr .) ]
  ! AND             [ reduce using rule 83 (expr -> unary_op expr .) ]
  ! OR              [ reduce using rule 83 (expr -> unary_op expr .) ]
  ! EQUALSCOMPARE   [ reduce using rule 83 (expr -> unary_op expr .) ]
  ! NOTEQUALS       [ reduce using rule 83 (expr -> unary_op expr .) ]
  ! LESSTHAN        [ reduce using rule 83 (expr -> unary_op expr .) ]
  ! GREATERTHAN     [ reduce using rule 83 (expr -> unary_op expr .) ]
  ! LESSTHANOREQ    [ reduce using rule 83 (expr -> unary_op expr .) ]
  ! GREATERTHANOREQ [ reduce using rule 83 (expr -> unary_op expr .) ]

    arith_op                       shift and go to state 136
    bool_op                        shift and go to state 137

state 151

    (47) stmt -> WHILE LPAREN expr . RPAREN stmt
    (81) expr -> expr . arith_op expr
    (82) expr -> expr . bool_op expr
    (89) arith_op -> . PLUS
    (90) arith_op -> . MINUS
    (91) arith_op -> . TIMES
    (92) arith_op -> . DIVIDE
    (93) bool_op -> . AND
    (94) bool_op -> . OR
    (95) bool_op -> . EQUALSCOMPARE
    (96) bool_op -> . NOTEQUALS
    (97) bool_op -> . LESSTHAN
    (98) bool_op -> . GREATERTHAN
    (99) bool_op -> . LESSTHANOREQ
    (100) bool_op -> . GREATERTHANOREQ

    RPAREN          shift and go to state 164
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    AND             shift and go to state 142
    OR              shift and go to state 143
    EQUALSCOMPARE   shift and go to state 144
    NOTEQUALS       shift and go to state 145
    LESSTHAN        shift and go to state 146
    GREATERTHAN     shift and go to state 147
    LESSTHANOREQ    shift and go to state 148
    GREATERTHANOREQ shift and go to state 149

    arith_op                       shift and go to state 136
    bool_op                        shift and go to state 137

state 152

    (48) stmt -> FOR LPAREN stmt_expr . SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt

    SEMICOLON       shift and go to state 165


state 153

    (50) stmt -> RETURN expr SEMICOLON .

    IF              reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    BREAK           reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    CONTINUE        reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    SEMICOLON       reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    LBRACE          reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    PLUSPLUS        reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    MINUSMINUS      reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    INT             reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    FLOAT           reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    BOOLEAN         reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    VOID            reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    ID              reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    THIS            reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    SUPER           reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    LPAREN          reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    NEW             reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    INTCONST        reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    FLOATCONST      reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    STRINGCONST     reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    NULL            reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    TRUE            reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    FALSE           reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    RBRACE          reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 50 (stmt -> RETURN expr SEMICOLON .)


state 154

    (84) assign -> lhs EQUALS expr .
    (81) expr -> expr . arith_op expr
    (82) expr -> expr . bool_op expr
    (89) arith_op -> . PLUS
    (90) arith_op -> . MINUS
    (91) arith_op -> . TIMES
    (92) arith_op -> . DIVIDE
    (93) bool_op -> . AND
    (94) bool_op -> . OR
    (95) bool_op -> . EQUALSCOMPARE
    (96) bool_op -> . NOTEQUALS
    (97) bool_op -> . LESSTHAN
    (98) bool_op -> . GREATERTHAN
    (99) bool_op -> . LESSTHANOREQ
    (100) bool_op -> . GREATERTHANOREQ

    SEMICOLON       reduce using rule 84 (assign -> lhs EQUALS expr .)
    RPAREN          reduce using rule 84 (assign -> lhs EQUALS expr .)
    COMMA           reduce using rule 84 (assign -> lhs EQUALS expr .)
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    AND             shift and go to state 142
    OR              shift and go to state 143
    EQUALSCOMPARE   shift and go to state 144
    NOTEQUALS       shift and go to state 145
    LESSTHAN        shift and go to state 146
    GREATERTHAN     shift and go to state 147
    LESSTHANOREQ    shift and go to state 148
    GREATERTHANOREQ shift and go to state 149

  ! PLUS            [ reduce using rule 84 (assign -> lhs EQUALS expr .) ]
  ! MINUS           [ reduce using rule 84 (assign -> lhs EQUALS expr .) ]
  ! TIMES           [ reduce using rule 84 (assign -> lhs EQUALS expr .) ]
  ! DIVIDE          [ reduce using rule 84 (assign -> lhs EQUALS expr .) ]
  ! AND             [ reduce using rule 84 (assign -> lhs EQUALS expr .) ]
  ! OR              [ reduce using rule 84 (assign -> lhs EQUALS expr .) ]
  ! EQUALSCOMPARE   [ reduce using rule 84 (assign -> lhs EQUALS expr .) ]
  ! NOTEQUALS       [ reduce using rule 84 (assign -> lhs EQUALS expr .) ]
  ! LESSTHAN        [ reduce using rule 84 (assign -> lhs EQUALS expr .) ]
  ! GREATERTHAN     [ reduce using rule 84 (assign -> lhs EQUALS expr .) ]
  ! LESSTHANOREQ    [ reduce using rule 84 (assign -> lhs EQUALS expr .) ]
  ! GREATERTHANOREQ [ reduce using rule 84 (assign -> lhs EQUALS expr .) ]

    arith_op                       shift and go to state 136
    bool_op                        shift and go to state 137

state 155

    (77) method_invocation -> field_access LPAREN RPAREN .

    SEMICOLON       reduce using rule 77 (method_invocation -> field_access LPAREN RPAREN .)
    PERIOD          reduce using rule 77 (method_invocation -> field_access LPAREN RPAREN .)
    RPAREN          reduce using rule 77 (method_invocation -> field_access LPAREN RPAREN .)
    PLUS            reduce using rule 77 (method_invocation -> field_access LPAREN RPAREN .)
    MINUS           reduce using rule 77 (method_invocation -> field_access LPAREN RPAREN .)
    TIMES           reduce using rule 77 (method_invocation -> field_access LPAREN RPAREN .)
    DIVIDE          reduce using rule 77 (method_invocation -> field_access LPAREN RPAREN .)
    AND             reduce using rule 77 (method_invocation -> field_access LPAREN RPAREN .)
    OR              reduce using rule 77 (method_invocation -> field_access LPAREN RPAREN .)
    EQUALSCOMPARE   reduce using rule 77 (method_invocation -> field_access LPAREN RPAREN .)
    NOTEQUALS       reduce using rule 77 (method_invocation -> field_access LPAREN RPAREN .)
    LESSTHAN        reduce using rule 77 (method_invocation -> field_access LPAREN RPAREN .)
    GREATERTHAN     reduce using rule 77 (method_invocation -> field_access LPAREN RPAREN .)
    LESSTHANOREQ    reduce using rule 77 (method_invocation -> field_access LPAREN RPAREN .)
    GREATERTHANOREQ reduce using rule 77 (method_invocation -> field_access LPAREN RPAREN .)
    COMMA           reduce using rule 77 (method_invocation -> field_access LPAREN RPAREN .)


state 156

    (78) method_invocation -> field_access LPAREN arguments . RPAREN
    (72) arguments -> arguments . COMMA expr

    RPAREN          shift and go to state 166
    COMMA           shift and go to state 167


state 157

    (71) arguments -> expr .
    (81) expr -> expr . arith_op expr
    (82) expr -> expr . bool_op expr
    (89) arith_op -> . PLUS
    (90) arith_op -> . MINUS
    (91) arith_op -> . TIMES
    (92) arith_op -> . DIVIDE
    (93) bool_op -> . AND
    (94) bool_op -> . OR
    (95) bool_op -> . EQUALSCOMPARE
    (96) bool_op -> . NOTEQUALS
    (97) bool_op -> . LESSTHAN
    (98) bool_op -> . GREATERTHAN
    (99) bool_op -> . LESSTHANOREQ
    (100) bool_op -> . GREATERTHANOREQ

    RPAREN          reduce using rule 71 (arguments -> expr .)
    COMMA           reduce using rule 71 (arguments -> expr .)
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    AND             shift and go to state 142
    OR              shift and go to state 143
    EQUALSCOMPARE   shift and go to state 144
    NOTEQUALS       shift and go to state 145
    LESSTHAN        shift and go to state 146
    GREATERTHAN     shift and go to state 147
    LESSTHANOREQ    shift and go to state 148
    GREATERTHANOREQ shift and go to state 149

    arith_op                       shift and go to state 136
    bool_op                        shift and go to state 137

state 158

    (73) arguments -> empty .

    RPAREN          reduce using rule 73 (arguments -> empty .)
    COMMA           reduce using rule 73 (arguments -> empty .)


state 159

    (75) field_access -> primary PERIOD ID .

    LPAREN          reduce using rule 75 (field_access -> primary PERIOD ID .)
    EQUALS          reduce using rule 75 (field_access -> primary PERIOD ID .)
    PLUSPLUS        reduce using rule 75 (field_access -> primary PERIOD ID .)
    MINUSMINUS      reduce using rule 75 (field_access -> primary PERIOD ID .)
    PERIOD          reduce using rule 75 (field_access -> primary PERIOD ID .)
    RPAREN          reduce using rule 75 (field_access -> primary PERIOD ID .)
    PLUS            reduce using rule 75 (field_access -> primary PERIOD ID .)
    MINUS           reduce using rule 75 (field_access -> primary PERIOD ID .)
    TIMES           reduce using rule 75 (field_access -> primary PERIOD ID .)
    DIVIDE          reduce using rule 75 (field_access -> primary PERIOD ID .)
    AND             reduce using rule 75 (field_access -> primary PERIOD ID .)
    OR              reduce using rule 75 (field_access -> primary PERIOD ID .)
    EQUALSCOMPARE   reduce using rule 75 (field_access -> primary PERIOD ID .)
    NOTEQUALS       reduce using rule 75 (field_access -> primary PERIOD ID .)
    LESSTHAN        reduce using rule 75 (field_access -> primary PERIOD ID .)
    GREATERTHAN     reduce using rule 75 (field_access -> primary PERIOD ID .)
    LESSTHANOREQ    reduce using rule 75 (field_access -> primary PERIOD ID .)
    GREATERTHANOREQ reduce using rule 75 (field_access -> primary PERIOD ID .)
    SEMICOLON       reduce using rule 75 (field_access -> primary PERIOD ID .)
    COMMA           reduce using rule 75 (field_access -> primary PERIOD ID .)


state 160

    (67) primary -> NEW ID LPAREN . arguments RPAREN
    (68) primary -> NEW ID LPAREN . RPAREN
    (71) arguments -> . expr
    (72) arguments -> . arguments COMMA expr
    (73) arguments -> . empty
    (79) expr -> . primary
    (80) expr -> . assign
    (81) expr -> . expr arith_op expr
    (82) expr -> . expr bool_op expr
    (83) expr -> . unary_op expr
    (1) empty -> .
    (63) primary -> . literal
    (64) primary -> . THIS
    (65) primary -> . SUPER
    (66) primary -> . LPAREN expr RPAREN
    (67) primary -> . NEW ID LPAREN arguments RPAREN
    (68) primary -> . NEW ID LPAREN RPAREN
    (69) primary -> . lhs
    (70) primary -> . method_invocation
    (84) assign -> . lhs EQUALS expr
    (85) assign -> . lhs PLUSPLUS
    (86) assign -> . PLUSPLUS lhs
    (87) assign -> . lhs MINUSMINUS
    (88) assign -> . MINUSMINUS lhs
    (101) unary_op -> . PLUS
    (102) unary_op -> . MINUS
    (103) unary_op -> . NOT
    (57) literal -> . INTCONST
    (58) literal -> . FLOATCONST
    (59) literal -> . STRINGCONST
    (60) literal -> . NULL
    (61) literal -> . TRUE
    (62) literal -> . FALSE
    (74) lhs -> . field_access
    (77) method_invocation -> . field_access LPAREN RPAREN
    (78) method_invocation -> . field_access LPAREN arguments RPAREN
    (75) field_access -> . primary PERIOD ID
    (76) field_access -> . ID

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 169
    COMMA           reduce using rule 1 (empty -> .)
    THIS            shift and go to state 89
    SUPER           shift and go to state 90
    LPAREN          shift and go to state 69
    NEW             shift and go to state 91
    PLUSPLUS        shift and go to state 83
    MINUSMINUS      shift and go to state 84
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    NOT             shift and go to state 115
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 93
    STRINGCONST     shift and go to state 94
    NULL            shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    ID              shift and go to state 110

  ! RPAREN          [ reduce using rule 1 (empty -> .) ]

    arguments                      shift and go to state 168
    expr                           shift and go to state 157
    empty                          shift and go to state 158
    primary                        shift and go to state 107
    assign                         shift and go to state 108
    unary_op                       shift and go to state 109
    literal                        shift and go to state 88
    lhs                            shift and go to state 111
    method_invocation              shift and go to state 112
    field_access                   shift and go to state 116

state 161

    (45) stmt -> IF LPAREN expr RPAREN . stmt
    (46) stmt -> IF LPAREN expr RPAREN . stmt ELSE stmt
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (47) stmt -> . WHILE LPAREN expr RPAREN stmt
    (48) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (49) stmt -> . RETURN SEMICOLON
    (50) stmt -> . RETURN expr SEMICOLON
    (51) stmt -> . stmt_expr SEMICOLON
    (52) stmt -> . BREAK SEMICOLON
    (53) stmt -> . CONTINUE SEMICOLON
    (54) stmt -> . block
    (55) stmt -> . var_decl SEMICOLON
    (56) stmt -> . SEMICOLON
    (104) stmt_expr -> . assign
    (105) stmt_expr -> . method_invocation
    (41) block -> . LBRACE block_end RBRACE
    (21) var_decl -> . type variables
    (84) assign -> . lhs EQUALS expr
    (85) assign -> . lhs PLUSPLUS
    (86) assign -> . PLUSPLUS lhs
    (87) assign -> . lhs MINUSMINUS
    (88) assign -> . MINUSMINUS lhs
    (77) method_invocation -> . field_access LPAREN RPAREN
    (78) method_invocation -> . field_access LPAREN arguments RPAREN
    (22) type -> . INT
    (23) type -> . FLOAT
    (24) type -> . BOOLEAN
    (25) type -> . VOID
    (26) type -> . ID
    (74) lhs -> . field_access
    (75) field_access -> . primary PERIOD ID
    (76) field_access -> . ID
    (63) primary -> . literal
    (64) primary -> . THIS
    (65) primary -> . SUPER
    (66) primary -> . LPAREN expr RPAREN
    (67) primary -> . NEW ID LPAREN arguments RPAREN
    (68) primary -> . NEW ID LPAREN RPAREN
    (69) primary -> . lhs
    (70) primary -> . method_invocation
    (57) literal -> . INTCONST
    (58) literal -> . FLOATCONST
    (59) literal -> . STRINGCONST
    (60) literal -> . NULL
    (61) literal -> . TRUE
    (62) literal -> . FALSE

    IF              shift and go to state 68
    WHILE           shift and go to state 70
    FOR             shift and go to state 71
    RETURN          shift and go to state 74
    BREAK           shift and go to state 75
    CONTINUE        shift and go to state 76
    SEMICOLON       shift and go to state 73
    LBRACE          shift and go to state 57
    PLUSPLUS        shift and go to state 83
    MINUSMINUS      shift and go to state 84
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 86
    THIS            shift and go to state 89
    SUPER           shift and go to state 90
    LPAREN          shift and go to state 69
    NEW             shift and go to state 91
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 93
    STRINGCONST     shift and go to state 94
    NULL            shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97

    stmt                           shift and go to state 170
    stmt_expr                      shift and go to state 72
    block                          shift and go to state 77
    var_decl                       shift and go to state 78
    assign                         shift and go to state 79
    method_invocation              shift and go to state 80
    type                           shift and go to state 81
    lhs                            shift and go to state 82
    field_access                   shift and go to state 85
    primary                        shift and go to state 87
    literal                        shift and go to state 88

state 162

    (81) expr -> expr arith_op expr .
    (81) expr -> expr . arith_op expr
    (82) expr -> expr . bool_op expr
    (89) arith_op -> . PLUS
    (90) arith_op -> . MINUS
    (91) arith_op -> . TIMES
    (92) arith_op -> . DIVIDE
    (93) bool_op -> . AND
    (94) bool_op -> . OR
    (95) bool_op -> . EQUALSCOMPARE
    (96) bool_op -> . NOTEQUALS
    (97) bool_op -> . LESSTHAN
    (98) bool_op -> . GREATERTHAN
    (99) bool_op -> . LESSTHANOREQ
    (100) bool_op -> . GREATERTHANOREQ

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUALSCOMPARE resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANOREQ resolved as shift
  ! shift/reduce conflict for GREATERTHANOREQ resolved as shift
    RPAREN          reduce using rule 81 (expr -> expr arith_op expr .)
    SEMICOLON       reduce using rule 81 (expr -> expr arith_op expr .)
    COMMA           reduce using rule 81 (expr -> expr arith_op expr .)
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    AND             shift and go to state 142
    OR              shift and go to state 143
    EQUALSCOMPARE   shift and go to state 144
    NOTEQUALS       shift and go to state 145
    LESSTHAN        shift and go to state 146
    GREATERTHAN     shift and go to state 147
    LESSTHANOREQ    shift and go to state 148
    GREATERTHANOREQ shift and go to state 149

  ! PLUS            [ reduce using rule 81 (expr -> expr arith_op expr .) ]
  ! MINUS           [ reduce using rule 81 (expr -> expr arith_op expr .) ]
  ! TIMES           [ reduce using rule 81 (expr -> expr arith_op expr .) ]
  ! DIVIDE          [ reduce using rule 81 (expr -> expr arith_op expr .) ]
  ! AND             [ reduce using rule 81 (expr -> expr arith_op expr .) ]
  ! OR              [ reduce using rule 81 (expr -> expr arith_op expr .) ]
  ! EQUALSCOMPARE   [ reduce using rule 81 (expr -> expr arith_op expr .) ]
  ! NOTEQUALS       [ reduce using rule 81 (expr -> expr arith_op expr .) ]
  ! LESSTHAN        [ reduce using rule 81 (expr -> expr arith_op expr .) ]
  ! GREATERTHAN     [ reduce using rule 81 (expr -> expr arith_op expr .) ]
  ! LESSTHANOREQ    [ reduce using rule 81 (expr -> expr arith_op expr .) ]
  ! GREATERTHANOREQ [ reduce using rule 81 (expr -> expr arith_op expr .) ]

    arith_op                       shift and go to state 136
    bool_op                        shift and go to state 137

state 163

    (82) expr -> expr bool_op expr .
    (81) expr -> expr . arith_op expr
    (82) expr -> expr . bool_op expr
    (89) arith_op -> . PLUS
    (90) arith_op -> . MINUS
    (91) arith_op -> . TIMES
    (92) arith_op -> . DIVIDE
    (93) bool_op -> . AND
    (94) bool_op -> . OR
    (95) bool_op -> . EQUALSCOMPARE
    (96) bool_op -> . NOTEQUALS
    (97) bool_op -> . LESSTHAN
    (98) bool_op -> . GREATERTHAN
    (99) bool_op -> . LESSTHANOREQ
    (100) bool_op -> . GREATERTHANOREQ

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUALSCOMPARE resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANOREQ resolved as shift
  ! shift/reduce conflict for GREATERTHANOREQ resolved as shift
    RPAREN          reduce using rule 82 (expr -> expr bool_op expr .)
    SEMICOLON       reduce using rule 82 (expr -> expr bool_op expr .)
    COMMA           reduce using rule 82 (expr -> expr bool_op expr .)
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    AND             shift and go to state 142
    OR              shift and go to state 143
    EQUALSCOMPARE   shift and go to state 144
    NOTEQUALS       shift and go to state 145
    LESSTHAN        shift and go to state 146
    GREATERTHAN     shift and go to state 147
    LESSTHANOREQ    shift and go to state 148
    GREATERTHANOREQ shift and go to state 149

  ! PLUS            [ reduce using rule 82 (expr -> expr bool_op expr .) ]
  ! MINUS           [ reduce using rule 82 (expr -> expr bool_op expr .) ]
  ! TIMES           [ reduce using rule 82 (expr -> expr bool_op expr .) ]
  ! DIVIDE          [ reduce using rule 82 (expr -> expr bool_op expr .) ]
  ! AND             [ reduce using rule 82 (expr -> expr bool_op expr .) ]
  ! OR              [ reduce using rule 82 (expr -> expr bool_op expr .) ]
  ! EQUALSCOMPARE   [ reduce using rule 82 (expr -> expr bool_op expr .) ]
  ! NOTEQUALS       [ reduce using rule 82 (expr -> expr bool_op expr .) ]
  ! LESSTHAN        [ reduce using rule 82 (expr -> expr bool_op expr .) ]
  ! GREATERTHAN     [ reduce using rule 82 (expr -> expr bool_op expr .) ]
  ! LESSTHANOREQ    [ reduce using rule 82 (expr -> expr bool_op expr .) ]
  ! GREATERTHANOREQ [ reduce using rule 82 (expr -> expr bool_op expr .) ]

    bool_op                        shift and go to state 137
    arith_op                       shift and go to state 136

state 164

    (47) stmt -> WHILE LPAREN expr RPAREN . stmt
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (47) stmt -> . WHILE LPAREN expr RPAREN stmt
    (48) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (49) stmt -> . RETURN SEMICOLON
    (50) stmt -> . RETURN expr SEMICOLON
    (51) stmt -> . stmt_expr SEMICOLON
    (52) stmt -> . BREAK SEMICOLON
    (53) stmt -> . CONTINUE SEMICOLON
    (54) stmt -> . block
    (55) stmt -> . var_decl SEMICOLON
    (56) stmt -> . SEMICOLON
    (104) stmt_expr -> . assign
    (105) stmt_expr -> . method_invocation
    (41) block -> . LBRACE block_end RBRACE
    (21) var_decl -> . type variables
    (84) assign -> . lhs EQUALS expr
    (85) assign -> . lhs PLUSPLUS
    (86) assign -> . PLUSPLUS lhs
    (87) assign -> . lhs MINUSMINUS
    (88) assign -> . MINUSMINUS lhs
    (77) method_invocation -> . field_access LPAREN RPAREN
    (78) method_invocation -> . field_access LPAREN arguments RPAREN
    (22) type -> . INT
    (23) type -> . FLOAT
    (24) type -> . BOOLEAN
    (25) type -> . VOID
    (26) type -> . ID
    (74) lhs -> . field_access
    (75) field_access -> . primary PERIOD ID
    (76) field_access -> . ID
    (63) primary -> . literal
    (64) primary -> . THIS
    (65) primary -> . SUPER
    (66) primary -> . LPAREN expr RPAREN
    (67) primary -> . NEW ID LPAREN arguments RPAREN
    (68) primary -> . NEW ID LPAREN RPAREN
    (69) primary -> . lhs
    (70) primary -> . method_invocation
    (57) literal -> . INTCONST
    (58) literal -> . FLOATCONST
    (59) literal -> . STRINGCONST
    (60) literal -> . NULL
    (61) literal -> . TRUE
    (62) literal -> . FALSE

    IF              shift and go to state 68
    WHILE           shift and go to state 70
    FOR             shift and go to state 71
    RETURN          shift and go to state 74
    BREAK           shift and go to state 75
    CONTINUE        shift and go to state 76
    SEMICOLON       shift and go to state 73
    LBRACE          shift and go to state 57
    PLUSPLUS        shift and go to state 83
    MINUSMINUS      shift and go to state 84
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 86
    THIS            shift and go to state 89
    SUPER           shift and go to state 90
    LPAREN          shift and go to state 69
    NEW             shift and go to state 91
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 93
    STRINGCONST     shift and go to state 94
    NULL            shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97

    stmt                           shift and go to state 171
    stmt_expr                      shift and go to state 72
    block                          shift and go to state 77
    var_decl                       shift and go to state 78
    assign                         shift and go to state 79
    method_invocation              shift and go to state 80
    type                           shift and go to state 81
    lhs                            shift and go to state 82
    field_access                   shift and go to state 85
    primary                        shift and go to state 87
    literal                        shift and go to state 88

state 165

    (48) stmt -> FOR LPAREN stmt_expr SEMICOLON . expr SEMICOLON stmt_expr RPAREN stmt
    (79) expr -> . primary
    (80) expr -> . assign
    (81) expr -> . expr arith_op expr
    (82) expr -> . expr bool_op expr
    (83) expr -> . unary_op expr
    (63) primary -> . literal
    (64) primary -> . THIS
    (65) primary -> . SUPER
    (66) primary -> . LPAREN expr RPAREN
    (67) primary -> . NEW ID LPAREN arguments RPAREN
    (68) primary -> . NEW ID LPAREN RPAREN
    (69) primary -> . lhs
    (70) primary -> . method_invocation
    (84) assign -> . lhs EQUALS expr
    (85) assign -> . lhs PLUSPLUS
    (86) assign -> . PLUSPLUS lhs
    (87) assign -> . lhs MINUSMINUS
    (88) assign -> . MINUSMINUS lhs
    (101) unary_op -> . PLUS
    (102) unary_op -> . MINUS
    (103) unary_op -> . NOT
    (57) literal -> . INTCONST
    (58) literal -> . FLOATCONST
    (59) literal -> . STRINGCONST
    (60) literal -> . NULL
    (61) literal -> . TRUE
    (62) literal -> . FALSE
    (74) lhs -> . field_access
    (77) method_invocation -> . field_access LPAREN RPAREN
    (78) method_invocation -> . field_access LPAREN arguments RPAREN
    (75) field_access -> . primary PERIOD ID
    (76) field_access -> . ID

    THIS            shift and go to state 89
    SUPER           shift and go to state 90
    LPAREN          shift and go to state 69
    NEW             shift and go to state 91
    PLUSPLUS        shift and go to state 83
    MINUSMINUS      shift and go to state 84
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    NOT             shift and go to state 115
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 93
    STRINGCONST     shift and go to state 94
    NULL            shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    ID              shift and go to state 110

    expr                           shift and go to state 172
    primary                        shift and go to state 107
    assign                         shift and go to state 108
    unary_op                       shift and go to state 109
    literal                        shift and go to state 88
    lhs                            shift and go to state 111
    method_invocation              shift and go to state 112
    field_access                   shift and go to state 116

state 166

    (78) method_invocation -> field_access LPAREN arguments RPAREN .

    SEMICOLON       reduce using rule 78 (method_invocation -> field_access LPAREN arguments RPAREN .)
    PERIOD          reduce using rule 78 (method_invocation -> field_access LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 78 (method_invocation -> field_access LPAREN arguments RPAREN .)
    PLUS            reduce using rule 78 (method_invocation -> field_access LPAREN arguments RPAREN .)
    MINUS           reduce using rule 78 (method_invocation -> field_access LPAREN arguments RPAREN .)
    TIMES           reduce using rule 78 (method_invocation -> field_access LPAREN arguments RPAREN .)
    DIVIDE          reduce using rule 78 (method_invocation -> field_access LPAREN arguments RPAREN .)
    AND             reduce using rule 78 (method_invocation -> field_access LPAREN arguments RPAREN .)
    OR              reduce using rule 78 (method_invocation -> field_access LPAREN arguments RPAREN .)
    EQUALSCOMPARE   reduce using rule 78 (method_invocation -> field_access LPAREN arguments RPAREN .)
    NOTEQUALS       reduce using rule 78 (method_invocation -> field_access LPAREN arguments RPAREN .)
    LESSTHAN        reduce using rule 78 (method_invocation -> field_access LPAREN arguments RPAREN .)
    GREATERTHAN     reduce using rule 78 (method_invocation -> field_access LPAREN arguments RPAREN .)
    LESSTHANOREQ    reduce using rule 78 (method_invocation -> field_access LPAREN arguments RPAREN .)
    GREATERTHANOREQ reduce using rule 78 (method_invocation -> field_access LPAREN arguments RPAREN .)
    COMMA           reduce using rule 78 (method_invocation -> field_access LPAREN arguments RPAREN .)


state 167

    (72) arguments -> arguments COMMA . expr
    (79) expr -> . primary
    (80) expr -> . assign
    (81) expr -> . expr arith_op expr
    (82) expr -> . expr bool_op expr
    (83) expr -> . unary_op expr
    (63) primary -> . literal
    (64) primary -> . THIS
    (65) primary -> . SUPER
    (66) primary -> . LPAREN expr RPAREN
    (67) primary -> . NEW ID LPAREN arguments RPAREN
    (68) primary -> . NEW ID LPAREN RPAREN
    (69) primary -> . lhs
    (70) primary -> . method_invocation
    (84) assign -> . lhs EQUALS expr
    (85) assign -> . lhs PLUSPLUS
    (86) assign -> . PLUSPLUS lhs
    (87) assign -> . lhs MINUSMINUS
    (88) assign -> . MINUSMINUS lhs
    (101) unary_op -> . PLUS
    (102) unary_op -> . MINUS
    (103) unary_op -> . NOT
    (57) literal -> . INTCONST
    (58) literal -> . FLOATCONST
    (59) literal -> . STRINGCONST
    (60) literal -> . NULL
    (61) literal -> . TRUE
    (62) literal -> . FALSE
    (74) lhs -> . field_access
    (77) method_invocation -> . field_access LPAREN RPAREN
    (78) method_invocation -> . field_access LPAREN arguments RPAREN
    (75) field_access -> . primary PERIOD ID
    (76) field_access -> . ID

    THIS            shift and go to state 89
    SUPER           shift and go to state 90
    LPAREN          shift and go to state 69
    NEW             shift and go to state 91
    PLUSPLUS        shift and go to state 83
    MINUSMINUS      shift and go to state 84
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    NOT             shift and go to state 115
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 93
    STRINGCONST     shift and go to state 94
    NULL            shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    ID              shift and go to state 110

    expr                           shift and go to state 173
    primary                        shift and go to state 107
    assign                         shift and go to state 108
    unary_op                       shift and go to state 109
    literal                        shift and go to state 88
    lhs                            shift and go to state 111
    method_invocation              shift and go to state 112
    field_access                   shift and go to state 116

state 168

    (67) primary -> NEW ID LPAREN arguments . RPAREN
    (72) arguments -> arguments . COMMA expr

    RPAREN          shift and go to state 174
    COMMA           shift and go to state 167


state 169

    (68) primary -> NEW ID LPAREN RPAREN .

    PERIOD          reduce using rule 68 (primary -> NEW ID LPAREN RPAREN .)
    RPAREN          reduce using rule 68 (primary -> NEW ID LPAREN RPAREN .)
    PLUS            reduce using rule 68 (primary -> NEW ID LPAREN RPAREN .)
    MINUS           reduce using rule 68 (primary -> NEW ID LPAREN RPAREN .)
    TIMES           reduce using rule 68 (primary -> NEW ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 68 (primary -> NEW ID LPAREN RPAREN .)
    AND             reduce using rule 68 (primary -> NEW ID LPAREN RPAREN .)
    OR              reduce using rule 68 (primary -> NEW ID LPAREN RPAREN .)
    EQUALSCOMPARE   reduce using rule 68 (primary -> NEW ID LPAREN RPAREN .)
    NOTEQUALS       reduce using rule 68 (primary -> NEW ID LPAREN RPAREN .)
    LESSTHAN        reduce using rule 68 (primary -> NEW ID LPAREN RPAREN .)
    GREATERTHAN     reduce using rule 68 (primary -> NEW ID LPAREN RPAREN .)
    LESSTHANOREQ    reduce using rule 68 (primary -> NEW ID LPAREN RPAREN .)
    GREATERTHANOREQ reduce using rule 68 (primary -> NEW ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 68 (primary -> NEW ID LPAREN RPAREN .)
    COMMA           reduce using rule 68 (primary -> NEW ID LPAREN RPAREN .)


state 170

    (45) stmt -> IF LPAREN expr RPAREN stmt .
    (46) stmt -> IF LPAREN expr RPAREN stmt . ELSE stmt

  ! shift/reduce conflict for ELSE resolved as shift
    IF              reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    WHILE           reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    FOR             reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    RETURN          reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    BREAK           reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    CONTINUE        reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    SEMICOLON       reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    LBRACE          reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    PLUSPLUS        reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    MINUSMINUS      reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    INT             reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    FLOAT           reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    BOOLEAN         reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    VOID            reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    ID              reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    THIS            reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    SUPER           reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    LPAREN          reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    NEW             reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    INTCONST        reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    FLOATCONST      reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    STRINGCONST     reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    NULL            reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    TRUE            reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    FALSE           reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    RBRACE          reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    ELSE            shift and go to state 175

  ! ELSE            [ reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .) ]


state 171

    (47) stmt -> WHILE LPAREN expr RPAREN stmt .

    IF              reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    WHILE           reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FOR             reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    RETURN          reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    BREAK           reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    CONTINUE        reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    SEMICOLON       reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LBRACE          reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    PLUSPLUS        reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    MINUSMINUS      reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    INT             reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FLOAT           reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    BOOLEAN         reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    VOID            reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    ID              reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    THIS            reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    SUPER           reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LPAREN          reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NEW             reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    INTCONST        reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FLOATCONST      reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    STRINGCONST     reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NULL            reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    TRUE            reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FALSE           reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    RBRACE          reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    ELSE            reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)


state 172

    (48) stmt -> FOR LPAREN stmt_expr SEMICOLON expr . SEMICOLON stmt_expr RPAREN stmt
    (81) expr -> expr . arith_op expr
    (82) expr -> expr . bool_op expr
    (89) arith_op -> . PLUS
    (90) arith_op -> . MINUS
    (91) arith_op -> . TIMES
    (92) arith_op -> . DIVIDE
    (93) bool_op -> . AND
    (94) bool_op -> . OR
    (95) bool_op -> . EQUALSCOMPARE
    (96) bool_op -> . NOTEQUALS
    (97) bool_op -> . LESSTHAN
    (98) bool_op -> . GREATERTHAN
    (99) bool_op -> . LESSTHANOREQ
    (100) bool_op -> . GREATERTHANOREQ

    SEMICOLON       shift and go to state 176
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    AND             shift and go to state 142
    OR              shift and go to state 143
    EQUALSCOMPARE   shift and go to state 144
    NOTEQUALS       shift and go to state 145
    LESSTHAN        shift and go to state 146
    GREATERTHAN     shift and go to state 147
    LESSTHANOREQ    shift and go to state 148
    GREATERTHANOREQ shift and go to state 149

    arith_op                       shift and go to state 136
    bool_op                        shift and go to state 137

state 173

    (72) arguments -> arguments COMMA expr .
    (81) expr -> expr . arith_op expr
    (82) expr -> expr . bool_op expr
    (89) arith_op -> . PLUS
    (90) arith_op -> . MINUS
    (91) arith_op -> . TIMES
    (92) arith_op -> . DIVIDE
    (93) bool_op -> . AND
    (94) bool_op -> . OR
    (95) bool_op -> . EQUALSCOMPARE
    (96) bool_op -> . NOTEQUALS
    (97) bool_op -> . LESSTHAN
    (98) bool_op -> . GREATERTHAN
    (99) bool_op -> . LESSTHANOREQ
    (100) bool_op -> . GREATERTHANOREQ

    RPAREN          reduce using rule 72 (arguments -> arguments COMMA expr .)
    COMMA           reduce using rule 72 (arguments -> arguments COMMA expr .)
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    AND             shift and go to state 142
    OR              shift and go to state 143
    EQUALSCOMPARE   shift and go to state 144
    NOTEQUALS       shift and go to state 145
    LESSTHAN        shift and go to state 146
    GREATERTHAN     shift and go to state 147
    LESSTHANOREQ    shift and go to state 148
    GREATERTHANOREQ shift and go to state 149

    arith_op                       shift and go to state 136
    bool_op                        shift and go to state 137

state 174

    (67) primary -> NEW ID LPAREN arguments RPAREN .

    PERIOD          reduce using rule 67 (primary -> NEW ID LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 67 (primary -> NEW ID LPAREN arguments RPAREN .)
    PLUS            reduce using rule 67 (primary -> NEW ID LPAREN arguments RPAREN .)
    MINUS           reduce using rule 67 (primary -> NEW ID LPAREN arguments RPAREN .)
    TIMES           reduce using rule 67 (primary -> NEW ID LPAREN arguments RPAREN .)
    DIVIDE          reduce using rule 67 (primary -> NEW ID LPAREN arguments RPAREN .)
    AND             reduce using rule 67 (primary -> NEW ID LPAREN arguments RPAREN .)
    OR              reduce using rule 67 (primary -> NEW ID LPAREN arguments RPAREN .)
    EQUALSCOMPARE   reduce using rule 67 (primary -> NEW ID LPAREN arguments RPAREN .)
    NOTEQUALS       reduce using rule 67 (primary -> NEW ID LPAREN arguments RPAREN .)
    LESSTHAN        reduce using rule 67 (primary -> NEW ID LPAREN arguments RPAREN .)
    GREATERTHAN     reduce using rule 67 (primary -> NEW ID LPAREN arguments RPAREN .)
    LESSTHANOREQ    reduce using rule 67 (primary -> NEW ID LPAREN arguments RPAREN .)
    GREATERTHANOREQ reduce using rule 67 (primary -> NEW ID LPAREN arguments RPAREN .)
    SEMICOLON       reduce using rule 67 (primary -> NEW ID LPAREN arguments RPAREN .)
    COMMA           reduce using rule 67 (primary -> NEW ID LPAREN arguments RPAREN .)


state 175

    (46) stmt -> IF LPAREN expr RPAREN stmt ELSE . stmt
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (47) stmt -> . WHILE LPAREN expr RPAREN stmt
    (48) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (49) stmt -> . RETURN SEMICOLON
    (50) stmt -> . RETURN expr SEMICOLON
    (51) stmt -> . stmt_expr SEMICOLON
    (52) stmt -> . BREAK SEMICOLON
    (53) stmt -> . CONTINUE SEMICOLON
    (54) stmt -> . block
    (55) stmt -> . var_decl SEMICOLON
    (56) stmt -> . SEMICOLON
    (104) stmt_expr -> . assign
    (105) stmt_expr -> . method_invocation
    (41) block -> . LBRACE block_end RBRACE
    (21) var_decl -> . type variables
    (84) assign -> . lhs EQUALS expr
    (85) assign -> . lhs PLUSPLUS
    (86) assign -> . PLUSPLUS lhs
    (87) assign -> . lhs MINUSMINUS
    (88) assign -> . MINUSMINUS lhs
    (77) method_invocation -> . field_access LPAREN RPAREN
    (78) method_invocation -> . field_access LPAREN arguments RPAREN
    (22) type -> . INT
    (23) type -> . FLOAT
    (24) type -> . BOOLEAN
    (25) type -> . VOID
    (26) type -> . ID
    (74) lhs -> . field_access
    (75) field_access -> . primary PERIOD ID
    (76) field_access -> . ID
    (63) primary -> . literal
    (64) primary -> . THIS
    (65) primary -> . SUPER
    (66) primary -> . LPAREN expr RPAREN
    (67) primary -> . NEW ID LPAREN arguments RPAREN
    (68) primary -> . NEW ID LPAREN RPAREN
    (69) primary -> . lhs
    (70) primary -> . method_invocation
    (57) literal -> . INTCONST
    (58) literal -> . FLOATCONST
    (59) literal -> . STRINGCONST
    (60) literal -> . NULL
    (61) literal -> . TRUE
    (62) literal -> . FALSE

    IF              shift and go to state 68
    WHILE           shift and go to state 70
    FOR             shift and go to state 71
    RETURN          shift and go to state 74
    BREAK           shift and go to state 75
    CONTINUE        shift and go to state 76
    SEMICOLON       shift and go to state 73
    LBRACE          shift and go to state 57
    PLUSPLUS        shift and go to state 83
    MINUSMINUS      shift and go to state 84
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 86
    THIS            shift and go to state 89
    SUPER           shift and go to state 90
    LPAREN          shift and go to state 69
    NEW             shift and go to state 91
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 93
    STRINGCONST     shift and go to state 94
    NULL            shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97

    stmt                           shift and go to state 177
    stmt_expr                      shift and go to state 72
    block                          shift and go to state 77
    var_decl                       shift and go to state 78
    assign                         shift and go to state 79
    method_invocation              shift and go to state 80
    type                           shift and go to state 81
    lhs                            shift and go to state 82
    field_access                   shift and go to state 85
    primary                        shift and go to state 87
    literal                        shift and go to state 88

state 176

    (48) stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON . stmt_expr RPAREN stmt
    (104) stmt_expr -> . assign
    (105) stmt_expr -> . method_invocation
    (84) assign -> . lhs EQUALS expr
    (85) assign -> . lhs PLUSPLUS
    (86) assign -> . PLUSPLUS lhs
    (87) assign -> . lhs MINUSMINUS
    (88) assign -> . MINUSMINUS lhs
    (77) method_invocation -> . field_access LPAREN RPAREN
    (78) method_invocation -> . field_access LPAREN arguments RPAREN
    (74) lhs -> . field_access
    (75) field_access -> . primary PERIOD ID
    (76) field_access -> . ID
    (63) primary -> . literal
    (64) primary -> . THIS
    (65) primary -> . SUPER
    (66) primary -> . LPAREN expr RPAREN
    (67) primary -> . NEW ID LPAREN arguments RPAREN
    (68) primary -> . NEW ID LPAREN RPAREN
    (69) primary -> . lhs
    (70) primary -> . method_invocation
    (57) literal -> . INTCONST
    (58) literal -> . FLOATCONST
    (59) literal -> . STRINGCONST
    (60) literal -> . NULL
    (61) literal -> . TRUE
    (62) literal -> . FALSE

    PLUSPLUS        shift and go to state 83
    MINUSMINUS      shift and go to state 84
    ID              shift and go to state 110
    THIS            shift and go to state 89
    SUPER           shift and go to state 90
    LPAREN          shift and go to state 69
    NEW             shift and go to state 91
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 93
    STRINGCONST     shift and go to state 94
    NULL            shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97

    stmt_expr                      shift and go to state 178
    assign                         shift and go to state 79
    method_invocation              shift and go to state 80
    lhs                            shift and go to state 82
    field_access                   shift and go to state 85
    primary                        shift and go to state 87
    literal                        shift and go to state 88

state 177

    (46) stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .

    IF              reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    WHILE           reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    FOR             reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    RETURN          reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    BREAK           reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    CONTINUE        reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    SEMICOLON       reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    LBRACE          reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    PLUSPLUS        reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    MINUSMINUS      reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    INT             reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    FLOAT           reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    BOOLEAN         reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    VOID            reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    ID              reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    THIS            reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    SUPER           reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    LPAREN          reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    NEW             reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    INTCONST        reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    FLOATCONST      reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    STRINGCONST     reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    NULL            reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    TRUE            reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    FALSE           reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    RBRACE          reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    ELSE            reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)


state 178

    (48) stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr . RPAREN stmt

    RPAREN          shift and go to state 179


state 179

    (48) stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN . stmt
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (47) stmt -> . WHILE LPAREN expr RPAREN stmt
    (48) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (49) stmt -> . RETURN SEMICOLON
    (50) stmt -> . RETURN expr SEMICOLON
    (51) stmt -> . stmt_expr SEMICOLON
    (52) stmt -> . BREAK SEMICOLON
    (53) stmt -> . CONTINUE SEMICOLON
    (54) stmt -> . block
    (55) stmt -> . var_decl SEMICOLON
    (56) stmt -> . SEMICOLON
    (104) stmt_expr -> . assign
    (105) stmt_expr -> . method_invocation
    (41) block -> . LBRACE block_end RBRACE
    (21) var_decl -> . type variables
    (84) assign -> . lhs EQUALS expr
    (85) assign -> . lhs PLUSPLUS
    (86) assign -> . PLUSPLUS lhs
    (87) assign -> . lhs MINUSMINUS
    (88) assign -> . MINUSMINUS lhs
    (77) method_invocation -> . field_access LPAREN RPAREN
    (78) method_invocation -> . field_access LPAREN arguments RPAREN
    (22) type -> . INT
    (23) type -> . FLOAT
    (24) type -> . BOOLEAN
    (25) type -> . VOID
    (26) type -> . ID
    (74) lhs -> . field_access
    (75) field_access -> . primary PERIOD ID
    (76) field_access -> . ID
    (63) primary -> . literal
    (64) primary -> . THIS
    (65) primary -> . SUPER
    (66) primary -> . LPAREN expr RPAREN
    (67) primary -> . NEW ID LPAREN arguments RPAREN
    (68) primary -> . NEW ID LPAREN RPAREN
    (69) primary -> . lhs
    (70) primary -> . method_invocation
    (57) literal -> . INTCONST
    (58) literal -> . FLOATCONST
    (59) literal -> . STRINGCONST
    (60) literal -> . NULL
    (61) literal -> . TRUE
    (62) literal -> . FALSE

    IF              shift and go to state 68
    WHILE           shift and go to state 70
    FOR             shift and go to state 71
    RETURN          shift and go to state 74
    BREAK           shift and go to state 75
    CONTINUE        shift and go to state 76
    SEMICOLON       shift and go to state 73
    LBRACE          shift and go to state 57
    PLUSPLUS        shift and go to state 83
    MINUSMINUS      shift and go to state 84
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 86
    THIS            shift and go to state 89
    SUPER           shift and go to state 90
    LPAREN          shift and go to state 69
    NEW             shift and go to state 91
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 93
    STRINGCONST     shift and go to state 94
    NULL            shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97

    stmt_expr                      shift and go to state 72
    stmt                           shift and go to state 180
    block                          shift and go to state 77
    var_decl                       shift and go to state 78
    assign                         shift and go to state 79
    method_invocation              shift and go to state 80
    type                           shift and go to state 81
    lhs                            shift and go to state 82
    field_access                   shift and go to state 85
    primary                        shift and go to state 87
    literal                        shift and go to state 88

state 180

    (48) stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .

    IF              reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    WHILE           reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    FOR             reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    RETURN          reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    BREAK           reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    CONTINUE        reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    SEMICOLON       reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    LBRACE          reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    PLUSPLUS        reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    MINUSMINUS      reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    INT             reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    FLOAT           reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    BOOLEAN         reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    VOID            reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    ID              reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    THIS            reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    SUPER           reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    LPAREN          reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    NEW             reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    INTCONST        reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    FLOATCONST      reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    STRINGCONST     reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    NULL            reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    TRUE            reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    FALSE           reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    RBRACE          reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    ELSE            reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 27 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 39 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 42 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 51 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 130 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 150 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 150 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 150 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 150 resolved as shift
WARNING: shift/reduce conflict for AND in state 150 resolved as shift
WARNING: shift/reduce conflict for OR in state 150 resolved as shift
WARNING: shift/reduce conflict for EQUALSCOMPARE in state 150 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 150 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 150 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 150 resolved as shift
WARNING: shift/reduce conflict for LESSTHANOREQ in state 150 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANOREQ in state 150 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 160 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 162 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 162 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 162 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 162 resolved as shift
WARNING: shift/reduce conflict for AND in state 162 resolved as shift
WARNING: shift/reduce conflict for OR in state 162 resolved as shift
WARNING: shift/reduce conflict for EQUALSCOMPARE in state 162 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 162 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 162 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 162 resolved as shift
WARNING: shift/reduce conflict for LESSTHANOREQ in state 162 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANOREQ in state 162 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 163 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 163 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 163 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 163 resolved as shift
WARNING: shift/reduce conflict for AND in state 163 resolved as shift
WARNING: shift/reduce conflict for OR in state 163 resolved as shift
WARNING: shift/reduce conflict for EQUALSCOMPARE in state 163 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 163 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 163 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 163 resolved as shift
WARNING: shift/reduce conflict for LESSTHANOREQ in state 163 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANOREQ in state 163 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 170 resolved as shift
WARNING: reduce/reduce conflict in state 12 resolved using rule (empty -> <empty>)
WARNING: rejected rule (class_body_sub_decls -> method_decl) in state 12
WARNING: reduce/reduce conflict in state 13 resolved using rule (empty -> <empty>)
WARNING: rejected rule (class_body_sub_decls -> constructor_decl) in state 13
WARNING: reduce/reduce conflict in state 21 resolved using rule (empty -> <empty>)
WARNING: rejected rule (class_body_sub_decls -> field_decl SEMICOLON) in state 21
WARNING: reduce/reduce conflict in state 66 resolved using rule (empty -> <empty>)
WARNING: rejected rule (block_end -> stmt) in state 66
WARNING: Rule (class_body_sub_decls -> method_decl) is never reduced
WARNING: Rule (class_body_sub_decls -> constructor_decl) is never reduced
WARNING: Rule (class_body_sub_decls -> field_decl SEMICOLON) is never reduced
WARNING: Rule (block_end -> stmt) is never reduced
