Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DECLARE
    DO
    LBRACKET
    NUMBER
    RBRACKET
    STRING
    SYMBOLS
    TERMINALS

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> class_decl
Rule 3     program -> class_decl program
Rule 4     program -> empty
Rule 5     class_decl -> CLASS ID EXTENDS ID LBRACE class_body_decl RBRACE
Rule 6     class_decl -> CLASS ID LBRACE class_body_decl RBRACE
Rule 7     class_body_decl -> field_decl
Rule 8     class_body_decl -> method_decl
Rule 9     class_body_decl -> constructor_decl
Rule 10    class_body_decl -> field_decl class_body_more
Rule 11    class_body_decl -> method_decl class_body_more
Rule 12    class_body_decl -> constructor_decl class_body_more
Rule 13    class_body_more -> empty
Rule 14    class_body_more -> field_decl class_body_more
Rule 15    class_body_more -> method_decl class_body_more
Rule 16    class_body_more -> constructor_decl class_body_more
Rule 17    field_decl -> modifier var_decl
Rule 18    modifier -> PUBLIC STATIC
Rule 19    modifier -> PRIVATE STATIC
Rule 20    modifier -> PUBLIC
Rule 21    modifier -> PRIVATE
Rule 22    modifier -> STATIC
Rule 23    modifier -> empty
Rule 24    var_decl -> type variables
Rule 25    type -> INT
Rule 26    type -> FLOAT
Rule 27    type -> BOOLEAN
Rule 28    type -> VOID
Rule 29    type -> ID
Rule 30    variables -> variable
Rule 31    variables -> variables COMMA variable
Rule 32    variables -> empty
Rule 33    variable -> ID
Rule 34    method_decl -> modifier type ID LPAREN RPAREN block
Rule 35    method_decl -> modifier VOID ID LPAREN RPAREN block
Rule 36    method_decl -> modifier type ID LPAREN formals RPAREN block
Rule 37    method_decl -> modifier VOID ID LPAREN formals RPAREN block
Rule 38    constructor_decl -> modifier ID LPAREN RPAREN block
Rule 39    constructor_decl -> modifier ID LPAREN formals RPAREN block
Rule 40    formals -> formals COMMA formal_param
Rule 41    formals -> formal_param
Rule 42    formals -> empty
Rule 43    formal_param -> type variable
Rule 44    block -> LBRACE stmt RBRACE
Rule 45    stmt -> IF LPAREN expr RPAREN stmt
Rule 46    stmt -> IF LPAREN expr RPAREN stmt ELSE stmt
Rule 47    stmt -> WHILE LPAREN expr RPAREN stmt
Rule 48    stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
Rule 49    stmt -> FOR LPAREN SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
Rule 50    stmt -> FOR LPAREN stmt_expr SEMICOLON SEMICOLON stmt_expr RPAREN stmt
Rule 51    stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON RPAREN stmt
Rule 52    stmt -> FOR LPAREN SEMICOLON SEMICOLON stmt_expr RPAREN stmt
Rule 53    stmt -> FOR LPAREN stmt_expr SEMICOLON SEMICOLON RPAREN stmt
Rule 54    stmt -> FOR LPAREN SEMICOLON expr SEMICOLON RPAREN stmt
Rule 55    stmt -> FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt
Rule 56    stmt -> RETURN SEMICOLON
Rule 57    stmt -> RETURN expr SEMICOLON
Rule 58    stmt -> stmt_expr SEMICOLON
Rule 59    stmt -> BREAK SEMICOLON
Rule 60    stmt -> CONTINUE SEMICOLON
Rule 61    stmt -> block
Rule 62    stmt -> var_decl
Rule 63    stmt -> SEMICOLON
Rule 64    literal -> INTCONST
Rule 65    literal -> FLOATCONST
Rule 66    literal -> STRINGCONST
Rule 67    literal -> NULL
Rule 68    literal -> TRUE
Rule 69    literal -> FALSE
Rule 70    primary -> literal
Rule 71    primary -> THIS
Rule 72    primary -> SUPER
Rule 73    primary -> LPAREN expr RPAREN
Rule 74    primary -> NEW ID LPAREN arguments RPAREN
Rule 75    primary -> NEW ID LPAREN RPAREN
Rule 76    primary -> lhs
Rule 77    primary -> method_invocation
Rule 78    arguments -> expr
Rule 79    arguments -> arguments COMMA expr
Rule 80    arguments -> empty
Rule 81    lhs -> field_access
Rule 82    field_access -> primary PERIOD ID
Rule 83    field_access -> ID
Rule 84    method_invocation -> field_access LPAREN RPAREN
Rule 85    method_invocation -> field_access LPAREN arguments RPAREN
Rule 86    expr -> primary
Rule 87    expr -> assign
Rule 88    expr -> expr arith_op expr
Rule 89    expr -> expr bool_op expr
Rule 90    expr -> unary_op expr
Rule 91    assign -> lhs EQUALS expr
Rule 92    assign -> lhs PLUSPLUS
Rule 93    assign -> PLUSPLUS lhs
Rule 94    assign -> lhs MINUSMINUS
Rule 95    assign -> MINUSMINUS lhs
Rule 96    arith_op -> PLUS
Rule 97    arith_op -> MINUS
Rule 98    arith_op -> TIMES
Rule 99    arith_op -> DIVIDE
Rule 100   bool_op -> AND
Rule 101   bool_op -> OR
Rule 102   bool_op -> EQUALSCOMPARE
Rule 103   bool_op -> NOTEQUALS
Rule 104   bool_op -> LESSTHAN
Rule 105   bool_op -> GREATERTHAN
Rule 106   bool_op -> LESSTHANOREQ
Rule 107   bool_op -> GREATERTHANOREQ
Rule 108   unary_op -> PLUS
Rule 109   unary_op -> MINUS
Rule 110   unary_op -> NOT
Rule 111   stmt_expr -> assign
Rule 112   stmt_expr -> method_invocation

Terminals, with rules where they appear

AND                  : 100
BOOLEAN              : 27
BREAK                : 59
CLASS                : 5 6
COMMA                : 31 40 79
CONTINUE             : 60
DECLARE              : 
DIVIDE               : 99
DO                   : 
ELSE                 : 46
EQUALS               : 91
EQUALSCOMPARE        : 102
EXTENDS              : 5
FALSE                : 69
FLOAT                : 26
FLOATCONST           : 65
FOR                  : 48 49 50 51 52 53 54 55
GREATERTHAN          : 105
GREATERTHANOREQ      : 107
ID                   : 5 5 6 29 33 34 35 36 37 38 39 74 75 82 83
IF                   : 45 46
INT                  : 25
INTCONST             : 64
LBRACE               : 5 6 44
LBRACKET             : 
LESSTHAN             : 104
LESSTHANOREQ         : 106
LPAREN               : 34 35 36 37 38 39 45 46 47 48 49 50 51 52 53 54 55 73 74 75 84 85
MINUS                : 97 109
MINUSMINUS           : 94 95
NEW                  : 74 75
NOT                  : 110
NOTEQUALS            : 103
NULL                 : 67
NUMBER               : 
OR                   : 101
PERIOD               : 82
PLUS                 : 96 108
PLUSPLUS             : 92 93
PRIVATE              : 19 21
PUBLIC               : 18 20
RBRACE               : 5 6 44
RBRACKET             : 
RETURN               : 56 57
RPAREN               : 34 35 36 37 38 39 45 46 47 48 49 50 51 52 53 54 55 73 74 75 84 85
SEMICOLON            : 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 57 58 59 60 63
STATIC               : 18 19 22
STRING               : 
STRINGCONST          : 66
SUPER                : 72
SYMBOLS              : 
TERMINALS            : 
THIS                 : 71
TIMES                : 98
TRUE                 : 68
VOID                 : 28 35 37
WHILE                : 47
error                : 

Nonterminals, with rules where they appear

arguments            : 74 79 85
arith_op             : 88
assign               : 87 111
block                : 34 35 36 37 38 39 61
bool_op              : 89
class_body_decl      : 5 6
class_body_more      : 10 11 12 14 15 16
class_decl           : 2 3
constructor_decl     : 9 12 16
empty                : 4 13 23 32 42 80
expr                 : 45 46 47 48 49 51 54 57 73 78 79 88 88 89 89 90 91
field_access         : 81 84 85
field_decl           : 7 10 14
formal_param         : 40 41
formals              : 36 37 39 40
lhs                  : 76 91 92 93 94 95
literal              : 70
method_decl          : 8 11 15
method_invocation    : 77 112
modifier             : 17 34 35 36 37 38 39
primary              : 82 86
program              : 3 0
stmt                 : 44 45 46 46 47 48 49 50 51 52 53 54 55
stmt_expr            : 48 48 49 50 50 51 52 53 58
type                 : 24 34 36 43
unary_op             : 90
var_decl             : 17 62
variable             : 30 31 43
variables            : 24 31

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . class_decl
    (3) program -> . class_decl program
    (4) program -> . empty
    (5) class_decl -> . CLASS ID EXTENDS ID LBRACE class_body_decl RBRACE
    (6) class_decl -> . CLASS ID LBRACE class_body_decl RBRACE
    (1) empty -> .

    CLASS           shift and go to state 4
    $end            reduce using rule 1 (empty -> .)

    program                        shift and go to state 1
    class_decl                     shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (2) program -> class_decl .
    (3) program -> class_decl . program
    (2) program -> . class_decl
    (3) program -> . class_decl program
    (4) program -> . empty
    (5) class_decl -> . CLASS ID EXTENDS ID LBRACE class_body_decl RBRACE
    (6) class_decl -> . CLASS ID LBRACE class_body_decl RBRACE
    (1) empty -> .

  ! reduce/reduce conflict for $end resolved using rule 1 (empty -> .)
    CLASS           shift and go to state 4
    $end            reduce using rule 1 (empty -> .)

  ! $end            [ reduce using rule 2 (program -> class_decl .) ]

    class_decl                     shift and go to state 2
    program                        shift and go to state 5
    empty                          shift and go to state 3

state 3

    (4) program -> empty .

    $end            reduce using rule 4 (program -> empty .)


state 4

    (5) class_decl -> CLASS . ID EXTENDS ID LBRACE class_body_decl RBRACE
    (6) class_decl -> CLASS . ID LBRACE class_body_decl RBRACE

    ID              shift and go to state 6


state 5

    (3) program -> class_decl program .

    $end            reduce using rule 3 (program -> class_decl program .)


state 6

    (5) class_decl -> CLASS ID . EXTENDS ID LBRACE class_body_decl RBRACE
    (6) class_decl -> CLASS ID . LBRACE class_body_decl RBRACE

    EXTENDS         shift and go to state 7
    LBRACE          shift and go to state 8


state 7

    (5) class_decl -> CLASS ID EXTENDS . ID LBRACE class_body_decl RBRACE

    ID              shift and go to state 9


state 8

    (6) class_decl -> CLASS ID LBRACE . class_body_decl RBRACE
    (7) class_body_decl -> . field_decl
    (8) class_body_decl -> . method_decl
    (9) class_body_decl -> . constructor_decl
    (10) class_body_decl -> . field_decl class_body_more
    (11) class_body_decl -> . method_decl class_body_more
    (12) class_body_decl -> . constructor_decl class_body_more
    (17) field_decl -> . modifier var_decl
    (34) method_decl -> . modifier type ID LPAREN RPAREN block
    (35) method_decl -> . modifier VOID ID LPAREN RPAREN block
    (36) method_decl -> . modifier type ID LPAREN formals RPAREN block
    (37) method_decl -> . modifier VOID ID LPAREN formals RPAREN block
    (38) constructor_decl -> . modifier ID LPAREN RPAREN block
    (39) constructor_decl -> . modifier ID LPAREN formals RPAREN block
    (18) modifier -> . PUBLIC STATIC
    (19) modifier -> . PRIVATE STATIC
    (20) modifier -> . PUBLIC
    (21) modifier -> . PRIVATE
    (22) modifier -> . STATIC
    (23) modifier -> . empty
    (1) empty -> .

    PUBLIC          shift and go to state 15
    PRIVATE         shift and go to state 17
    STATIC          shift and go to state 16
    VOID            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)

    class_body_decl                shift and go to state 10
    field_decl                     shift and go to state 11
    method_decl                    shift and go to state 12
    constructor_decl               shift and go to state 13
    modifier                       shift and go to state 14
    empty                          shift and go to state 18

state 9

    (5) class_decl -> CLASS ID EXTENDS ID . LBRACE class_body_decl RBRACE

    LBRACE          shift and go to state 19


state 10

    (6) class_decl -> CLASS ID LBRACE class_body_decl . RBRACE

    RBRACE          shift and go to state 20


state 11

    (7) class_body_decl -> field_decl .
    (10) class_body_decl -> field_decl . class_body_more
    (13) class_body_more -> . empty
    (14) class_body_more -> . field_decl class_body_more
    (15) class_body_more -> . method_decl class_body_more
    (16) class_body_more -> . constructor_decl class_body_more
    (1) empty -> .
    (17) field_decl -> . modifier var_decl
    (34) method_decl -> . modifier type ID LPAREN RPAREN block
    (35) method_decl -> . modifier VOID ID LPAREN RPAREN block
    (36) method_decl -> . modifier type ID LPAREN formals RPAREN block
    (37) method_decl -> . modifier VOID ID LPAREN formals RPAREN block
    (38) constructor_decl -> . modifier ID LPAREN RPAREN block
    (39) constructor_decl -> . modifier ID LPAREN formals RPAREN block
    (18) modifier -> . PUBLIC STATIC
    (19) modifier -> . PRIVATE STATIC
    (20) modifier -> . PUBLIC
    (21) modifier -> . PRIVATE
    (22) modifier -> . STATIC
    (23) modifier -> . empty

  ! reduce/reduce conflict for RBRACE resolved using rule 1 (empty -> .)
    RBRACE          reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    PUBLIC          shift and go to state 15
    PRIVATE         shift and go to state 17
    STATIC          shift and go to state 16

  ! RBRACE          [ reduce using rule 7 (class_body_decl -> field_decl .) ]

    field_decl                     shift and go to state 21
    class_body_more                shift and go to state 22
    empty                          shift and go to state 23
    method_decl                    shift and go to state 24
    constructor_decl               shift and go to state 25
    modifier                       shift and go to state 14

state 12

    (8) class_body_decl -> method_decl .
    (11) class_body_decl -> method_decl . class_body_more
    (13) class_body_more -> . empty
    (14) class_body_more -> . field_decl class_body_more
    (15) class_body_more -> . method_decl class_body_more
    (16) class_body_more -> . constructor_decl class_body_more
    (1) empty -> .
    (17) field_decl -> . modifier var_decl
    (34) method_decl -> . modifier type ID LPAREN RPAREN block
    (35) method_decl -> . modifier VOID ID LPAREN RPAREN block
    (36) method_decl -> . modifier type ID LPAREN formals RPAREN block
    (37) method_decl -> . modifier VOID ID LPAREN formals RPAREN block
    (38) constructor_decl -> . modifier ID LPAREN RPAREN block
    (39) constructor_decl -> . modifier ID LPAREN formals RPAREN block
    (18) modifier -> . PUBLIC STATIC
    (19) modifier -> . PRIVATE STATIC
    (20) modifier -> . PUBLIC
    (21) modifier -> . PRIVATE
    (22) modifier -> . STATIC
    (23) modifier -> . empty

  ! reduce/reduce conflict for RBRACE resolved using rule 1 (empty -> .)
    RBRACE          reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    PUBLIC          shift and go to state 15
    PRIVATE         shift and go to state 17
    STATIC          shift and go to state 16

  ! RBRACE          [ reduce using rule 8 (class_body_decl -> method_decl .) ]

    method_decl                    shift and go to state 24
    class_body_more                shift and go to state 26
    empty                          shift and go to state 23
    field_decl                     shift and go to state 21
    constructor_decl               shift and go to state 25
    modifier                       shift and go to state 14

state 13

    (9) class_body_decl -> constructor_decl .
    (12) class_body_decl -> constructor_decl . class_body_more
    (13) class_body_more -> . empty
    (14) class_body_more -> . field_decl class_body_more
    (15) class_body_more -> . method_decl class_body_more
    (16) class_body_more -> . constructor_decl class_body_more
    (1) empty -> .
    (17) field_decl -> . modifier var_decl
    (34) method_decl -> . modifier type ID LPAREN RPAREN block
    (35) method_decl -> . modifier VOID ID LPAREN RPAREN block
    (36) method_decl -> . modifier type ID LPAREN formals RPAREN block
    (37) method_decl -> . modifier VOID ID LPAREN formals RPAREN block
    (38) constructor_decl -> . modifier ID LPAREN RPAREN block
    (39) constructor_decl -> . modifier ID LPAREN formals RPAREN block
    (18) modifier -> . PUBLIC STATIC
    (19) modifier -> . PRIVATE STATIC
    (20) modifier -> . PUBLIC
    (21) modifier -> . PRIVATE
    (22) modifier -> . STATIC
    (23) modifier -> . empty

  ! reduce/reduce conflict for RBRACE resolved using rule 1 (empty -> .)
    RBRACE          reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    PUBLIC          shift and go to state 15
    PRIVATE         shift and go to state 17
    STATIC          shift and go to state 16

  ! RBRACE          [ reduce using rule 9 (class_body_decl -> constructor_decl .) ]

    constructor_decl               shift and go to state 25
    class_body_more                shift and go to state 27
    empty                          shift and go to state 23
    field_decl                     shift and go to state 21
    method_decl                    shift and go to state 24
    modifier                       shift and go to state 14

state 14

    (17) field_decl -> modifier . var_decl
    (34) method_decl -> modifier . type ID LPAREN RPAREN block
    (35) method_decl -> modifier . VOID ID LPAREN RPAREN block
    (36) method_decl -> modifier . type ID LPAREN formals RPAREN block
    (37) method_decl -> modifier . VOID ID LPAREN formals RPAREN block
    (38) constructor_decl -> modifier . ID LPAREN RPAREN block
    (39) constructor_decl -> modifier . ID LPAREN formals RPAREN block
    (24) var_decl -> . type variables
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . BOOLEAN
    (28) type -> . VOID
    (29) type -> . ID

    VOID            shift and go to state 31
    ID              shift and go to state 30
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34

    var_decl                       shift and go to state 28
    type                           shift and go to state 29

state 15

    (18) modifier -> PUBLIC . STATIC
    (20) modifier -> PUBLIC .

    STATIC          shift and go to state 35
    VOID            reduce using rule 20 (modifier -> PUBLIC .)
    ID              reduce using rule 20 (modifier -> PUBLIC .)
    INT             reduce using rule 20 (modifier -> PUBLIC .)
    FLOAT           reduce using rule 20 (modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 20 (modifier -> PUBLIC .)


state 16

    (22) modifier -> STATIC .

    VOID            reduce using rule 22 (modifier -> STATIC .)
    ID              reduce using rule 22 (modifier -> STATIC .)
    INT             reduce using rule 22 (modifier -> STATIC .)
    FLOAT           reduce using rule 22 (modifier -> STATIC .)
    BOOLEAN         reduce using rule 22 (modifier -> STATIC .)


state 17

    (19) modifier -> PRIVATE . STATIC
    (21) modifier -> PRIVATE .

    STATIC          shift and go to state 36
    VOID            reduce using rule 21 (modifier -> PRIVATE .)
    ID              reduce using rule 21 (modifier -> PRIVATE .)
    INT             reduce using rule 21 (modifier -> PRIVATE .)
    FLOAT           reduce using rule 21 (modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 21 (modifier -> PRIVATE .)


state 18

    (23) modifier -> empty .

    VOID            reduce using rule 23 (modifier -> empty .)
    ID              reduce using rule 23 (modifier -> empty .)
    INT             reduce using rule 23 (modifier -> empty .)
    FLOAT           reduce using rule 23 (modifier -> empty .)
    BOOLEAN         reduce using rule 23 (modifier -> empty .)


state 19

    (5) class_decl -> CLASS ID EXTENDS ID LBRACE . class_body_decl RBRACE
    (7) class_body_decl -> . field_decl
    (8) class_body_decl -> . method_decl
    (9) class_body_decl -> . constructor_decl
    (10) class_body_decl -> . field_decl class_body_more
    (11) class_body_decl -> . method_decl class_body_more
    (12) class_body_decl -> . constructor_decl class_body_more
    (17) field_decl -> . modifier var_decl
    (34) method_decl -> . modifier type ID LPAREN RPAREN block
    (35) method_decl -> . modifier VOID ID LPAREN RPAREN block
    (36) method_decl -> . modifier type ID LPAREN formals RPAREN block
    (37) method_decl -> . modifier VOID ID LPAREN formals RPAREN block
    (38) constructor_decl -> . modifier ID LPAREN RPAREN block
    (39) constructor_decl -> . modifier ID LPAREN formals RPAREN block
    (18) modifier -> . PUBLIC STATIC
    (19) modifier -> . PRIVATE STATIC
    (20) modifier -> . PUBLIC
    (21) modifier -> . PRIVATE
    (22) modifier -> . STATIC
    (23) modifier -> . empty
    (1) empty -> .

    PUBLIC          shift and go to state 15
    PRIVATE         shift and go to state 17
    STATIC          shift and go to state 16
    VOID            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)

    class_body_decl                shift and go to state 37
    field_decl                     shift and go to state 11
    method_decl                    shift and go to state 12
    constructor_decl               shift and go to state 13
    modifier                       shift and go to state 14
    empty                          shift and go to state 18

state 20

    (6) class_decl -> CLASS ID LBRACE class_body_decl RBRACE .

    CLASS           reduce using rule 6 (class_decl -> CLASS ID LBRACE class_body_decl RBRACE .)
    $end            reduce using rule 6 (class_decl -> CLASS ID LBRACE class_body_decl RBRACE .)


state 21

    (14) class_body_more -> field_decl . class_body_more
    (13) class_body_more -> . empty
    (14) class_body_more -> . field_decl class_body_more
    (15) class_body_more -> . method_decl class_body_more
    (16) class_body_more -> . constructor_decl class_body_more
    (1) empty -> .
    (17) field_decl -> . modifier var_decl
    (34) method_decl -> . modifier type ID LPAREN RPAREN block
    (35) method_decl -> . modifier VOID ID LPAREN RPAREN block
    (36) method_decl -> . modifier type ID LPAREN formals RPAREN block
    (37) method_decl -> . modifier VOID ID LPAREN formals RPAREN block
    (38) constructor_decl -> . modifier ID LPAREN RPAREN block
    (39) constructor_decl -> . modifier ID LPAREN formals RPAREN block
    (18) modifier -> . PUBLIC STATIC
    (19) modifier -> . PRIVATE STATIC
    (20) modifier -> . PUBLIC
    (21) modifier -> . PRIVATE
    (22) modifier -> . STATIC
    (23) modifier -> . empty

    RBRACE          reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    PUBLIC          shift and go to state 15
    PRIVATE         shift and go to state 17
    STATIC          shift and go to state 16

    field_decl                     shift and go to state 21
    class_body_more                shift and go to state 38
    empty                          shift and go to state 23
    method_decl                    shift and go to state 24
    constructor_decl               shift and go to state 25
    modifier                       shift and go to state 14

state 22

    (10) class_body_decl -> field_decl class_body_more .

    RBRACE          reduce using rule 10 (class_body_decl -> field_decl class_body_more .)


state 23

    (13) class_body_more -> empty .
    (23) modifier -> empty .

    RBRACE          reduce using rule 13 (class_body_more -> empty .)
    VOID            reduce using rule 23 (modifier -> empty .)
    ID              reduce using rule 23 (modifier -> empty .)
    INT             reduce using rule 23 (modifier -> empty .)
    FLOAT           reduce using rule 23 (modifier -> empty .)
    BOOLEAN         reduce using rule 23 (modifier -> empty .)


state 24

    (15) class_body_more -> method_decl . class_body_more
    (13) class_body_more -> . empty
    (14) class_body_more -> . field_decl class_body_more
    (15) class_body_more -> . method_decl class_body_more
    (16) class_body_more -> . constructor_decl class_body_more
    (1) empty -> .
    (17) field_decl -> . modifier var_decl
    (34) method_decl -> . modifier type ID LPAREN RPAREN block
    (35) method_decl -> . modifier VOID ID LPAREN RPAREN block
    (36) method_decl -> . modifier type ID LPAREN formals RPAREN block
    (37) method_decl -> . modifier VOID ID LPAREN formals RPAREN block
    (38) constructor_decl -> . modifier ID LPAREN RPAREN block
    (39) constructor_decl -> . modifier ID LPAREN formals RPAREN block
    (18) modifier -> . PUBLIC STATIC
    (19) modifier -> . PRIVATE STATIC
    (20) modifier -> . PUBLIC
    (21) modifier -> . PRIVATE
    (22) modifier -> . STATIC
    (23) modifier -> . empty

    RBRACE          reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    PUBLIC          shift and go to state 15
    PRIVATE         shift and go to state 17
    STATIC          shift and go to state 16

    method_decl                    shift and go to state 24
    class_body_more                shift and go to state 39
    empty                          shift and go to state 23
    field_decl                     shift and go to state 21
    constructor_decl               shift and go to state 25
    modifier                       shift and go to state 14

state 25

    (16) class_body_more -> constructor_decl . class_body_more
    (13) class_body_more -> . empty
    (14) class_body_more -> . field_decl class_body_more
    (15) class_body_more -> . method_decl class_body_more
    (16) class_body_more -> . constructor_decl class_body_more
    (1) empty -> .
    (17) field_decl -> . modifier var_decl
    (34) method_decl -> . modifier type ID LPAREN RPAREN block
    (35) method_decl -> . modifier VOID ID LPAREN RPAREN block
    (36) method_decl -> . modifier type ID LPAREN formals RPAREN block
    (37) method_decl -> . modifier VOID ID LPAREN formals RPAREN block
    (38) constructor_decl -> . modifier ID LPAREN RPAREN block
    (39) constructor_decl -> . modifier ID LPAREN formals RPAREN block
    (18) modifier -> . PUBLIC STATIC
    (19) modifier -> . PRIVATE STATIC
    (20) modifier -> . PUBLIC
    (21) modifier -> . PRIVATE
    (22) modifier -> . STATIC
    (23) modifier -> . empty

    RBRACE          reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    PUBLIC          shift and go to state 15
    PRIVATE         shift and go to state 17
    STATIC          shift and go to state 16

    constructor_decl               shift and go to state 25
    class_body_more                shift and go to state 40
    empty                          shift and go to state 23
    field_decl                     shift and go to state 21
    method_decl                    shift and go to state 24
    modifier                       shift and go to state 14

state 26

    (11) class_body_decl -> method_decl class_body_more .

    RBRACE          reduce using rule 11 (class_body_decl -> method_decl class_body_more .)


state 27

    (12) class_body_decl -> constructor_decl class_body_more .

    RBRACE          reduce using rule 12 (class_body_decl -> constructor_decl class_body_more .)


state 28

    (17) field_decl -> modifier var_decl .

    PUBLIC          reduce using rule 17 (field_decl -> modifier var_decl .)
    PRIVATE         reduce using rule 17 (field_decl -> modifier var_decl .)
    STATIC          reduce using rule 17 (field_decl -> modifier var_decl .)
    VOID            reduce using rule 17 (field_decl -> modifier var_decl .)
    ID              reduce using rule 17 (field_decl -> modifier var_decl .)
    INT             reduce using rule 17 (field_decl -> modifier var_decl .)
    FLOAT           reduce using rule 17 (field_decl -> modifier var_decl .)
    BOOLEAN         reduce using rule 17 (field_decl -> modifier var_decl .)
    RBRACE          reduce using rule 17 (field_decl -> modifier var_decl .)


state 29

    (34) method_decl -> modifier type . ID LPAREN RPAREN block
    (36) method_decl -> modifier type . ID LPAREN formals RPAREN block
    (24) var_decl -> type . variables
    (30) variables -> . variable
    (31) variables -> . variables COMMA variable
    (32) variables -> . empty
    (33) variable -> . ID
    (1) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 41
    COMMA           reduce using rule 1 (empty -> .)
    PUBLIC          reduce using rule 1 (empty -> .)
    PRIVATE         reduce using rule 1 (empty -> .)
    STATIC          reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    RBRACE          reduce using rule 1 (empty -> .)

  ! ID              [ reduce using rule 1 (empty -> .) ]

    variables                      shift and go to state 42
    variable                       shift and go to state 43
    empty                          shift and go to state 44

state 30

    (38) constructor_decl -> modifier ID . LPAREN RPAREN block
    (39) constructor_decl -> modifier ID . LPAREN formals RPAREN block
    (29) type -> ID .

    LPAREN          shift and go to state 45
    ID              reduce using rule 29 (type -> ID .)
    COMMA           reduce using rule 29 (type -> ID .)
    PUBLIC          reduce using rule 29 (type -> ID .)
    PRIVATE         reduce using rule 29 (type -> ID .)
    STATIC          reduce using rule 29 (type -> ID .)
    VOID            reduce using rule 29 (type -> ID .)
    INT             reduce using rule 29 (type -> ID .)
    FLOAT           reduce using rule 29 (type -> ID .)
    BOOLEAN         reduce using rule 29 (type -> ID .)
    RBRACE          reduce using rule 29 (type -> ID .)


state 31

    (35) method_decl -> modifier VOID . ID LPAREN RPAREN block
    (37) method_decl -> modifier VOID . ID LPAREN formals RPAREN block
    (28) type -> VOID .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 46
    COMMA           reduce using rule 28 (type -> VOID .)
    PUBLIC          reduce using rule 28 (type -> VOID .)
    PRIVATE         reduce using rule 28 (type -> VOID .)
    STATIC          reduce using rule 28 (type -> VOID .)
    VOID            reduce using rule 28 (type -> VOID .)
    INT             reduce using rule 28 (type -> VOID .)
    FLOAT           reduce using rule 28 (type -> VOID .)
    BOOLEAN         reduce using rule 28 (type -> VOID .)
    RBRACE          reduce using rule 28 (type -> VOID .)

  ! ID              [ reduce using rule 28 (type -> VOID .) ]


state 32

    (25) type -> INT .

    ID              reduce using rule 25 (type -> INT .)
    COMMA           reduce using rule 25 (type -> INT .)
    PUBLIC          reduce using rule 25 (type -> INT .)
    PRIVATE         reduce using rule 25 (type -> INT .)
    STATIC          reduce using rule 25 (type -> INT .)
    VOID            reduce using rule 25 (type -> INT .)
    INT             reduce using rule 25 (type -> INT .)
    FLOAT           reduce using rule 25 (type -> INT .)
    BOOLEAN         reduce using rule 25 (type -> INT .)
    RBRACE          reduce using rule 25 (type -> INT .)
    ELSE            reduce using rule 25 (type -> INT .)


state 33

    (26) type -> FLOAT .

    ID              reduce using rule 26 (type -> FLOAT .)
    COMMA           reduce using rule 26 (type -> FLOAT .)
    PUBLIC          reduce using rule 26 (type -> FLOAT .)
    PRIVATE         reduce using rule 26 (type -> FLOAT .)
    STATIC          reduce using rule 26 (type -> FLOAT .)
    VOID            reduce using rule 26 (type -> FLOAT .)
    INT             reduce using rule 26 (type -> FLOAT .)
    FLOAT           reduce using rule 26 (type -> FLOAT .)
    BOOLEAN         reduce using rule 26 (type -> FLOAT .)
    RBRACE          reduce using rule 26 (type -> FLOAT .)
    ELSE            reduce using rule 26 (type -> FLOAT .)


state 34

    (27) type -> BOOLEAN .

    ID              reduce using rule 27 (type -> BOOLEAN .)
    COMMA           reduce using rule 27 (type -> BOOLEAN .)
    PUBLIC          reduce using rule 27 (type -> BOOLEAN .)
    PRIVATE         reduce using rule 27 (type -> BOOLEAN .)
    STATIC          reduce using rule 27 (type -> BOOLEAN .)
    VOID            reduce using rule 27 (type -> BOOLEAN .)
    INT             reduce using rule 27 (type -> BOOLEAN .)
    FLOAT           reduce using rule 27 (type -> BOOLEAN .)
    BOOLEAN         reduce using rule 27 (type -> BOOLEAN .)
    RBRACE          reduce using rule 27 (type -> BOOLEAN .)
    ELSE            reduce using rule 27 (type -> BOOLEAN .)


state 35

    (18) modifier -> PUBLIC STATIC .

    VOID            reduce using rule 18 (modifier -> PUBLIC STATIC .)
    ID              reduce using rule 18 (modifier -> PUBLIC STATIC .)
    INT             reduce using rule 18 (modifier -> PUBLIC STATIC .)
    FLOAT           reduce using rule 18 (modifier -> PUBLIC STATIC .)
    BOOLEAN         reduce using rule 18 (modifier -> PUBLIC STATIC .)


state 36

    (19) modifier -> PRIVATE STATIC .

    VOID            reduce using rule 19 (modifier -> PRIVATE STATIC .)
    ID              reduce using rule 19 (modifier -> PRIVATE STATIC .)
    INT             reduce using rule 19 (modifier -> PRIVATE STATIC .)
    FLOAT           reduce using rule 19 (modifier -> PRIVATE STATIC .)
    BOOLEAN         reduce using rule 19 (modifier -> PRIVATE STATIC .)


state 37

    (5) class_decl -> CLASS ID EXTENDS ID LBRACE class_body_decl . RBRACE

    RBRACE          shift and go to state 47


state 38

    (14) class_body_more -> field_decl class_body_more .

    RBRACE          reduce using rule 14 (class_body_more -> field_decl class_body_more .)


state 39

    (15) class_body_more -> method_decl class_body_more .

    RBRACE          reduce using rule 15 (class_body_more -> method_decl class_body_more .)


state 40

    (16) class_body_more -> constructor_decl class_body_more .

    RBRACE          reduce using rule 16 (class_body_more -> constructor_decl class_body_more .)


state 41

    (34) method_decl -> modifier type ID . LPAREN RPAREN block
    (36) method_decl -> modifier type ID . LPAREN formals RPAREN block
    (33) variable -> ID .

    LPAREN          shift and go to state 48
    COMMA           reduce using rule 33 (variable -> ID .)
    PUBLIC          reduce using rule 33 (variable -> ID .)
    PRIVATE         reduce using rule 33 (variable -> ID .)
    STATIC          reduce using rule 33 (variable -> ID .)
    VOID            reduce using rule 33 (variable -> ID .)
    ID              reduce using rule 33 (variable -> ID .)
    INT             reduce using rule 33 (variable -> ID .)
    FLOAT           reduce using rule 33 (variable -> ID .)
    BOOLEAN         reduce using rule 33 (variable -> ID .)
    RBRACE          reduce using rule 33 (variable -> ID .)


state 42

    (24) var_decl -> type variables .
    (31) variables -> variables . COMMA variable

    PUBLIC          reduce using rule 24 (var_decl -> type variables .)
    PRIVATE         reduce using rule 24 (var_decl -> type variables .)
    STATIC          reduce using rule 24 (var_decl -> type variables .)
    VOID            reduce using rule 24 (var_decl -> type variables .)
    ID              reduce using rule 24 (var_decl -> type variables .)
    INT             reduce using rule 24 (var_decl -> type variables .)
    FLOAT           reduce using rule 24 (var_decl -> type variables .)
    BOOLEAN         reduce using rule 24 (var_decl -> type variables .)
    RBRACE          reduce using rule 24 (var_decl -> type variables .)
    ELSE            reduce using rule 24 (var_decl -> type variables .)
    COMMA           shift and go to state 49


state 43

    (30) variables -> variable .

    COMMA           reduce using rule 30 (variables -> variable .)
    PUBLIC          reduce using rule 30 (variables -> variable .)
    PRIVATE         reduce using rule 30 (variables -> variable .)
    STATIC          reduce using rule 30 (variables -> variable .)
    VOID            reduce using rule 30 (variables -> variable .)
    ID              reduce using rule 30 (variables -> variable .)
    INT             reduce using rule 30 (variables -> variable .)
    FLOAT           reduce using rule 30 (variables -> variable .)
    BOOLEAN         reduce using rule 30 (variables -> variable .)
    RBRACE          reduce using rule 30 (variables -> variable .)
    ELSE            reduce using rule 30 (variables -> variable .)


state 44

    (32) variables -> empty .

    COMMA           reduce using rule 32 (variables -> empty .)
    PUBLIC          reduce using rule 32 (variables -> empty .)
    PRIVATE         reduce using rule 32 (variables -> empty .)
    STATIC          reduce using rule 32 (variables -> empty .)
    VOID            reduce using rule 32 (variables -> empty .)
    ID              reduce using rule 32 (variables -> empty .)
    INT             reduce using rule 32 (variables -> empty .)
    FLOAT           reduce using rule 32 (variables -> empty .)
    BOOLEAN         reduce using rule 32 (variables -> empty .)
    RBRACE          reduce using rule 32 (variables -> empty .)
    ELSE            reduce using rule 32 (variables -> empty .)


state 45

    (38) constructor_decl -> modifier ID LPAREN . RPAREN block
    (39) constructor_decl -> modifier ID LPAREN . formals RPAREN block
    (40) formals -> . formals COMMA formal_param
    (41) formals -> . formal_param
    (42) formals -> . empty
    (43) formal_param -> . type variable
    (1) empty -> .
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . BOOLEAN
    (28) type -> . VOID
    (29) type -> . ID

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 51
    COMMA           reduce using rule 1 (empty -> .)
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    VOID            shift and go to state 56
    ID              shift and go to state 50

  ! RPAREN          [ reduce using rule 1 (empty -> .) ]

    formals                        shift and go to state 52
    formal_param                   shift and go to state 53
    empty                          shift and go to state 54
    type                           shift and go to state 55

state 46

    (35) method_decl -> modifier VOID ID . LPAREN RPAREN block
    (37) method_decl -> modifier VOID ID . LPAREN formals RPAREN block

    LPAREN          shift and go to state 57


state 47

    (5) class_decl -> CLASS ID EXTENDS ID LBRACE class_body_decl RBRACE .

    CLASS           reduce using rule 5 (class_decl -> CLASS ID EXTENDS ID LBRACE class_body_decl RBRACE .)
    $end            reduce using rule 5 (class_decl -> CLASS ID EXTENDS ID LBRACE class_body_decl RBRACE .)


state 48

    (34) method_decl -> modifier type ID LPAREN . RPAREN block
    (36) method_decl -> modifier type ID LPAREN . formals RPAREN block
    (40) formals -> . formals COMMA formal_param
    (41) formals -> . formal_param
    (42) formals -> . empty
    (43) formal_param -> . type variable
    (1) empty -> .
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . BOOLEAN
    (28) type -> . VOID
    (29) type -> . ID

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 58
    COMMA           reduce using rule 1 (empty -> .)
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    VOID            shift and go to state 56
    ID              shift and go to state 50

  ! RPAREN          [ reduce using rule 1 (empty -> .) ]

    type                           shift and go to state 55
    formals                        shift and go to state 59
    formal_param                   shift and go to state 53
    empty                          shift and go to state 54

state 49

    (31) variables -> variables COMMA . variable
    (33) variable -> . ID

    ID              shift and go to state 61

    variable                       shift and go to state 60

state 50

    (29) type -> ID .

    ID              reduce using rule 29 (type -> ID .)


state 51

    (38) constructor_decl -> modifier ID LPAREN RPAREN . block
    (44) block -> . LBRACE stmt RBRACE

    LBRACE          shift and go to state 63

    block                          shift and go to state 62

state 52

    (39) constructor_decl -> modifier ID LPAREN formals . RPAREN block
    (40) formals -> formals . COMMA formal_param

    RPAREN          shift and go to state 64
    COMMA           shift and go to state 65


state 53

    (41) formals -> formal_param .

    RPAREN          reduce using rule 41 (formals -> formal_param .)
    COMMA           reduce using rule 41 (formals -> formal_param .)


state 54

    (42) formals -> empty .

    RPAREN          reduce using rule 42 (formals -> empty .)
    COMMA           reduce using rule 42 (formals -> empty .)


state 55

    (43) formal_param -> type . variable
    (33) variable -> . ID

    ID              shift and go to state 61

    variable                       shift and go to state 66

state 56

    (28) type -> VOID .

    ID              reduce using rule 28 (type -> VOID .)
    COMMA           reduce using rule 28 (type -> VOID .)
    RBRACE          reduce using rule 28 (type -> VOID .)
    ELSE            reduce using rule 28 (type -> VOID .)


state 57

    (35) method_decl -> modifier VOID ID LPAREN . RPAREN block
    (37) method_decl -> modifier VOID ID LPAREN . formals RPAREN block
    (40) formals -> . formals COMMA formal_param
    (41) formals -> . formal_param
    (42) formals -> . empty
    (43) formal_param -> . type variable
    (1) empty -> .
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . BOOLEAN
    (28) type -> . VOID
    (29) type -> . ID

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 67
    COMMA           reduce using rule 1 (empty -> .)
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    VOID            shift and go to state 56
    ID              shift and go to state 50

  ! RPAREN          [ reduce using rule 1 (empty -> .) ]

    formals                        shift and go to state 68
    formal_param                   shift and go to state 53
    empty                          shift and go to state 54
    type                           shift and go to state 55

state 58

    (34) method_decl -> modifier type ID LPAREN RPAREN . block
    (44) block -> . LBRACE stmt RBRACE

    LBRACE          shift and go to state 63

    block                          shift and go to state 69

state 59

    (36) method_decl -> modifier type ID LPAREN formals . RPAREN block
    (40) formals -> formals . COMMA formal_param

    RPAREN          shift and go to state 70
    COMMA           shift and go to state 65


state 60

    (31) variables -> variables COMMA variable .

    COMMA           reduce using rule 31 (variables -> variables COMMA variable .)
    PUBLIC          reduce using rule 31 (variables -> variables COMMA variable .)
    PRIVATE         reduce using rule 31 (variables -> variables COMMA variable .)
    STATIC          reduce using rule 31 (variables -> variables COMMA variable .)
    VOID            reduce using rule 31 (variables -> variables COMMA variable .)
    ID              reduce using rule 31 (variables -> variables COMMA variable .)
    INT             reduce using rule 31 (variables -> variables COMMA variable .)
    FLOAT           reduce using rule 31 (variables -> variables COMMA variable .)
    BOOLEAN         reduce using rule 31 (variables -> variables COMMA variable .)
    RBRACE          reduce using rule 31 (variables -> variables COMMA variable .)
    ELSE            reduce using rule 31 (variables -> variables COMMA variable .)


state 61

    (33) variable -> ID .

    COMMA           reduce using rule 33 (variable -> ID .)
    PUBLIC          reduce using rule 33 (variable -> ID .)
    PRIVATE         reduce using rule 33 (variable -> ID .)
    STATIC          reduce using rule 33 (variable -> ID .)
    VOID            reduce using rule 33 (variable -> ID .)
    ID              reduce using rule 33 (variable -> ID .)
    INT             reduce using rule 33 (variable -> ID .)
    FLOAT           reduce using rule 33 (variable -> ID .)
    BOOLEAN         reduce using rule 33 (variable -> ID .)
    RBRACE          reduce using rule 33 (variable -> ID .)
    ELSE            reduce using rule 33 (variable -> ID .)
    RPAREN          reduce using rule 33 (variable -> ID .)


state 62

    (38) constructor_decl -> modifier ID LPAREN RPAREN block .

    PUBLIC          reduce using rule 38 (constructor_decl -> modifier ID LPAREN RPAREN block .)
    PRIVATE         reduce using rule 38 (constructor_decl -> modifier ID LPAREN RPAREN block .)
    STATIC          reduce using rule 38 (constructor_decl -> modifier ID LPAREN RPAREN block .)
    VOID            reduce using rule 38 (constructor_decl -> modifier ID LPAREN RPAREN block .)
    ID              reduce using rule 38 (constructor_decl -> modifier ID LPAREN RPAREN block .)
    INT             reduce using rule 38 (constructor_decl -> modifier ID LPAREN RPAREN block .)
    FLOAT           reduce using rule 38 (constructor_decl -> modifier ID LPAREN RPAREN block .)
    BOOLEAN         reduce using rule 38 (constructor_decl -> modifier ID LPAREN RPAREN block .)
    RBRACE          reduce using rule 38 (constructor_decl -> modifier ID LPAREN RPAREN block .)


state 63

    (44) block -> LBRACE . stmt RBRACE
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (47) stmt -> . WHILE LPAREN expr RPAREN stmt
    (48) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (49) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (50) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (51) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON RPAREN stmt
    (52) stmt -> . FOR LPAREN SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (53) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON RPAREN stmt
    (54) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON RPAREN stmt
    (55) stmt -> . FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt
    (56) stmt -> . RETURN SEMICOLON
    (57) stmt -> . RETURN expr SEMICOLON
    (58) stmt -> . stmt_expr SEMICOLON
    (59) stmt -> . BREAK SEMICOLON
    (60) stmt -> . CONTINUE SEMICOLON
    (61) stmt -> . block
    (62) stmt -> . var_decl
    (63) stmt -> . SEMICOLON
    (111) stmt_expr -> . assign
    (112) stmt_expr -> . method_invocation
    (44) block -> . LBRACE stmt RBRACE
    (24) var_decl -> . type variables
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . BOOLEAN
    (28) type -> . VOID
    (29) type -> . ID
    (81) lhs -> . field_access
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE

    IF              shift and go to state 72
    WHILE           shift and go to state 74
    FOR             shift and go to state 75
    RETURN          shift and go to state 78
    BREAK           shift and go to state 79
    CONTINUE        shift and go to state 80
    SEMICOLON       shift and go to state 77
    LBRACE          shift and go to state 63
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    VOID            shift and go to state 56
    ID              shift and go to state 90
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    stmt                           shift and go to state 71
    stmt_expr                      shift and go to state 76
    block                          shift and go to state 81
    var_decl                       shift and go to state 82
    assign                         shift and go to state 83
    method_invocation              shift and go to state 84
    type                           shift and go to state 85
    lhs                            shift and go to state 86
    field_access                   shift and go to state 89
    primary                        shift and go to state 91
    literal                        shift and go to state 92

state 64

    (39) constructor_decl -> modifier ID LPAREN formals RPAREN . block
    (44) block -> . LBRACE stmt RBRACE

    LBRACE          shift and go to state 63

    block                          shift and go to state 102

state 65

    (40) formals -> formals COMMA . formal_param
    (43) formal_param -> . type variable
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . BOOLEAN
    (28) type -> . VOID
    (29) type -> . ID

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    VOID            shift and go to state 56
    ID              shift and go to state 50

    formal_param                   shift and go to state 103
    type                           shift and go to state 55

state 66

    (43) formal_param -> type variable .

    RPAREN          reduce using rule 43 (formal_param -> type variable .)
    COMMA           reduce using rule 43 (formal_param -> type variable .)


state 67

    (35) method_decl -> modifier VOID ID LPAREN RPAREN . block
    (44) block -> . LBRACE stmt RBRACE

    LBRACE          shift and go to state 63

    block                          shift and go to state 104

state 68

    (37) method_decl -> modifier VOID ID LPAREN formals . RPAREN block
    (40) formals -> formals . COMMA formal_param

    RPAREN          shift and go to state 105
    COMMA           shift and go to state 65


state 69

    (34) method_decl -> modifier type ID LPAREN RPAREN block .

    PUBLIC          reduce using rule 34 (method_decl -> modifier type ID LPAREN RPAREN block .)
    PRIVATE         reduce using rule 34 (method_decl -> modifier type ID LPAREN RPAREN block .)
    STATIC          reduce using rule 34 (method_decl -> modifier type ID LPAREN RPAREN block .)
    VOID            reduce using rule 34 (method_decl -> modifier type ID LPAREN RPAREN block .)
    ID              reduce using rule 34 (method_decl -> modifier type ID LPAREN RPAREN block .)
    INT             reduce using rule 34 (method_decl -> modifier type ID LPAREN RPAREN block .)
    FLOAT           reduce using rule 34 (method_decl -> modifier type ID LPAREN RPAREN block .)
    BOOLEAN         reduce using rule 34 (method_decl -> modifier type ID LPAREN RPAREN block .)
    RBRACE          reduce using rule 34 (method_decl -> modifier type ID LPAREN RPAREN block .)


state 70

    (36) method_decl -> modifier type ID LPAREN formals RPAREN . block
    (44) block -> . LBRACE stmt RBRACE

    LBRACE          shift and go to state 63

    block                          shift and go to state 106

state 71

    (44) block -> LBRACE stmt . RBRACE

    RBRACE          shift and go to state 107


state 72

    (45) stmt -> IF . LPAREN expr RPAREN stmt
    (46) stmt -> IF . LPAREN expr RPAREN stmt ELSE stmt

    LPAREN          shift and go to state 108


state 73

    (73) primary -> LPAREN . expr RPAREN
    (86) expr -> . primary
    (87) expr -> . assign
    (88) expr -> . expr arith_op expr
    (89) expr -> . expr bool_op expr
    (90) expr -> . unary_op expr
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (108) unary_op -> . PLUS
    (109) unary_op -> . MINUS
    (110) unary_op -> . NOT
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE
    (81) lhs -> . field_access
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID

    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    NOT             shift and go to state 118
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101
    ID              shift and go to state 113

    expr                           shift and go to state 109
    primary                        shift and go to state 110
    assign                         shift and go to state 111
    unary_op                       shift and go to state 112
    literal                        shift and go to state 92
    lhs                            shift and go to state 114
    method_invocation              shift and go to state 115
    field_access                   shift and go to state 119

state 74

    (47) stmt -> WHILE . LPAREN expr RPAREN stmt

    LPAREN          shift and go to state 120


state 75

    (48) stmt -> FOR . LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (49) stmt -> FOR . LPAREN SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (50) stmt -> FOR . LPAREN stmt_expr SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (51) stmt -> FOR . LPAREN stmt_expr SEMICOLON expr SEMICOLON RPAREN stmt
    (52) stmt -> FOR . LPAREN SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (53) stmt -> FOR . LPAREN stmt_expr SEMICOLON SEMICOLON RPAREN stmt
    (54) stmt -> FOR . LPAREN SEMICOLON expr SEMICOLON RPAREN stmt
    (55) stmt -> FOR . LPAREN SEMICOLON SEMICOLON RPAREN stmt

    LPAREN          shift and go to state 121


state 76

    (58) stmt -> stmt_expr . SEMICOLON

    SEMICOLON       shift and go to state 122


state 77

    (63) stmt -> SEMICOLON .

    RBRACE          reduce using rule 63 (stmt -> SEMICOLON .)
    ELSE            reduce using rule 63 (stmt -> SEMICOLON .)


state 78

    (56) stmt -> RETURN . SEMICOLON
    (57) stmt -> RETURN . expr SEMICOLON
    (86) expr -> . primary
    (87) expr -> . assign
    (88) expr -> . expr arith_op expr
    (89) expr -> . expr bool_op expr
    (90) expr -> . unary_op expr
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (108) unary_op -> . PLUS
    (109) unary_op -> . MINUS
    (110) unary_op -> . NOT
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE
    (81) lhs -> . field_access
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID

    SEMICOLON       shift and go to state 123
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    NOT             shift and go to state 118
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101
    ID              shift and go to state 113

    expr                           shift and go to state 124
    primary                        shift and go to state 110
    assign                         shift and go to state 111
    unary_op                       shift and go to state 112
    literal                        shift and go to state 92
    lhs                            shift and go to state 114
    method_invocation              shift and go to state 115
    field_access                   shift and go to state 119

state 79

    (59) stmt -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 125


state 80

    (60) stmt -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 126


state 81

    (61) stmt -> block .

    RBRACE          reduce using rule 61 (stmt -> block .)
    ELSE            reduce using rule 61 (stmt -> block .)


state 82

    (62) stmt -> var_decl .

    RBRACE          reduce using rule 62 (stmt -> var_decl .)
    ELSE            reduce using rule 62 (stmt -> var_decl .)


state 83

    (111) stmt_expr -> assign .

    SEMICOLON       reduce using rule 111 (stmt_expr -> assign .)
    RPAREN          reduce using rule 111 (stmt_expr -> assign .)


state 84

    (112) stmt_expr -> method_invocation .
    (77) primary -> method_invocation .

    SEMICOLON       reduce using rule 112 (stmt_expr -> method_invocation .)
    RPAREN          reduce using rule 112 (stmt_expr -> method_invocation .)
    PERIOD          reduce using rule 77 (primary -> method_invocation .)


state 85

    (24) var_decl -> type . variables
    (30) variables -> . variable
    (31) variables -> . variables COMMA variable
    (32) variables -> . empty
    (33) variable -> . ID
    (1) empty -> .

    ID              shift and go to state 61
    COMMA           reduce using rule 1 (empty -> .)
    RBRACE          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)

    variables                      shift and go to state 42
    variable                       shift and go to state 43
    empty                          shift and go to state 44

state 86

    (91) assign -> lhs . EQUALS expr
    (92) assign -> lhs . PLUSPLUS
    (94) assign -> lhs . MINUSMINUS
    (76) primary -> lhs .

    EQUALS          shift and go to state 127
    PLUSPLUS        shift and go to state 128
    MINUSMINUS      shift and go to state 129
    PERIOD          reduce using rule 76 (primary -> lhs .)


state 87

    (93) assign -> PLUSPLUS . lhs
    (81) lhs -> . field_access
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN

    ID              shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    lhs                            shift and go to state 130
    field_access                   shift and go to state 119
    primary                        shift and go to state 91
    literal                        shift and go to state 92
    method_invocation              shift and go to state 115

state 88

    (95) assign -> MINUSMINUS . lhs
    (81) lhs -> . field_access
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN

    ID              shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    lhs                            shift and go to state 131
    field_access                   shift and go to state 119
    primary                        shift and go to state 91
    literal                        shift and go to state 92
    method_invocation              shift and go to state 115

state 89

    (84) method_invocation -> field_access . LPAREN RPAREN
    (85) method_invocation -> field_access . LPAREN arguments RPAREN
    (81) lhs -> field_access .

    LPAREN          shift and go to state 132
    EQUALS          reduce using rule 81 (lhs -> field_access .)
    PLUSPLUS        reduce using rule 81 (lhs -> field_access .)
    MINUSMINUS      reduce using rule 81 (lhs -> field_access .)
    PERIOD          reduce using rule 81 (lhs -> field_access .)


state 90

    (29) type -> ID .
    (83) field_access -> ID .

    ID              reduce using rule 29 (type -> ID .)
    COMMA           reduce using rule 29 (type -> ID .)
    RBRACE          reduce using rule 29 (type -> ID .)
    ELSE            reduce using rule 29 (type -> ID .)
    LPAREN          reduce using rule 83 (field_access -> ID .)
    EQUALS          reduce using rule 83 (field_access -> ID .)
    PLUSPLUS        reduce using rule 83 (field_access -> ID .)
    MINUSMINUS      reduce using rule 83 (field_access -> ID .)
    PERIOD          reduce using rule 83 (field_access -> ID .)


state 91

    (82) field_access -> primary . PERIOD ID

    PERIOD          shift and go to state 133


state 92

    (70) primary -> literal .

    PERIOD          reduce using rule 70 (primary -> literal .)
    RPAREN          reduce using rule 70 (primary -> literal .)
    PLUS            reduce using rule 70 (primary -> literal .)
    MINUS           reduce using rule 70 (primary -> literal .)
    TIMES           reduce using rule 70 (primary -> literal .)
    DIVIDE          reduce using rule 70 (primary -> literal .)
    AND             reduce using rule 70 (primary -> literal .)
    OR              reduce using rule 70 (primary -> literal .)
    EQUALSCOMPARE   reduce using rule 70 (primary -> literal .)
    NOTEQUALS       reduce using rule 70 (primary -> literal .)
    LESSTHAN        reduce using rule 70 (primary -> literal .)
    GREATERTHAN     reduce using rule 70 (primary -> literal .)
    LESSTHANOREQ    reduce using rule 70 (primary -> literal .)
    GREATERTHANOREQ reduce using rule 70 (primary -> literal .)
    SEMICOLON       reduce using rule 70 (primary -> literal .)
    COMMA           reduce using rule 70 (primary -> literal .)


state 93

    (71) primary -> THIS .

    PERIOD          reduce using rule 71 (primary -> THIS .)
    RPAREN          reduce using rule 71 (primary -> THIS .)
    PLUS            reduce using rule 71 (primary -> THIS .)
    MINUS           reduce using rule 71 (primary -> THIS .)
    TIMES           reduce using rule 71 (primary -> THIS .)
    DIVIDE          reduce using rule 71 (primary -> THIS .)
    AND             reduce using rule 71 (primary -> THIS .)
    OR              reduce using rule 71 (primary -> THIS .)
    EQUALSCOMPARE   reduce using rule 71 (primary -> THIS .)
    NOTEQUALS       reduce using rule 71 (primary -> THIS .)
    LESSTHAN        reduce using rule 71 (primary -> THIS .)
    GREATERTHAN     reduce using rule 71 (primary -> THIS .)
    LESSTHANOREQ    reduce using rule 71 (primary -> THIS .)
    GREATERTHANOREQ reduce using rule 71 (primary -> THIS .)
    SEMICOLON       reduce using rule 71 (primary -> THIS .)
    COMMA           reduce using rule 71 (primary -> THIS .)


state 94

    (72) primary -> SUPER .

    PERIOD          reduce using rule 72 (primary -> SUPER .)
    RPAREN          reduce using rule 72 (primary -> SUPER .)
    PLUS            reduce using rule 72 (primary -> SUPER .)
    MINUS           reduce using rule 72 (primary -> SUPER .)
    TIMES           reduce using rule 72 (primary -> SUPER .)
    DIVIDE          reduce using rule 72 (primary -> SUPER .)
    AND             reduce using rule 72 (primary -> SUPER .)
    OR              reduce using rule 72 (primary -> SUPER .)
    EQUALSCOMPARE   reduce using rule 72 (primary -> SUPER .)
    NOTEQUALS       reduce using rule 72 (primary -> SUPER .)
    LESSTHAN        reduce using rule 72 (primary -> SUPER .)
    GREATERTHAN     reduce using rule 72 (primary -> SUPER .)
    LESSTHANOREQ    reduce using rule 72 (primary -> SUPER .)
    GREATERTHANOREQ reduce using rule 72 (primary -> SUPER .)
    SEMICOLON       reduce using rule 72 (primary -> SUPER .)
    COMMA           reduce using rule 72 (primary -> SUPER .)


state 95

    (74) primary -> NEW . ID LPAREN arguments RPAREN
    (75) primary -> NEW . ID LPAREN RPAREN

    ID              shift and go to state 134


state 96

    (64) literal -> INTCONST .

    PERIOD          reduce using rule 64 (literal -> INTCONST .)
    RPAREN          reduce using rule 64 (literal -> INTCONST .)
    PLUS            reduce using rule 64 (literal -> INTCONST .)
    MINUS           reduce using rule 64 (literal -> INTCONST .)
    TIMES           reduce using rule 64 (literal -> INTCONST .)
    DIVIDE          reduce using rule 64 (literal -> INTCONST .)
    AND             reduce using rule 64 (literal -> INTCONST .)
    OR              reduce using rule 64 (literal -> INTCONST .)
    EQUALSCOMPARE   reduce using rule 64 (literal -> INTCONST .)
    NOTEQUALS       reduce using rule 64 (literal -> INTCONST .)
    LESSTHAN        reduce using rule 64 (literal -> INTCONST .)
    GREATERTHAN     reduce using rule 64 (literal -> INTCONST .)
    LESSTHANOREQ    reduce using rule 64 (literal -> INTCONST .)
    GREATERTHANOREQ reduce using rule 64 (literal -> INTCONST .)
    SEMICOLON       reduce using rule 64 (literal -> INTCONST .)
    COMMA           reduce using rule 64 (literal -> INTCONST .)


state 97

    (65) literal -> FLOATCONST .

    PERIOD          reduce using rule 65 (literal -> FLOATCONST .)
    RPAREN          reduce using rule 65 (literal -> FLOATCONST .)
    PLUS            reduce using rule 65 (literal -> FLOATCONST .)
    MINUS           reduce using rule 65 (literal -> FLOATCONST .)
    TIMES           reduce using rule 65 (literal -> FLOATCONST .)
    DIVIDE          reduce using rule 65 (literal -> FLOATCONST .)
    AND             reduce using rule 65 (literal -> FLOATCONST .)
    OR              reduce using rule 65 (literal -> FLOATCONST .)
    EQUALSCOMPARE   reduce using rule 65 (literal -> FLOATCONST .)
    NOTEQUALS       reduce using rule 65 (literal -> FLOATCONST .)
    LESSTHAN        reduce using rule 65 (literal -> FLOATCONST .)
    GREATERTHAN     reduce using rule 65 (literal -> FLOATCONST .)
    LESSTHANOREQ    reduce using rule 65 (literal -> FLOATCONST .)
    GREATERTHANOREQ reduce using rule 65 (literal -> FLOATCONST .)
    SEMICOLON       reduce using rule 65 (literal -> FLOATCONST .)
    COMMA           reduce using rule 65 (literal -> FLOATCONST .)


state 98

    (66) literal -> STRINGCONST .

    PERIOD          reduce using rule 66 (literal -> STRINGCONST .)
    RPAREN          reduce using rule 66 (literal -> STRINGCONST .)
    PLUS            reduce using rule 66 (literal -> STRINGCONST .)
    MINUS           reduce using rule 66 (literal -> STRINGCONST .)
    TIMES           reduce using rule 66 (literal -> STRINGCONST .)
    DIVIDE          reduce using rule 66 (literal -> STRINGCONST .)
    AND             reduce using rule 66 (literal -> STRINGCONST .)
    OR              reduce using rule 66 (literal -> STRINGCONST .)
    EQUALSCOMPARE   reduce using rule 66 (literal -> STRINGCONST .)
    NOTEQUALS       reduce using rule 66 (literal -> STRINGCONST .)
    LESSTHAN        reduce using rule 66 (literal -> STRINGCONST .)
    GREATERTHAN     reduce using rule 66 (literal -> STRINGCONST .)
    LESSTHANOREQ    reduce using rule 66 (literal -> STRINGCONST .)
    GREATERTHANOREQ reduce using rule 66 (literal -> STRINGCONST .)
    SEMICOLON       reduce using rule 66 (literal -> STRINGCONST .)
    COMMA           reduce using rule 66 (literal -> STRINGCONST .)


state 99

    (67) literal -> NULL .

    PERIOD          reduce using rule 67 (literal -> NULL .)
    RPAREN          reduce using rule 67 (literal -> NULL .)
    PLUS            reduce using rule 67 (literal -> NULL .)
    MINUS           reduce using rule 67 (literal -> NULL .)
    TIMES           reduce using rule 67 (literal -> NULL .)
    DIVIDE          reduce using rule 67 (literal -> NULL .)
    AND             reduce using rule 67 (literal -> NULL .)
    OR              reduce using rule 67 (literal -> NULL .)
    EQUALSCOMPARE   reduce using rule 67 (literal -> NULL .)
    NOTEQUALS       reduce using rule 67 (literal -> NULL .)
    LESSTHAN        reduce using rule 67 (literal -> NULL .)
    GREATERTHAN     reduce using rule 67 (literal -> NULL .)
    LESSTHANOREQ    reduce using rule 67 (literal -> NULL .)
    GREATERTHANOREQ reduce using rule 67 (literal -> NULL .)
    SEMICOLON       reduce using rule 67 (literal -> NULL .)
    COMMA           reduce using rule 67 (literal -> NULL .)


state 100

    (68) literal -> TRUE .

    PERIOD          reduce using rule 68 (literal -> TRUE .)
    RPAREN          reduce using rule 68 (literal -> TRUE .)
    PLUS            reduce using rule 68 (literal -> TRUE .)
    MINUS           reduce using rule 68 (literal -> TRUE .)
    TIMES           reduce using rule 68 (literal -> TRUE .)
    DIVIDE          reduce using rule 68 (literal -> TRUE .)
    AND             reduce using rule 68 (literal -> TRUE .)
    OR              reduce using rule 68 (literal -> TRUE .)
    EQUALSCOMPARE   reduce using rule 68 (literal -> TRUE .)
    NOTEQUALS       reduce using rule 68 (literal -> TRUE .)
    LESSTHAN        reduce using rule 68 (literal -> TRUE .)
    GREATERTHAN     reduce using rule 68 (literal -> TRUE .)
    LESSTHANOREQ    reduce using rule 68 (literal -> TRUE .)
    GREATERTHANOREQ reduce using rule 68 (literal -> TRUE .)
    SEMICOLON       reduce using rule 68 (literal -> TRUE .)
    COMMA           reduce using rule 68 (literal -> TRUE .)


state 101

    (69) literal -> FALSE .

    PERIOD          reduce using rule 69 (literal -> FALSE .)
    RPAREN          reduce using rule 69 (literal -> FALSE .)
    PLUS            reduce using rule 69 (literal -> FALSE .)
    MINUS           reduce using rule 69 (literal -> FALSE .)
    TIMES           reduce using rule 69 (literal -> FALSE .)
    DIVIDE          reduce using rule 69 (literal -> FALSE .)
    AND             reduce using rule 69 (literal -> FALSE .)
    OR              reduce using rule 69 (literal -> FALSE .)
    EQUALSCOMPARE   reduce using rule 69 (literal -> FALSE .)
    NOTEQUALS       reduce using rule 69 (literal -> FALSE .)
    LESSTHAN        reduce using rule 69 (literal -> FALSE .)
    GREATERTHAN     reduce using rule 69 (literal -> FALSE .)
    LESSTHANOREQ    reduce using rule 69 (literal -> FALSE .)
    GREATERTHANOREQ reduce using rule 69 (literal -> FALSE .)
    SEMICOLON       reduce using rule 69 (literal -> FALSE .)
    COMMA           reduce using rule 69 (literal -> FALSE .)


state 102

    (39) constructor_decl -> modifier ID LPAREN formals RPAREN block .

    PUBLIC          reduce using rule 39 (constructor_decl -> modifier ID LPAREN formals RPAREN block .)
    PRIVATE         reduce using rule 39 (constructor_decl -> modifier ID LPAREN formals RPAREN block .)
    STATIC          reduce using rule 39 (constructor_decl -> modifier ID LPAREN formals RPAREN block .)
    VOID            reduce using rule 39 (constructor_decl -> modifier ID LPAREN formals RPAREN block .)
    ID              reduce using rule 39 (constructor_decl -> modifier ID LPAREN formals RPAREN block .)
    INT             reduce using rule 39 (constructor_decl -> modifier ID LPAREN formals RPAREN block .)
    FLOAT           reduce using rule 39 (constructor_decl -> modifier ID LPAREN formals RPAREN block .)
    BOOLEAN         reduce using rule 39 (constructor_decl -> modifier ID LPAREN formals RPAREN block .)
    RBRACE          reduce using rule 39 (constructor_decl -> modifier ID LPAREN formals RPAREN block .)


state 103

    (40) formals -> formals COMMA formal_param .

    RPAREN          reduce using rule 40 (formals -> formals COMMA formal_param .)
    COMMA           reduce using rule 40 (formals -> formals COMMA formal_param .)


state 104

    (35) method_decl -> modifier VOID ID LPAREN RPAREN block .

    PUBLIC          reduce using rule 35 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    PRIVATE         reduce using rule 35 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    STATIC          reduce using rule 35 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    VOID            reduce using rule 35 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    ID              reduce using rule 35 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    INT             reduce using rule 35 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    FLOAT           reduce using rule 35 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    BOOLEAN         reduce using rule 35 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    RBRACE          reduce using rule 35 (method_decl -> modifier VOID ID LPAREN RPAREN block .)


state 105

    (37) method_decl -> modifier VOID ID LPAREN formals RPAREN . block
    (44) block -> . LBRACE stmt RBRACE

    LBRACE          shift and go to state 63

    block                          shift and go to state 135

state 106

    (36) method_decl -> modifier type ID LPAREN formals RPAREN block .

    PUBLIC          reduce using rule 36 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    PRIVATE         reduce using rule 36 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    STATIC          reduce using rule 36 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    VOID            reduce using rule 36 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    ID              reduce using rule 36 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    INT             reduce using rule 36 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    FLOAT           reduce using rule 36 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    BOOLEAN         reduce using rule 36 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    RBRACE          reduce using rule 36 (method_decl -> modifier type ID LPAREN formals RPAREN block .)


state 107

    (44) block -> LBRACE stmt RBRACE .

    PUBLIC          reduce using rule 44 (block -> LBRACE stmt RBRACE .)
    PRIVATE         reduce using rule 44 (block -> LBRACE stmt RBRACE .)
    STATIC          reduce using rule 44 (block -> LBRACE stmt RBRACE .)
    VOID            reduce using rule 44 (block -> LBRACE stmt RBRACE .)
    ID              reduce using rule 44 (block -> LBRACE stmt RBRACE .)
    INT             reduce using rule 44 (block -> LBRACE stmt RBRACE .)
    FLOAT           reduce using rule 44 (block -> LBRACE stmt RBRACE .)
    BOOLEAN         reduce using rule 44 (block -> LBRACE stmt RBRACE .)
    RBRACE          reduce using rule 44 (block -> LBRACE stmt RBRACE .)
    ELSE            reduce using rule 44 (block -> LBRACE stmt RBRACE .)


state 108

    (45) stmt -> IF LPAREN . expr RPAREN stmt
    (46) stmt -> IF LPAREN . expr RPAREN stmt ELSE stmt
    (86) expr -> . primary
    (87) expr -> . assign
    (88) expr -> . expr arith_op expr
    (89) expr -> . expr bool_op expr
    (90) expr -> . unary_op expr
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (108) unary_op -> . PLUS
    (109) unary_op -> . MINUS
    (110) unary_op -> . NOT
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE
    (81) lhs -> . field_access
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID

    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    NOT             shift and go to state 118
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101
    ID              shift and go to state 113

    expr                           shift and go to state 136
    primary                        shift and go to state 110
    assign                         shift and go to state 111
    unary_op                       shift and go to state 112
    literal                        shift and go to state 92
    lhs                            shift and go to state 114
    method_invocation              shift and go to state 115
    field_access                   shift and go to state 119

state 109

    (73) primary -> LPAREN expr . RPAREN
    (88) expr -> expr . arith_op expr
    (89) expr -> expr . bool_op expr
    (96) arith_op -> . PLUS
    (97) arith_op -> . MINUS
    (98) arith_op -> . TIMES
    (99) arith_op -> . DIVIDE
    (100) bool_op -> . AND
    (101) bool_op -> . OR
    (102) bool_op -> . EQUALSCOMPARE
    (103) bool_op -> . NOTEQUALS
    (104) bool_op -> . LESSTHAN
    (105) bool_op -> . GREATERTHAN
    (106) bool_op -> . LESSTHANOREQ
    (107) bool_op -> . GREATERTHANOREQ

    RPAREN          shift and go to state 137
    PLUS            shift and go to state 140
    MINUS           shift and go to state 141
    TIMES           shift and go to state 142
    DIVIDE          shift and go to state 143
    AND             shift and go to state 144
    OR              shift and go to state 145
    EQUALSCOMPARE   shift and go to state 146
    NOTEQUALS       shift and go to state 147
    LESSTHAN        shift and go to state 148
    GREATERTHAN     shift and go to state 149
    LESSTHANOREQ    shift and go to state 150
    GREATERTHANOREQ shift and go to state 151

    arith_op                       shift and go to state 138
    bool_op                        shift and go to state 139

state 110

    (86) expr -> primary .
    (82) field_access -> primary . PERIOD ID

    RPAREN          reduce using rule 86 (expr -> primary .)
    PLUS            reduce using rule 86 (expr -> primary .)
    MINUS           reduce using rule 86 (expr -> primary .)
    TIMES           reduce using rule 86 (expr -> primary .)
    DIVIDE          reduce using rule 86 (expr -> primary .)
    AND             reduce using rule 86 (expr -> primary .)
    OR              reduce using rule 86 (expr -> primary .)
    EQUALSCOMPARE   reduce using rule 86 (expr -> primary .)
    NOTEQUALS       reduce using rule 86 (expr -> primary .)
    LESSTHAN        reduce using rule 86 (expr -> primary .)
    GREATERTHAN     reduce using rule 86 (expr -> primary .)
    LESSTHANOREQ    reduce using rule 86 (expr -> primary .)
    GREATERTHANOREQ reduce using rule 86 (expr -> primary .)
    SEMICOLON       reduce using rule 86 (expr -> primary .)
    COMMA           reduce using rule 86 (expr -> primary .)
    PERIOD          shift and go to state 133


state 111

    (87) expr -> assign .

    RPAREN          reduce using rule 87 (expr -> assign .)
    PLUS            reduce using rule 87 (expr -> assign .)
    MINUS           reduce using rule 87 (expr -> assign .)
    TIMES           reduce using rule 87 (expr -> assign .)
    DIVIDE          reduce using rule 87 (expr -> assign .)
    AND             reduce using rule 87 (expr -> assign .)
    OR              reduce using rule 87 (expr -> assign .)
    EQUALSCOMPARE   reduce using rule 87 (expr -> assign .)
    NOTEQUALS       reduce using rule 87 (expr -> assign .)
    LESSTHAN        reduce using rule 87 (expr -> assign .)
    GREATERTHAN     reduce using rule 87 (expr -> assign .)
    LESSTHANOREQ    reduce using rule 87 (expr -> assign .)
    GREATERTHANOREQ reduce using rule 87 (expr -> assign .)
    SEMICOLON       reduce using rule 87 (expr -> assign .)
    COMMA           reduce using rule 87 (expr -> assign .)


state 112

    (90) expr -> unary_op . expr
    (86) expr -> . primary
    (87) expr -> . assign
    (88) expr -> . expr arith_op expr
    (89) expr -> . expr bool_op expr
    (90) expr -> . unary_op expr
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (108) unary_op -> . PLUS
    (109) unary_op -> . MINUS
    (110) unary_op -> . NOT
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE
    (81) lhs -> . field_access
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID

    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    NOT             shift and go to state 118
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101
    ID              shift and go to state 113

    unary_op                       shift and go to state 112
    expr                           shift and go to state 152
    primary                        shift and go to state 110
    assign                         shift and go to state 111
    literal                        shift and go to state 92
    lhs                            shift and go to state 114
    method_invocation              shift and go to state 115
    field_access                   shift and go to state 119

state 113

    (83) field_access -> ID .

    LPAREN          reduce using rule 83 (field_access -> ID .)
    EQUALS          reduce using rule 83 (field_access -> ID .)
    PLUSPLUS        reduce using rule 83 (field_access -> ID .)
    MINUSMINUS      reduce using rule 83 (field_access -> ID .)
    PERIOD          reduce using rule 83 (field_access -> ID .)
    RPAREN          reduce using rule 83 (field_access -> ID .)
    PLUS            reduce using rule 83 (field_access -> ID .)
    MINUS           reduce using rule 83 (field_access -> ID .)
    TIMES           reduce using rule 83 (field_access -> ID .)
    DIVIDE          reduce using rule 83 (field_access -> ID .)
    AND             reduce using rule 83 (field_access -> ID .)
    OR              reduce using rule 83 (field_access -> ID .)
    EQUALSCOMPARE   reduce using rule 83 (field_access -> ID .)
    NOTEQUALS       reduce using rule 83 (field_access -> ID .)
    LESSTHAN        reduce using rule 83 (field_access -> ID .)
    GREATERTHAN     reduce using rule 83 (field_access -> ID .)
    LESSTHANOREQ    reduce using rule 83 (field_access -> ID .)
    GREATERTHANOREQ reduce using rule 83 (field_access -> ID .)
    SEMICOLON       reduce using rule 83 (field_access -> ID .)
    COMMA           reduce using rule 83 (field_access -> ID .)


state 114

    (76) primary -> lhs .
    (91) assign -> lhs . EQUALS expr
    (92) assign -> lhs . PLUSPLUS
    (94) assign -> lhs . MINUSMINUS

    PERIOD          reduce using rule 76 (primary -> lhs .)
    RPAREN          reduce using rule 76 (primary -> lhs .)
    PLUS            reduce using rule 76 (primary -> lhs .)
    MINUS           reduce using rule 76 (primary -> lhs .)
    TIMES           reduce using rule 76 (primary -> lhs .)
    DIVIDE          reduce using rule 76 (primary -> lhs .)
    AND             reduce using rule 76 (primary -> lhs .)
    OR              reduce using rule 76 (primary -> lhs .)
    EQUALSCOMPARE   reduce using rule 76 (primary -> lhs .)
    NOTEQUALS       reduce using rule 76 (primary -> lhs .)
    LESSTHAN        reduce using rule 76 (primary -> lhs .)
    GREATERTHAN     reduce using rule 76 (primary -> lhs .)
    LESSTHANOREQ    reduce using rule 76 (primary -> lhs .)
    GREATERTHANOREQ reduce using rule 76 (primary -> lhs .)
    SEMICOLON       reduce using rule 76 (primary -> lhs .)
    COMMA           reduce using rule 76 (primary -> lhs .)
    EQUALS          shift and go to state 127
    PLUSPLUS        shift and go to state 128
    MINUSMINUS      shift and go to state 129


state 115

    (77) primary -> method_invocation .

    PERIOD          reduce using rule 77 (primary -> method_invocation .)
    RPAREN          reduce using rule 77 (primary -> method_invocation .)
    PLUS            reduce using rule 77 (primary -> method_invocation .)
    MINUS           reduce using rule 77 (primary -> method_invocation .)
    TIMES           reduce using rule 77 (primary -> method_invocation .)
    DIVIDE          reduce using rule 77 (primary -> method_invocation .)
    AND             reduce using rule 77 (primary -> method_invocation .)
    OR              reduce using rule 77 (primary -> method_invocation .)
    EQUALSCOMPARE   reduce using rule 77 (primary -> method_invocation .)
    NOTEQUALS       reduce using rule 77 (primary -> method_invocation .)
    LESSTHAN        reduce using rule 77 (primary -> method_invocation .)
    GREATERTHAN     reduce using rule 77 (primary -> method_invocation .)
    LESSTHANOREQ    reduce using rule 77 (primary -> method_invocation .)
    GREATERTHANOREQ reduce using rule 77 (primary -> method_invocation .)
    SEMICOLON       reduce using rule 77 (primary -> method_invocation .)
    COMMA           reduce using rule 77 (primary -> method_invocation .)


state 116

    (108) unary_op -> PLUS .

    THIS            reduce using rule 108 (unary_op -> PLUS .)
    SUPER           reduce using rule 108 (unary_op -> PLUS .)
    LPAREN          reduce using rule 108 (unary_op -> PLUS .)
    NEW             reduce using rule 108 (unary_op -> PLUS .)
    PLUSPLUS        reduce using rule 108 (unary_op -> PLUS .)
    MINUSMINUS      reduce using rule 108 (unary_op -> PLUS .)
    PLUS            reduce using rule 108 (unary_op -> PLUS .)
    MINUS           reduce using rule 108 (unary_op -> PLUS .)
    NOT             reduce using rule 108 (unary_op -> PLUS .)
    INTCONST        reduce using rule 108 (unary_op -> PLUS .)
    FLOATCONST      reduce using rule 108 (unary_op -> PLUS .)
    STRINGCONST     reduce using rule 108 (unary_op -> PLUS .)
    NULL            reduce using rule 108 (unary_op -> PLUS .)
    TRUE            reduce using rule 108 (unary_op -> PLUS .)
    FALSE           reduce using rule 108 (unary_op -> PLUS .)
    ID              reduce using rule 108 (unary_op -> PLUS .)


state 117

    (109) unary_op -> MINUS .

    THIS            reduce using rule 109 (unary_op -> MINUS .)
    SUPER           reduce using rule 109 (unary_op -> MINUS .)
    LPAREN          reduce using rule 109 (unary_op -> MINUS .)
    NEW             reduce using rule 109 (unary_op -> MINUS .)
    PLUSPLUS        reduce using rule 109 (unary_op -> MINUS .)
    MINUSMINUS      reduce using rule 109 (unary_op -> MINUS .)
    PLUS            reduce using rule 109 (unary_op -> MINUS .)
    MINUS           reduce using rule 109 (unary_op -> MINUS .)
    NOT             reduce using rule 109 (unary_op -> MINUS .)
    INTCONST        reduce using rule 109 (unary_op -> MINUS .)
    FLOATCONST      reduce using rule 109 (unary_op -> MINUS .)
    STRINGCONST     reduce using rule 109 (unary_op -> MINUS .)
    NULL            reduce using rule 109 (unary_op -> MINUS .)
    TRUE            reduce using rule 109 (unary_op -> MINUS .)
    FALSE           reduce using rule 109 (unary_op -> MINUS .)
    ID              reduce using rule 109 (unary_op -> MINUS .)


state 118

    (110) unary_op -> NOT .

    THIS            reduce using rule 110 (unary_op -> NOT .)
    SUPER           reduce using rule 110 (unary_op -> NOT .)
    LPAREN          reduce using rule 110 (unary_op -> NOT .)
    NEW             reduce using rule 110 (unary_op -> NOT .)
    PLUSPLUS        reduce using rule 110 (unary_op -> NOT .)
    MINUSMINUS      reduce using rule 110 (unary_op -> NOT .)
    PLUS            reduce using rule 110 (unary_op -> NOT .)
    MINUS           reduce using rule 110 (unary_op -> NOT .)
    NOT             reduce using rule 110 (unary_op -> NOT .)
    INTCONST        reduce using rule 110 (unary_op -> NOT .)
    FLOATCONST      reduce using rule 110 (unary_op -> NOT .)
    STRINGCONST     reduce using rule 110 (unary_op -> NOT .)
    NULL            reduce using rule 110 (unary_op -> NOT .)
    TRUE            reduce using rule 110 (unary_op -> NOT .)
    FALSE           reduce using rule 110 (unary_op -> NOT .)
    ID              reduce using rule 110 (unary_op -> NOT .)


state 119

    (81) lhs -> field_access .
    (84) method_invocation -> field_access . LPAREN RPAREN
    (85) method_invocation -> field_access . LPAREN arguments RPAREN

    EQUALS          reduce using rule 81 (lhs -> field_access .)
    PLUSPLUS        reduce using rule 81 (lhs -> field_access .)
    MINUSMINUS      reduce using rule 81 (lhs -> field_access .)
    PERIOD          reduce using rule 81 (lhs -> field_access .)
    RPAREN          reduce using rule 81 (lhs -> field_access .)
    PLUS            reduce using rule 81 (lhs -> field_access .)
    MINUS           reduce using rule 81 (lhs -> field_access .)
    TIMES           reduce using rule 81 (lhs -> field_access .)
    DIVIDE          reduce using rule 81 (lhs -> field_access .)
    AND             reduce using rule 81 (lhs -> field_access .)
    OR              reduce using rule 81 (lhs -> field_access .)
    EQUALSCOMPARE   reduce using rule 81 (lhs -> field_access .)
    NOTEQUALS       reduce using rule 81 (lhs -> field_access .)
    LESSTHAN        reduce using rule 81 (lhs -> field_access .)
    GREATERTHAN     reduce using rule 81 (lhs -> field_access .)
    LESSTHANOREQ    reduce using rule 81 (lhs -> field_access .)
    GREATERTHANOREQ reduce using rule 81 (lhs -> field_access .)
    SEMICOLON       reduce using rule 81 (lhs -> field_access .)
    COMMA           reduce using rule 81 (lhs -> field_access .)
    LPAREN          shift and go to state 132


state 120

    (47) stmt -> WHILE LPAREN . expr RPAREN stmt
    (86) expr -> . primary
    (87) expr -> . assign
    (88) expr -> . expr arith_op expr
    (89) expr -> . expr bool_op expr
    (90) expr -> . unary_op expr
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (108) unary_op -> . PLUS
    (109) unary_op -> . MINUS
    (110) unary_op -> . NOT
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE
    (81) lhs -> . field_access
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID

    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    NOT             shift and go to state 118
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101
    ID              shift and go to state 113

    expr                           shift and go to state 153
    primary                        shift and go to state 110
    assign                         shift and go to state 111
    unary_op                       shift and go to state 112
    literal                        shift and go to state 92
    lhs                            shift and go to state 114
    method_invocation              shift and go to state 115
    field_access                   shift and go to state 119

state 121

    (48) stmt -> FOR LPAREN . stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (49) stmt -> FOR LPAREN . SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (50) stmt -> FOR LPAREN . stmt_expr SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (51) stmt -> FOR LPAREN . stmt_expr SEMICOLON expr SEMICOLON RPAREN stmt
    (52) stmt -> FOR LPAREN . SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (53) stmt -> FOR LPAREN . stmt_expr SEMICOLON SEMICOLON RPAREN stmt
    (54) stmt -> FOR LPAREN . SEMICOLON expr SEMICOLON RPAREN stmt
    (55) stmt -> FOR LPAREN . SEMICOLON SEMICOLON RPAREN stmt
    (111) stmt_expr -> . assign
    (112) stmt_expr -> . method_invocation
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (81) lhs -> . field_access
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE

    SEMICOLON       shift and go to state 155
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    ID              shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    stmt_expr                      shift and go to state 154
    assign                         shift and go to state 83
    method_invocation              shift and go to state 84
    lhs                            shift and go to state 86
    field_access                   shift and go to state 89
    primary                        shift and go to state 91
    literal                        shift and go to state 92

state 122

    (58) stmt -> stmt_expr SEMICOLON .

    RBRACE          reduce using rule 58 (stmt -> stmt_expr SEMICOLON .)
    ELSE            reduce using rule 58 (stmt -> stmt_expr SEMICOLON .)


state 123

    (56) stmt -> RETURN SEMICOLON .

    RBRACE          reduce using rule 56 (stmt -> RETURN SEMICOLON .)
    ELSE            reduce using rule 56 (stmt -> RETURN SEMICOLON .)


state 124

    (57) stmt -> RETURN expr . SEMICOLON
    (88) expr -> expr . arith_op expr
    (89) expr -> expr . bool_op expr
    (96) arith_op -> . PLUS
    (97) arith_op -> . MINUS
    (98) arith_op -> . TIMES
    (99) arith_op -> . DIVIDE
    (100) bool_op -> . AND
    (101) bool_op -> . OR
    (102) bool_op -> . EQUALSCOMPARE
    (103) bool_op -> . NOTEQUALS
    (104) bool_op -> . LESSTHAN
    (105) bool_op -> . GREATERTHAN
    (106) bool_op -> . LESSTHANOREQ
    (107) bool_op -> . GREATERTHANOREQ

    SEMICOLON       shift and go to state 156
    PLUS            shift and go to state 140
    MINUS           shift and go to state 141
    TIMES           shift and go to state 142
    DIVIDE          shift and go to state 143
    AND             shift and go to state 144
    OR              shift and go to state 145
    EQUALSCOMPARE   shift and go to state 146
    NOTEQUALS       shift and go to state 147
    LESSTHAN        shift and go to state 148
    GREATERTHAN     shift and go to state 149
    LESSTHANOREQ    shift and go to state 150
    GREATERTHANOREQ shift and go to state 151

    arith_op                       shift and go to state 138
    bool_op                        shift and go to state 139

state 125

    (59) stmt -> BREAK SEMICOLON .

    RBRACE          reduce using rule 59 (stmt -> BREAK SEMICOLON .)
    ELSE            reduce using rule 59 (stmt -> BREAK SEMICOLON .)


state 126

    (60) stmt -> CONTINUE SEMICOLON .

    RBRACE          reduce using rule 60 (stmt -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 60 (stmt -> CONTINUE SEMICOLON .)


state 127

    (91) assign -> lhs EQUALS . expr
    (86) expr -> . primary
    (87) expr -> . assign
    (88) expr -> . expr arith_op expr
    (89) expr -> . expr bool_op expr
    (90) expr -> . unary_op expr
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (108) unary_op -> . PLUS
    (109) unary_op -> . MINUS
    (110) unary_op -> . NOT
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE
    (81) lhs -> . field_access
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID

    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    NOT             shift and go to state 118
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101
    ID              shift and go to state 113

    lhs                            shift and go to state 114
    expr                           shift and go to state 157
    primary                        shift and go to state 110
    assign                         shift and go to state 111
    unary_op                       shift and go to state 112
    literal                        shift and go to state 92
    method_invocation              shift and go to state 115
    field_access                   shift and go to state 119

state 128

    (92) assign -> lhs PLUSPLUS .

    SEMICOLON       reduce using rule 92 (assign -> lhs PLUSPLUS .)
    RPAREN          reduce using rule 92 (assign -> lhs PLUSPLUS .)
    PLUS            reduce using rule 92 (assign -> lhs PLUSPLUS .)
    MINUS           reduce using rule 92 (assign -> lhs PLUSPLUS .)
    TIMES           reduce using rule 92 (assign -> lhs PLUSPLUS .)
    DIVIDE          reduce using rule 92 (assign -> lhs PLUSPLUS .)
    AND             reduce using rule 92 (assign -> lhs PLUSPLUS .)
    OR              reduce using rule 92 (assign -> lhs PLUSPLUS .)
    EQUALSCOMPARE   reduce using rule 92 (assign -> lhs PLUSPLUS .)
    NOTEQUALS       reduce using rule 92 (assign -> lhs PLUSPLUS .)
    LESSTHAN        reduce using rule 92 (assign -> lhs PLUSPLUS .)
    GREATERTHAN     reduce using rule 92 (assign -> lhs PLUSPLUS .)
    LESSTHANOREQ    reduce using rule 92 (assign -> lhs PLUSPLUS .)
    GREATERTHANOREQ reduce using rule 92 (assign -> lhs PLUSPLUS .)
    COMMA           reduce using rule 92 (assign -> lhs PLUSPLUS .)


state 129

    (94) assign -> lhs MINUSMINUS .

    SEMICOLON       reduce using rule 94 (assign -> lhs MINUSMINUS .)
    RPAREN          reduce using rule 94 (assign -> lhs MINUSMINUS .)
    PLUS            reduce using rule 94 (assign -> lhs MINUSMINUS .)
    MINUS           reduce using rule 94 (assign -> lhs MINUSMINUS .)
    TIMES           reduce using rule 94 (assign -> lhs MINUSMINUS .)
    DIVIDE          reduce using rule 94 (assign -> lhs MINUSMINUS .)
    AND             reduce using rule 94 (assign -> lhs MINUSMINUS .)
    OR              reduce using rule 94 (assign -> lhs MINUSMINUS .)
    EQUALSCOMPARE   reduce using rule 94 (assign -> lhs MINUSMINUS .)
    NOTEQUALS       reduce using rule 94 (assign -> lhs MINUSMINUS .)
    LESSTHAN        reduce using rule 94 (assign -> lhs MINUSMINUS .)
    GREATERTHAN     reduce using rule 94 (assign -> lhs MINUSMINUS .)
    LESSTHANOREQ    reduce using rule 94 (assign -> lhs MINUSMINUS .)
    GREATERTHANOREQ reduce using rule 94 (assign -> lhs MINUSMINUS .)
    COMMA           reduce using rule 94 (assign -> lhs MINUSMINUS .)


state 130

    (93) assign -> PLUSPLUS lhs .
    (76) primary -> lhs .

    SEMICOLON       reduce using rule 93 (assign -> PLUSPLUS lhs .)
    RPAREN          reduce using rule 93 (assign -> PLUSPLUS lhs .)
    PLUS            reduce using rule 93 (assign -> PLUSPLUS lhs .)
    MINUS           reduce using rule 93 (assign -> PLUSPLUS lhs .)
    TIMES           reduce using rule 93 (assign -> PLUSPLUS lhs .)
    DIVIDE          reduce using rule 93 (assign -> PLUSPLUS lhs .)
    AND             reduce using rule 93 (assign -> PLUSPLUS lhs .)
    OR              reduce using rule 93 (assign -> PLUSPLUS lhs .)
    EQUALSCOMPARE   reduce using rule 93 (assign -> PLUSPLUS lhs .)
    NOTEQUALS       reduce using rule 93 (assign -> PLUSPLUS lhs .)
    LESSTHAN        reduce using rule 93 (assign -> PLUSPLUS lhs .)
    GREATERTHAN     reduce using rule 93 (assign -> PLUSPLUS lhs .)
    LESSTHANOREQ    reduce using rule 93 (assign -> PLUSPLUS lhs .)
    GREATERTHANOREQ reduce using rule 93 (assign -> PLUSPLUS lhs .)
    COMMA           reduce using rule 93 (assign -> PLUSPLUS lhs .)
    PERIOD          reduce using rule 76 (primary -> lhs .)


state 131

    (95) assign -> MINUSMINUS lhs .
    (76) primary -> lhs .

    SEMICOLON       reduce using rule 95 (assign -> MINUSMINUS lhs .)
    RPAREN          reduce using rule 95 (assign -> MINUSMINUS lhs .)
    PLUS            reduce using rule 95 (assign -> MINUSMINUS lhs .)
    MINUS           reduce using rule 95 (assign -> MINUSMINUS lhs .)
    TIMES           reduce using rule 95 (assign -> MINUSMINUS lhs .)
    DIVIDE          reduce using rule 95 (assign -> MINUSMINUS lhs .)
    AND             reduce using rule 95 (assign -> MINUSMINUS lhs .)
    OR              reduce using rule 95 (assign -> MINUSMINUS lhs .)
    EQUALSCOMPARE   reduce using rule 95 (assign -> MINUSMINUS lhs .)
    NOTEQUALS       reduce using rule 95 (assign -> MINUSMINUS lhs .)
    LESSTHAN        reduce using rule 95 (assign -> MINUSMINUS lhs .)
    GREATERTHAN     reduce using rule 95 (assign -> MINUSMINUS lhs .)
    LESSTHANOREQ    reduce using rule 95 (assign -> MINUSMINUS lhs .)
    GREATERTHANOREQ reduce using rule 95 (assign -> MINUSMINUS lhs .)
    COMMA           reduce using rule 95 (assign -> MINUSMINUS lhs .)
    PERIOD          reduce using rule 76 (primary -> lhs .)


state 132

    (84) method_invocation -> field_access LPAREN . RPAREN
    (85) method_invocation -> field_access LPAREN . arguments RPAREN
    (78) arguments -> . expr
    (79) arguments -> . arguments COMMA expr
    (80) arguments -> . empty
    (86) expr -> . primary
    (87) expr -> . assign
    (88) expr -> . expr arith_op expr
    (89) expr -> . expr bool_op expr
    (90) expr -> . unary_op expr
    (1) empty -> .
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (108) unary_op -> . PLUS
    (109) unary_op -> . MINUS
    (110) unary_op -> . NOT
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE
    (81) lhs -> . field_access
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 158
    COMMA           reduce using rule 1 (empty -> .)
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    NOT             shift and go to state 118
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101
    ID              shift and go to state 113

  ! RPAREN          [ reduce using rule 1 (empty -> .) ]

    field_access                   shift and go to state 119
    arguments                      shift and go to state 159
    expr                           shift and go to state 160
    empty                          shift and go to state 161
    primary                        shift and go to state 110
    assign                         shift and go to state 111
    unary_op                       shift and go to state 112
    literal                        shift and go to state 92
    lhs                            shift and go to state 114
    method_invocation              shift and go to state 115

state 133

    (82) field_access -> primary PERIOD . ID

    ID              shift and go to state 162


state 134

    (74) primary -> NEW ID . LPAREN arguments RPAREN
    (75) primary -> NEW ID . LPAREN RPAREN

    LPAREN          shift and go to state 163


state 135

    (37) method_decl -> modifier VOID ID LPAREN formals RPAREN block .

    PUBLIC          reduce using rule 37 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    PRIVATE         reduce using rule 37 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    STATIC          reduce using rule 37 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    VOID            reduce using rule 37 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    ID              reduce using rule 37 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    INT             reduce using rule 37 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    FLOAT           reduce using rule 37 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    BOOLEAN         reduce using rule 37 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    RBRACE          reduce using rule 37 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)


state 136

    (45) stmt -> IF LPAREN expr . RPAREN stmt
    (46) stmt -> IF LPAREN expr . RPAREN stmt ELSE stmt
    (88) expr -> expr . arith_op expr
    (89) expr -> expr . bool_op expr
    (96) arith_op -> . PLUS
    (97) arith_op -> . MINUS
    (98) arith_op -> . TIMES
    (99) arith_op -> . DIVIDE
    (100) bool_op -> . AND
    (101) bool_op -> . OR
    (102) bool_op -> . EQUALSCOMPARE
    (103) bool_op -> . NOTEQUALS
    (104) bool_op -> . LESSTHAN
    (105) bool_op -> . GREATERTHAN
    (106) bool_op -> . LESSTHANOREQ
    (107) bool_op -> . GREATERTHANOREQ

    RPAREN          shift and go to state 164
    PLUS            shift and go to state 140
    MINUS           shift and go to state 141
    TIMES           shift and go to state 142
    DIVIDE          shift and go to state 143
    AND             shift and go to state 144
    OR              shift and go to state 145
    EQUALSCOMPARE   shift and go to state 146
    NOTEQUALS       shift and go to state 147
    LESSTHAN        shift and go to state 148
    GREATERTHAN     shift and go to state 149
    LESSTHANOREQ    shift and go to state 150
    GREATERTHANOREQ shift and go to state 151

    arith_op                       shift and go to state 138
    bool_op                        shift and go to state 139

state 137

    (73) primary -> LPAREN expr RPAREN .

    PERIOD          reduce using rule 73 (primary -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 73 (primary -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 73 (primary -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 73 (primary -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 73 (primary -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 73 (primary -> LPAREN expr RPAREN .)
    AND             reduce using rule 73 (primary -> LPAREN expr RPAREN .)
    OR              reduce using rule 73 (primary -> LPAREN expr RPAREN .)
    EQUALSCOMPARE   reduce using rule 73 (primary -> LPAREN expr RPAREN .)
    NOTEQUALS       reduce using rule 73 (primary -> LPAREN expr RPAREN .)
    LESSTHAN        reduce using rule 73 (primary -> LPAREN expr RPAREN .)
    GREATERTHAN     reduce using rule 73 (primary -> LPAREN expr RPAREN .)
    LESSTHANOREQ    reduce using rule 73 (primary -> LPAREN expr RPAREN .)
    GREATERTHANOREQ reduce using rule 73 (primary -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 73 (primary -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 73 (primary -> LPAREN expr RPAREN .)


state 138

    (88) expr -> expr arith_op . expr
    (86) expr -> . primary
    (87) expr -> . assign
    (88) expr -> . expr arith_op expr
    (89) expr -> . expr bool_op expr
    (90) expr -> . unary_op expr
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (108) unary_op -> . PLUS
    (109) unary_op -> . MINUS
    (110) unary_op -> . NOT
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE
    (81) lhs -> . field_access
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID

    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    NOT             shift and go to state 118
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101
    ID              shift and go to state 113

    expr                           shift and go to state 165
    primary                        shift and go to state 110
    assign                         shift and go to state 111
    unary_op                       shift and go to state 112
    literal                        shift and go to state 92
    lhs                            shift and go to state 114
    method_invocation              shift and go to state 115
    field_access                   shift and go to state 119

state 139

    (89) expr -> expr bool_op . expr
    (86) expr -> . primary
    (87) expr -> . assign
    (88) expr -> . expr arith_op expr
    (89) expr -> . expr bool_op expr
    (90) expr -> . unary_op expr
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (108) unary_op -> . PLUS
    (109) unary_op -> . MINUS
    (110) unary_op -> . NOT
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE
    (81) lhs -> . field_access
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID

    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    NOT             shift and go to state 118
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101
    ID              shift and go to state 113

    expr                           shift and go to state 166
    primary                        shift and go to state 110
    assign                         shift and go to state 111
    unary_op                       shift and go to state 112
    literal                        shift and go to state 92
    lhs                            shift and go to state 114
    method_invocation              shift and go to state 115
    field_access                   shift and go to state 119

state 140

    (96) arith_op -> PLUS .

    THIS            reduce using rule 96 (arith_op -> PLUS .)
    SUPER           reduce using rule 96 (arith_op -> PLUS .)
    LPAREN          reduce using rule 96 (arith_op -> PLUS .)
    NEW             reduce using rule 96 (arith_op -> PLUS .)
    PLUSPLUS        reduce using rule 96 (arith_op -> PLUS .)
    MINUSMINUS      reduce using rule 96 (arith_op -> PLUS .)
    PLUS            reduce using rule 96 (arith_op -> PLUS .)
    MINUS           reduce using rule 96 (arith_op -> PLUS .)
    NOT             reduce using rule 96 (arith_op -> PLUS .)
    INTCONST        reduce using rule 96 (arith_op -> PLUS .)
    FLOATCONST      reduce using rule 96 (arith_op -> PLUS .)
    STRINGCONST     reduce using rule 96 (arith_op -> PLUS .)
    NULL            reduce using rule 96 (arith_op -> PLUS .)
    TRUE            reduce using rule 96 (arith_op -> PLUS .)
    FALSE           reduce using rule 96 (arith_op -> PLUS .)
    ID              reduce using rule 96 (arith_op -> PLUS .)


state 141

    (97) arith_op -> MINUS .

    THIS            reduce using rule 97 (arith_op -> MINUS .)
    SUPER           reduce using rule 97 (arith_op -> MINUS .)
    LPAREN          reduce using rule 97 (arith_op -> MINUS .)
    NEW             reduce using rule 97 (arith_op -> MINUS .)
    PLUSPLUS        reduce using rule 97 (arith_op -> MINUS .)
    MINUSMINUS      reduce using rule 97 (arith_op -> MINUS .)
    PLUS            reduce using rule 97 (arith_op -> MINUS .)
    MINUS           reduce using rule 97 (arith_op -> MINUS .)
    NOT             reduce using rule 97 (arith_op -> MINUS .)
    INTCONST        reduce using rule 97 (arith_op -> MINUS .)
    FLOATCONST      reduce using rule 97 (arith_op -> MINUS .)
    STRINGCONST     reduce using rule 97 (arith_op -> MINUS .)
    NULL            reduce using rule 97 (arith_op -> MINUS .)
    TRUE            reduce using rule 97 (arith_op -> MINUS .)
    FALSE           reduce using rule 97 (arith_op -> MINUS .)
    ID              reduce using rule 97 (arith_op -> MINUS .)


state 142

    (98) arith_op -> TIMES .

    THIS            reduce using rule 98 (arith_op -> TIMES .)
    SUPER           reduce using rule 98 (arith_op -> TIMES .)
    LPAREN          reduce using rule 98 (arith_op -> TIMES .)
    NEW             reduce using rule 98 (arith_op -> TIMES .)
    PLUSPLUS        reduce using rule 98 (arith_op -> TIMES .)
    MINUSMINUS      reduce using rule 98 (arith_op -> TIMES .)
    PLUS            reduce using rule 98 (arith_op -> TIMES .)
    MINUS           reduce using rule 98 (arith_op -> TIMES .)
    NOT             reduce using rule 98 (arith_op -> TIMES .)
    INTCONST        reduce using rule 98 (arith_op -> TIMES .)
    FLOATCONST      reduce using rule 98 (arith_op -> TIMES .)
    STRINGCONST     reduce using rule 98 (arith_op -> TIMES .)
    NULL            reduce using rule 98 (arith_op -> TIMES .)
    TRUE            reduce using rule 98 (arith_op -> TIMES .)
    FALSE           reduce using rule 98 (arith_op -> TIMES .)
    ID              reduce using rule 98 (arith_op -> TIMES .)


state 143

    (99) arith_op -> DIVIDE .

    THIS            reduce using rule 99 (arith_op -> DIVIDE .)
    SUPER           reduce using rule 99 (arith_op -> DIVIDE .)
    LPAREN          reduce using rule 99 (arith_op -> DIVIDE .)
    NEW             reduce using rule 99 (arith_op -> DIVIDE .)
    PLUSPLUS        reduce using rule 99 (arith_op -> DIVIDE .)
    MINUSMINUS      reduce using rule 99 (arith_op -> DIVIDE .)
    PLUS            reduce using rule 99 (arith_op -> DIVIDE .)
    MINUS           reduce using rule 99 (arith_op -> DIVIDE .)
    NOT             reduce using rule 99 (arith_op -> DIVIDE .)
    INTCONST        reduce using rule 99 (arith_op -> DIVIDE .)
    FLOATCONST      reduce using rule 99 (arith_op -> DIVIDE .)
    STRINGCONST     reduce using rule 99 (arith_op -> DIVIDE .)
    NULL            reduce using rule 99 (arith_op -> DIVIDE .)
    TRUE            reduce using rule 99 (arith_op -> DIVIDE .)
    FALSE           reduce using rule 99 (arith_op -> DIVIDE .)
    ID              reduce using rule 99 (arith_op -> DIVIDE .)


state 144

    (100) bool_op -> AND .

    THIS            reduce using rule 100 (bool_op -> AND .)
    SUPER           reduce using rule 100 (bool_op -> AND .)
    LPAREN          reduce using rule 100 (bool_op -> AND .)
    NEW             reduce using rule 100 (bool_op -> AND .)
    PLUSPLUS        reduce using rule 100 (bool_op -> AND .)
    MINUSMINUS      reduce using rule 100 (bool_op -> AND .)
    PLUS            reduce using rule 100 (bool_op -> AND .)
    MINUS           reduce using rule 100 (bool_op -> AND .)
    NOT             reduce using rule 100 (bool_op -> AND .)
    INTCONST        reduce using rule 100 (bool_op -> AND .)
    FLOATCONST      reduce using rule 100 (bool_op -> AND .)
    STRINGCONST     reduce using rule 100 (bool_op -> AND .)
    NULL            reduce using rule 100 (bool_op -> AND .)
    TRUE            reduce using rule 100 (bool_op -> AND .)
    FALSE           reduce using rule 100 (bool_op -> AND .)
    ID              reduce using rule 100 (bool_op -> AND .)


state 145

    (101) bool_op -> OR .

    THIS            reduce using rule 101 (bool_op -> OR .)
    SUPER           reduce using rule 101 (bool_op -> OR .)
    LPAREN          reduce using rule 101 (bool_op -> OR .)
    NEW             reduce using rule 101 (bool_op -> OR .)
    PLUSPLUS        reduce using rule 101 (bool_op -> OR .)
    MINUSMINUS      reduce using rule 101 (bool_op -> OR .)
    PLUS            reduce using rule 101 (bool_op -> OR .)
    MINUS           reduce using rule 101 (bool_op -> OR .)
    NOT             reduce using rule 101 (bool_op -> OR .)
    INTCONST        reduce using rule 101 (bool_op -> OR .)
    FLOATCONST      reduce using rule 101 (bool_op -> OR .)
    STRINGCONST     reduce using rule 101 (bool_op -> OR .)
    NULL            reduce using rule 101 (bool_op -> OR .)
    TRUE            reduce using rule 101 (bool_op -> OR .)
    FALSE           reduce using rule 101 (bool_op -> OR .)
    ID              reduce using rule 101 (bool_op -> OR .)


state 146

    (102) bool_op -> EQUALSCOMPARE .

    THIS            reduce using rule 102 (bool_op -> EQUALSCOMPARE .)
    SUPER           reduce using rule 102 (bool_op -> EQUALSCOMPARE .)
    LPAREN          reduce using rule 102 (bool_op -> EQUALSCOMPARE .)
    NEW             reduce using rule 102 (bool_op -> EQUALSCOMPARE .)
    PLUSPLUS        reduce using rule 102 (bool_op -> EQUALSCOMPARE .)
    MINUSMINUS      reduce using rule 102 (bool_op -> EQUALSCOMPARE .)
    PLUS            reduce using rule 102 (bool_op -> EQUALSCOMPARE .)
    MINUS           reduce using rule 102 (bool_op -> EQUALSCOMPARE .)
    NOT             reduce using rule 102 (bool_op -> EQUALSCOMPARE .)
    INTCONST        reduce using rule 102 (bool_op -> EQUALSCOMPARE .)
    FLOATCONST      reduce using rule 102 (bool_op -> EQUALSCOMPARE .)
    STRINGCONST     reduce using rule 102 (bool_op -> EQUALSCOMPARE .)
    NULL            reduce using rule 102 (bool_op -> EQUALSCOMPARE .)
    TRUE            reduce using rule 102 (bool_op -> EQUALSCOMPARE .)
    FALSE           reduce using rule 102 (bool_op -> EQUALSCOMPARE .)
    ID              reduce using rule 102 (bool_op -> EQUALSCOMPARE .)


state 147

    (103) bool_op -> NOTEQUALS .

    THIS            reduce using rule 103 (bool_op -> NOTEQUALS .)
    SUPER           reduce using rule 103 (bool_op -> NOTEQUALS .)
    LPAREN          reduce using rule 103 (bool_op -> NOTEQUALS .)
    NEW             reduce using rule 103 (bool_op -> NOTEQUALS .)
    PLUSPLUS        reduce using rule 103 (bool_op -> NOTEQUALS .)
    MINUSMINUS      reduce using rule 103 (bool_op -> NOTEQUALS .)
    PLUS            reduce using rule 103 (bool_op -> NOTEQUALS .)
    MINUS           reduce using rule 103 (bool_op -> NOTEQUALS .)
    NOT             reduce using rule 103 (bool_op -> NOTEQUALS .)
    INTCONST        reduce using rule 103 (bool_op -> NOTEQUALS .)
    FLOATCONST      reduce using rule 103 (bool_op -> NOTEQUALS .)
    STRINGCONST     reduce using rule 103 (bool_op -> NOTEQUALS .)
    NULL            reduce using rule 103 (bool_op -> NOTEQUALS .)
    TRUE            reduce using rule 103 (bool_op -> NOTEQUALS .)
    FALSE           reduce using rule 103 (bool_op -> NOTEQUALS .)
    ID              reduce using rule 103 (bool_op -> NOTEQUALS .)


state 148

    (104) bool_op -> LESSTHAN .

    THIS            reduce using rule 104 (bool_op -> LESSTHAN .)
    SUPER           reduce using rule 104 (bool_op -> LESSTHAN .)
    LPAREN          reduce using rule 104 (bool_op -> LESSTHAN .)
    NEW             reduce using rule 104 (bool_op -> LESSTHAN .)
    PLUSPLUS        reduce using rule 104 (bool_op -> LESSTHAN .)
    MINUSMINUS      reduce using rule 104 (bool_op -> LESSTHAN .)
    PLUS            reduce using rule 104 (bool_op -> LESSTHAN .)
    MINUS           reduce using rule 104 (bool_op -> LESSTHAN .)
    NOT             reduce using rule 104 (bool_op -> LESSTHAN .)
    INTCONST        reduce using rule 104 (bool_op -> LESSTHAN .)
    FLOATCONST      reduce using rule 104 (bool_op -> LESSTHAN .)
    STRINGCONST     reduce using rule 104 (bool_op -> LESSTHAN .)
    NULL            reduce using rule 104 (bool_op -> LESSTHAN .)
    TRUE            reduce using rule 104 (bool_op -> LESSTHAN .)
    FALSE           reduce using rule 104 (bool_op -> LESSTHAN .)
    ID              reduce using rule 104 (bool_op -> LESSTHAN .)


state 149

    (105) bool_op -> GREATERTHAN .

    THIS            reduce using rule 105 (bool_op -> GREATERTHAN .)
    SUPER           reduce using rule 105 (bool_op -> GREATERTHAN .)
    LPAREN          reduce using rule 105 (bool_op -> GREATERTHAN .)
    NEW             reduce using rule 105 (bool_op -> GREATERTHAN .)
    PLUSPLUS        reduce using rule 105 (bool_op -> GREATERTHAN .)
    MINUSMINUS      reduce using rule 105 (bool_op -> GREATERTHAN .)
    PLUS            reduce using rule 105 (bool_op -> GREATERTHAN .)
    MINUS           reduce using rule 105 (bool_op -> GREATERTHAN .)
    NOT             reduce using rule 105 (bool_op -> GREATERTHAN .)
    INTCONST        reduce using rule 105 (bool_op -> GREATERTHAN .)
    FLOATCONST      reduce using rule 105 (bool_op -> GREATERTHAN .)
    STRINGCONST     reduce using rule 105 (bool_op -> GREATERTHAN .)
    NULL            reduce using rule 105 (bool_op -> GREATERTHAN .)
    TRUE            reduce using rule 105 (bool_op -> GREATERTHAN .)
    FALSE           reduce using rule 105 (bool_op -> GREATERTHAN .)
    ID              reduce using rule 105 (bool_op -> GREATERTHAN .)


state 150

    (106) bool_op -> LESSTHANOREQ .

    THIS            reduce using rule 106 (bool_op -> LESSTHANOREQ .)
    SUPER           reduce using rule 106 (bool_op -> LESSTHANOREQ .)
    LPAREN          reduce using rule 106 (bool_op -> LESSTHANOREQ .)
    NEW             reduce using rule 106 (bool_op -> LESSTHANOREQ .)
    PLUSPLUS        reduce using rule 106 (bool_op -> LESSTHANOREQ .)
    MINUSMINUS      reduce using rule 106 (bool_op -> LESSTHANOREQ .)
    PLUS            reduce using rule 106 (bool_op -> LESSTHANOREQ .)
    MINUS           reduce using rule 106 (bool_op -> LESSTHANOREQ .)
    NOT             reduce using rule 106 (bool_op -> LESSTHANOREQ .)
    INTCONST        reduce using rule 106 (bool_op -> LESSTHANOREQ .)
    FLOATCONST      reduce using rule 106 (bool_op -> LESSTHANOREQ .)
    STRINGCONST     reduce using rule 106 (bool_op -> LESSTHANOREQ .)
    NULL            reduce using rule 106 (bool_op -> LESSTHANOREQ .)
    TRUE            reduce using rule 106 (bool_op -> LESSTHANOREQ .)
    FALSE           reduce using rule 106 (bool_op -> LESSTHANOREQ .)
    ID              reduce using rule 106 (bool_op -> LESSTHANOREQ .)


state 151

    (107) bool_op -> GREATERTHANOREQ .

    THIS            reduce using rule 107 (bool_op -> GREATERTHANOREQ .)
    SUPER           reduce using rule 107 (bool_op -> GREATERTHANOREQ .)
    LPAREN          reduce using rule 107 (bool_op -> GREATERTHANOREQ .)
    NEW             reduce using rule 107 (bool_op -> GREATERTHANOREQ .)
    PLUSPLUS        reduce using rule 107 (bool_op -> GREATERTHANOREQ .)
    MINUSMINUS      reduce using rule 107 (bool_op -> GREATERTHANOREQ .)
    PLUS            reduce using rule 107 (bool_op -> GREATERTHANOREQ .)
    MINUS           reduce using rule 107 (bool_op -> GREATERTHANOREQ .)
    NOT             reduce using rule 107 (bool_op -> GREATERTHANOREQ .)
    INTCONST        reduce using rule 107 (bool_op -> GREATERTHANOREQ .)
    FLOATCONST      reduce using rule 107 (bool_op -> GREATERTHANOREQ .)
    STRINGCONST     reduce using rule 107 (bool_op -> GREATERTHANOREQ .)
    NULL            reduce using rule 107 (bool_op -> GREATERTHANOREQ .)
    TRUE            reduce using rule 107 (bool_op -> GREATERTHANOREQ .)
    FALSE           reduce using rule 107 (bool_op -> GREATERTHANOREQ .)
    ID              reduce using rule 107 (bool_op -> GREATERTHANOREQ .)


state 152

    (90) expr -> unary_op expr .
    (88) expr -> expr . arith_op expr
    (89) expr -> expr . bool_op expr
    (96) arith_op -> . PLUS
    (97) arith_op -> . MINUS
    (98) arith_op -> . TIMES
    (99) arith_op -> . DIVIDE
    (100) bool_op -> . AND
    (101) bool_op -> . OR
    (102) bool_op -> . EQUALSCOMPARE
    (103) bool_op -> . NOTEQUALS
    (104) bool_op -> . LESSTHAN
    (105) bool_op -> . GREATERTHAN
    (106) bool_op -> . LESSTHANOREQ
    (107) bool_op -> . GREATERTHANOREQ

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUALSCOMPARE resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANOREQ resolved as shift
  ! shift/reduce conflict for GREATERTHANOREQ resolved as shift
    RPAREN          reduce using rule 90 (expr -> unary_op expr .)
    SEMICOLON       reduce using rule 90 (expr -> unary_op expr .)
    COMMA           reduce using rule 90 (expr -> unary_op expr .)
    PLUS            shift and go to state 140
    MINUS           shift and go to state 141
    TIMES           shift and go to state 142
    DIVIDE          shift and go to state 143
    AND             shift and go to state 144
    OR              shift and go to state 145
    EQUALSCOMPARE   shift and go to state 146
    NOTEQUALS       shift and go to state 147
    LESSTHAN        shift and go to state 148
    GREATERTHAN     shift and go to state 149
    LESSTHANOREQ    shift and go to state 150
    GREATERTHANOREQ shift and go to state 151

  ! PLUS            [ reduce using rule 90 (expr -> unary_op expr .) ]
  ! MINUS           [ reduce using rule 90 (expr -> unary_op expr .) ]
  ! TIMES           [ reduce using rule 90 (expr -> unary_op expr .) ]
  ! DIVIDE          [ reduce using rule 90 (expr -> unary_op expr .) ]
  ! AND             [ reduce using rule 90 (expr -> unary_op expr .) ]
  ! OR              [ reduce using rule 90 (expr -> unary_op expr .) ]
  ! EQUALSCOMPARE   [ reduce using rule 90 (expr -> unary_op expr .) ]
  ! NOTEQUALS       [ reduce using rule 90 (expr -> unary_op expr .) ]
  ! LESSTHAN        [ reduce using rule 90 (expr -> unary_op expr .) ]
  ! GREATERTHAN     [ reduce using rule 90 (expr -> unary_op expr .) ]
  ! LESSTHANOREQ    [ reduce using rule 90 (expr -> unary_op expr .) ]
  ! GREATERTHANOREQ [ reduce using rule 90 (expr -> unary_op expr .) ]

    arith_op                       shift and go to state 138
    bool_op                        shift and go to state 139

state 153

    (47) stmt -> WHILE LPAREN expr . RPAREN stmt
    (88) expr -> expr . arith_op expr
    (89) expr -> expr . bool_op expr
    (96) arith_op -> . PLUS
    (97) arith_op -> . MINUS
    (98) arith_op -> . TIMES
    (99) arith_op -> . DIVIDE
    (100) bool_op -> . AND
    (101) bool_op -> . OR
    (102) bool_op -> . EQUALSCOMPARE
    (103) bool_op -> . NOTEQUALS
    (104) bool_op -> . LESSTHAN
    (105) bool_op -> . GREATERTHAN
    (106) bool_op -> . LESSTHANOREQ
    (107) bool_op -> . GREATERTHANOREQ

    RPAREN          shift and go to state 167
    PLUS            shift and go to state 140
    MINUS           shift and go to state 141
    TIMES           shift and go to state 142
    DIVIDE          shift and go to state 143
    AND             shift and go to state 144
    OR              shift and go to state 145
    EQUALSCOMPARE   shift and go to state 146
    NOTEQUALS       shift and go to state 147
    LESSTHAN        shift and go to state 148
    GREATERTHAN     shift and go to state 149
    LESSTHANOREQ    shift and go to state 150
    GREATERTHANOREQ shift and go to state 151

    arith_op                       shift and go to state 138
    bool_op                        shift and go to state 139

state 154

    (48) stmt -> FOR LPAREN stmt_expr . SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (50) stmt -> FOR LPAREN stmt_expr . SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (51) stmt -> FOR LPAREN stmt_expr . SEMICOLON expr SEMICOLON RPAREN stmt
    (53) stmt -> FOR LPAREN stmt_expr . SEMICOLON SEMICOLON RPAREN stmt

    SEMICOLON       shift and go to state 168


state 155

    (49) stmt -> FOR LPAREN SEMICOLON . expr SEMICOLON stmt_expr RPAREN stmt
    (52) stmt -> FOR LPAREN SEMICOLON . SEMICOLON stmt_expr RPAREN stmt
    (54) stmt -> FOR LPAREN SEMICOLON . expr SEMICOLON RPAREN stmt
    (55) stmt -> FOR LPAREN SEMICOLON . SEMICOLON RPAREN stmt
    (86) expr -> . primary
    (87) expr -> . assign
    (88) expr -> . expr arith_op expr
    (89) expr -> . expr bool_op expr
    (90) expr -> . unary_op expr
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (108) unary_op -> . PLUS
    (109) unary_op -> . MINUS
    (110) unary_op -> . NOT
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE
    (81) lhs -> . field_access
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID

    SEMICOLON       shift and go to state 169
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    NOT             shift and go to state 118
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101
    ID              shift and go to state 113

    expr                           shift and go to state 170
    primary                        shift and go to state 110
    assign                         shift and go to state 111
    unary_op                       shift and go to state 112
    literal                        shift and go to state 92
    lhs                            shift and go to state 114
    method_invocation              shift and go to state 115
    field_access                   shift and go to state 119

state 156

    (57) stmt -> RETURN expr SEMICOLON .

    RBRACE          reduce using rule 57 (stmt -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 57 (stmt -> RETURN expr SEMICOLON .)


state 157

    (91) assign -> lhs EQUALS expr .
    (88) expr -> expr . arith_op expr
    (89) expr -> expr . bool_op expr
    (96) arith_op -> . PLUS
    (97) arith_op -> . MINUS
    (98) arith_op -> . TIMES
    (99) arith_op -> . DIVIDE
    (100) bool_op -> . AND
    (101) bool_op -> . OR
    (102) bool_op -> . EQUALSCOMPARE
    (103) bool_op -> . NOTEQUALS
    (104) bool_op -> . LESSTHAN
    (105) bool_op -> . GREATERTHAN
    (106) bool_op -> . LESSTHANOREQ
    (107) bool_op -> . GREATERTHANOREQ

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUALSCOMPARE resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANOREQ resolved as shift
  ! shift/reduce conflict for GREATERTHANOREQ resolved as shift
    SEMICOLON       reduce using rule 91 (assign -> lhs EQUALS expr .)
    RPAREN          reduce using rule 91 (assign -> lhs EQUALS expr .)
    COMMA           reduce using rule 91 (assign -> lhs EQUALS expr .)
    PLUS            shift and go to state 140
    MINUS           shift and go to state 141
    TIMES           shift and go to state 142
    DIVIDE          shift and go to state 143
    AND             shift and go to state 144
    OR              shift and go to state 145
    EQUALSCOMPARE   shift and go to state 146
    NOTEQUALS       shift and go to state 147
    LESSTHAN        shift and go to state 148
    GREATERTHAN     shift and go to state 149
    LESSTHANOREQ    shift and go to state 150
    GREATERTHANOREQ shift and go to state 151

  ! PLUS            [ reduce using rule 91 (assign -> lhs EQUALS expr .) ]
  ! MINUS           [ reduce using rule 91 (assign -> lhs EQUALS expr .) ]
  ! TIMES           [ reduce using rule 91 (assign -> lhs EQUALS expr .) ]
  ! DIVIDE          [ reduce using rule 91 (assign -> lhs EQUALS expr .) ]
  ! AND             [ reduce using rule 91 (assign -> lhs EQUALS expr .) ]
  ! OR              [ reduce using rule 91 (assign -> lhs EQUALS expr .) ]
  ! EQUALSCOMPARE   [ reduce using rule 91 (assign -> lhs EQUALS expr .) ]
  ! NOTEQUALS       [ reduce using rule 91 (assign -> lhs EQUALS expr .) ]
  ! LESSTHAN        [ reduce using rule 91 (assign -> lhs EQUALS expr .) ]
  ! GREATERTHAN     [ reduce using rule 91 (assign -> lhs EQUALS expr .) ]
  ! LESSTHANOREQ    [ reduce using rule 91 (assign -> lhs EQUALS expr .) ]
  ! GREATERTHANOREQ [ reduce using rule 91 (assign -> lhs EQUALS expr .) ]

    arith_op                       shift and go to state 138
    bool_op                        shift and go to state 139

state 158

    (84) method_invocation -> field_access LPAREN RPAREN .

    SEMICOLON       reduce using rule 84 (method_invocation -> field_access LPAREN RPAREN .)
    PERIOD          reduce using rule 84 (method_invocation -> field_access LPAREN RPAREN .)
    RPAREN          reduce using rule 84 (method_invocation -> field_access LPAREN RPAREN .)
    PLUS            reduce using rule 84 (method_invocation -> field_access LPAREN RPAREN .)
    MINUS           reduce using rule 84 (method_invocation -> field_access LPAREN RPAREN .)
    TIMES           reduce using rule 84 (method_invocation -> field_access LPAREN RPAREN .)
    DIVIDE          reduce using rule 84 (method_invocation -> field_access LPAREN RPAREN .)
    AND             reduce using rule 84 (method_invocation -> field_access LPAREN RPAREN .)
    OR              reduce using rule 84 (method_invocation -> field_access LPAREN RPAREN .)
    EQUALSCOMPARE   reduce using rule 84 (method_invocation -> field_access LPAREN RPAREN .)
    NOTEQUALS       reduce using rule 84 (method_invocation -> field_access LPAREN RPAREN .)
    LESSTHAN        reduce using rule 84 (method_invocation -> field_access LPAREN RPAREN .)
    GREATERTHAN     reduce using rule 84 (method_invocation -> field_access LPAREN RPAREN .)
    LESSTHANOREQ    reduce using rule 84 (method_invocation -> field_access LPAREN RPAREN .)
    GREATERTHANOREQ reduce using rule 84 (method_invocation -> field_access LPAREN RPAREN .)
    COMMA           reduce using rule 84 (method_invocation -> field_access LPAREN RPAREN .)


state 159

    (85) method_invocation -> field_access LPAREN arguments . RPAREN
    (79) arguments -> arguments . COMMA expr

    RPAREN          shift and go to state 171
    COMMA           shift and go to state 172


state 160

    (78) arguments -> expr .
    (88) expr -> expr . arith_op expr
    (89) expr -> expr . bool_op expr
    (96) arith_op -> . PLUS
    (97) arith_op -> . MINUS
    (98) arith_op -> . TIMES
    (99) arith_op -> . DIVIDE
    (100) bool_op -> . AND
    (101) bool_op -> . OR
    (102) bool_op -> . EQUALSCOMPARE
    (103) bool_op -> . NOTEQUALS
    (104) bool_op -> . LESSTHAN
    (105) bool_op -> . GREATERTHAN
    (106) bool_op -> . LESSTHANOREQ
    (107) bool_op -> . GREATERTHANOREQ

    RPAREN          reduce using rule 78 (arguments -> expr .)
    COMMA           reduce using rule 78 (arguments -> expr .)
    PLUS            shift and go to state 140
    MINUS           shift and go to state 141
    TIMES           shift and go to state 142
    DIVIDE          shift and go to state 143
    AND             shift and go to state 144
    OR              shift and go to state 145
    EQUALSCOMPARE   shift and go to state 146
    NOTEQUALS       shift and go to state 147
    LESSTHAN        shift and go to state 148
    GREATERTHAN     shift and go to state 149
    LESSTHANOREQ    shift and go to state 150
    GREATERTHANOREQ shift and go to state 151

    arith_op                       shift and go to state 138
    bool_op                        shift and go to state 139

state 161

    (80) arguments -> empty .

    RPAREN          reduce using rule 80 (arguments -> empty .)
    COMMA           reduce using rule 80 (arguments -> empty .)


state 162

    (82) field_access -> primary PERIOD ID .

    LPAREN          reduce using rule 82 (field_access -> primary PERIOD ID .)
    EQUALS          reduce using rule 82 (field_access -> primary PERIOD ID .)
    PLUSPLUS        reduce using rule 82 (field_access -> primary PERIOD ID .)
    MINUSMINUS      reduce using rule 82 (field_access -> primary PERIOD ID .)
    PERIOD          reduce using rule 82 (field_access -> primary PERIOD ID .)
    RPAREN          reduce using rule 82 (field_access -> primary PERIOD ID .)
    PLUS            reduce using rule 82 (field_access -> primary PERIOD ID .)
    MINUS           reduce using rule 82 (field_access -> primary PERIOD ID .)
    TIMES           reduce using rule 82 (field_access -> primary PERIOD ID .)
    DIVIDE          reduce using rule 82 (field_access -> primary PERIOD ID .)
    AND             reduce using rule 82 (field_access -> primary PERIOD ID .)
    OR              reduce using rule 82 (field_access -> primary PERIOD ID .)
    EQUALSCOMPARE   reduce using rule 82 (field_access -> primary PERIOD ID .)
    NOTEQUALS       reduce using rule 82 (field_access -> primary PERIOD ID .)
    LESSTHAN        reduce using rule 82 (field_access -> primary PERIOD ID .)
    GREATERTHAN     reduce using rule 82 (field_access -> primary PERIOD ID .)
    LESSTHANOREQ    reduce using rule 82 (field_access -> primary PERIOD ID .)
    GREATERTHANOREQ reduce using rule 82 (field_access -> primary PERIOD ID .)
    SEMICOLON       reduce using rule 82 (field_access -> primary PERIOD ID .)
    COMMA           reduce using rule 82 (field_access -> primary PERIOD ID .)


state 163

    (74) primary -> NEW ID LPAREN . arguments RPAREN
    (75) primary -> NEW ID LPAREN . RPAREN
    (78) arguments -> . expr
    (79) arguments -> . arguments COMMA expr
    (80) arguments -> . empty
    (86) expr -> . primary
    (87) expr -> . assign
    (88) expr -> . expr arith_op expr
    (89) expr -> . expr bool_op expr
    (90) expr -> . unary_op expr
    (1) empty -> .
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (108) unary_op -> . PLUS
    (109) unary_op -> . MINUS
    (110) unary_op -> . NOT
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE
    (81) lhs -> . field_access
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 174
    COMMA           reduce using rule 1 (empty -> .)
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    NOT             shift and go to state 118
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101
    ID              shift and go to state 113

  ! RPAREN          [ reduce using rule 1 (empty -> .) ]

    arguments                      shift and go to state 173
    expr                           shift and go to state 160
    empty                          shift and go to state 161
    primary                        shift and go to state 110
    assign                         shift and go to state 111
    unary_op                       shift and go to state 112
    literal                        shift and go to state 92
    lhs                            shift and go to state 114
    method_invocation              shift and go to state 115
    field_access                   shift and go to state 119

state 164

    (45) stmt -> IF LPAREN expr RPAREN . stmt
    (46) stmt -> IF LPAREN expr RPAREN . stmt ELSE stmt
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (47) stmt -> . WHILE LPAREN expr RPAREN stmt
    (48) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (49) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (50) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (51) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON RPAREN stmt
    (52) stmt -> . FOR LPAREN SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (53) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON RPAREN stmt
    (54) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON RPAREN stmt
    (55) stmt -> . FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt
    (56) stmt -> . RETURN SEMICOLON
    (57) stmt -> . RETURN expr SEMICOLON
    (58) stmt -> . stmt_expr SEMICOLON
    (59) stmt -> . BREAK SEMICOLON
    (60) stmt -> . CONTINUE SEMICOLON
    (61) stmt -> . block
    (62) stmt -> . var_decl
    (63) stmt -> . SEMICOLON
    (111) stmt_expr -> . assign
    (112) stmt_expr -> . method_invocation
    (44) block -> . LBRACE stmt RBRACE
    (24) var_decl -> . type variables
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . BOOLEAN
    (28) type -> . VOID
    (29) type -> . ID
    (81) lhs -> . field_access
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE

    IF              shift and go to state 72
    WHILE           shift and go to state 74
    FOR             shift and go to state 75
    RETURN          shift and go to state 78
    BREAK           shift and go to state 79
    CONTINUE        shift and go to state 80
    SEMICOLON       shift and go to state 77
    LBRACE          shift and go to state 63
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    VOID            shift and go to state 56
    ID              shift and go to state 90
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    stmt                           shift and go to state 175
    stmt_expr                      shift and go to state 76
    block                          shift and go to state 81
    var_decl                       shift and go to state 82
    assign                         shift and go to state 83
    method_invocation              shift and go to state 84
    type                           shift and go to state 85
    lhs                            shift and go to state 86
    field_access                   shift and go to state 89
    primary                        shift and go to state 91
    literal                        shift and go to state 92

state 165

    (88) expr -> expr arith_op expr .
    (88) expr -> expr . arith_op expr
    (89) expr -> expr . bool_op expr
    (96) arith_op -> . PLUS
    (97) arith_op -> . MINUS
    (98) arith_op -> . TIMES
    (99) arith_op -> . DIVIDE
    (100) bool_op -> . AND
    (101) bool_op -> . OR
    (102) bool_op -> . EQUALSCOMPARE
    (103) bool_op -> . NOTEQUALS
    (104) bool_op -> . LESSTHAN
    (105) bool_op -> . GREATERTHAN
    (106) bool_op -> . LESSTHANOREQ
    (107) bool_op -> . GREATERTHANOREQ

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUALSCOMPARE resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANOREQ resolved as shift
  ! shift/reduce conflict for GREATERTHANOREQ resolved as shift
    RPAREN          reduce using rule 88 (expr -> expr arith_op expr .)
    SEMICOLON       reduce using rule 88 (expr -> expr arith_op expr .)
    COMMA           reduce using rule 88 (expr -> expr arith_op expr .)
    PLUS            shift and go to state 140
    MINUS           shift and go to state 141
    TIMES           shift and go to state 142
    DIVIDE          shift and go to state 143
    AND             shift and go to state 144
    OR              shift and go to state 145
    EQUALSCOMPARE   shift and go to state 146
    NOTEQUALS       shift and go to state 147
    LESSTHAN        shift and go to state 148
    GREATERTHAN     shift and go to state 149
    LESSTHANOREQ    shift and go to state 150
    GREATERTHANOREQ shift and go to state 151

  ! PLUS            [ reduce using rule 88 (expr -> expr arith_op expr .) ]
  ! MINUS           [ reduce using rule 88 (expr -> expr arith_op expr .) ]
  ! TIMES           [ reduce using rule 88 (expr -> expr arith_op expr .) ]
  ! DIVIDE          [ reduce using rule 88 (expr -> expr arith_op expr .) ]
  ! AND             [ reduce using rule 88 (expr -> expr arith_op expr .) ]
  ! OR              [ reduce using rule 88 (expr -> expr arith_op expr .) ]
  ! EQUALSCOMPARE   [ reduce using rule 88 (expr -> expr arith_op expr .) ]
  ! NOTEQUALS       [ reduce using rule 88 (expr -> expr arith_op expr .) ]
  ! LESSTHAN        [ reduce using rule 88 (expr -> expr arith_op expr .) ]
  ! GREATERTHAN     [ reduce using rule 88 (expr -> expr arith_op expr .) ]
  ! LESSTHANOREQ    [ reduce using rule 88 (expr -> expr arith_op expr .) ]
  ! GREATERTHANOREQ [ reduce using rule 88 (expr -> expr arith_op expr .) ]

    arith_op                       shift and go to state 138
    bool_op                        shift and go to state 139

state 166

    (89) expr -> expr bool_op expr .
    (88) expr -> expr . arith_op expr
    (89) expr -> expr . bool_op expr
    (96) arith_op -> . PLUS
    (97) arith_op -> . MINUS
    (98) arith_op -> . TIMES
    (99) arith_op -> . DIVIDE
    (100) bool_op -> . AND
    (101) bool_op -> . OR
    (102) bool_op -> . EQUALSCOMPARE
    (103) bool_op -> . NOTEQUALS
    (104) bool_op -> . LESSTHAN
    (105) bool_op -> . GREATERTHAN
    (106) bool_op -> . LESSTHANOREQ
    (107) bool_op -> . GREATERTHANOREQ

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUALSCOMPARE resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANOREQ resolved as shift
  ! shift/reduce conflict for GREATERTHANOREQ resolved as shift
    RPAREN          reduce using rule 89 (expr -> expr bool_op expr .)
    SEMICOLON       reduce using rule 89 (expr -> expr bool_op expr .)
    COMMA           reduce using rule 89 (expr -> expr bool_op expr .)
    PLUS            shift and go to state 140
    MINUS           shift and go to state 141
    TIMES           shift and go to state 142
    DIVIDE          shift and go to state 143
    AND             shift and go to state 144
    OR              shift and go to state 145
    EQUALSCOMPARE   shift and go to state 146
    NOTEQUALS       shift and go to state 147
    LESSTHAN        shift and go to state 148
    GREATERTHAN     shift and go to state 149
    LESSTHANOREQ    shift and go to state 150
    GREATERTHANOREQ shift and go to state 151

  ! PLUS            [ reduce using rule 89 (expr -> expr bool_op expr .) ]
  ! MINUS           [ reduce using rule 89 (expr -> expr bool_op expr .) ]
  ! TIMES           [ reduce using rule 89 (expr -> expr bool_op expr .) ]
  ! DIVIDE          [ reduce using rule 89 (expr -> expr bool_op expr .) ]
  ! AND             [ reduce using rule 89 (expr -> expr bool_op expr .) ]
  ! OR              [ reduce using rule 89 (expr -> expr bool_op expr .) ]
  ! EQUALSCOMPARE   [ reduce using rule 89 (expr -> expr bool_op expr .) ]
  ! NOTEQUALS       [ reduce using rule 89 (expr -> expr bool_op expr .) ]
  ! LESSTHAN        [ reduce using rule 89 (expr -> expr bool_op expr .) ]
  ! GREATERTHAN     [ reduce using rule 89 (expr -> expr bool_op expr .) ]
  ! LESSTHANOREQ    [ reduce using rule 89 (expr -> expr bool_op expr .) ]
  ! GREATERTHANOREQ [ reduce using rule 89 (expr -> expr bool_op expr .) ]

    bool_op                        shift and go to state 139
    arith_op                       shift and go to state 138

state 167

    (47) stmt -> WHILE LPAREN expr RPAREN . stmt
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (47) stmt -> . WHILE LPAREN expr RPAREN stmt
    (48) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (49) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (50) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (51) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON RPAREN stmt
    (52) stmt -> . FOR LPAREN SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (53) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON RPAREN stmt
    (54) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON RPAREN stmt
    (55) stmt -> . FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt
    (56) stmt -> . RETURN SEMICOLON
    (57) stmt -> . RETURN expr SEMICOLON
    (58) stmt -> . stmt_expr SEMICOLON
    (59) stmt -> . BREAK SEMICOLON
    (60) stmt -> . CONTINUE SEMICOLON
    (61) stmt -> . block
    (62) stmt -> . var_decl
    (63) stmt -> . SEMICOLON
    (111) stmt_expr -> . assign
    (112) stmt_expr -> . method_invocation
    (44) block -> . LBRACE stmt RBRACE
    (24) var_decl -> . type variables
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . BOOLEAN
    (28) type -> . VOID
    (29) type -> . ID
    (81) lhs -> . field_access
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE

    IF              shift and go to state 72
    WHILE           shift and go to state 74
    FOR             shift and go to state 75
    RETURN          shift and go to state 78
    BREAK           shift and go to state 79
    CONTINUE        shift and go to state 80
    SEMICOLON       shift and go to state 77
    LBRACE          shift and go to state 63
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    VOID            shift and go to state 56
    ID              shift and go to state 90
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    stmt                           shift and go to state 176
    stmt_expr                      shift and go to state 76
    block                          shift and go to state 81
    var_decl                       shift and go to state 82
    assign                         shift and go to state 83
    method_invocation              shift and go to state 84
    type                           shift and go to state 85
    lhs                            shift and go to state 86
    field_access                   shift and go to state 89
    primary                        shift and go to state 91
    literal                        shift and go to state 92

state 168

    (48) stmt -> FOR LPAREN stmt_expr SEMICOLON . expr SEMICOLON stmt_expr RPAREN stmt
    (50) stmt -> FOR LPAREN stmt_expr SEMICOLON . SEMICOLON stmt_expr RPAREN stmt
    (51) stmt -> FOR LPAREN stmt_expr SEMICOLON . expr SEMICOLON RPAREN stmt
    (53) stmt -> FOR LPAREN stmt_expr SEMICOLON . SEMICOLON RPAREN stmt
    (86) expr -> . primary
    (87) expr -> . assign
    (88) expr -> . expr arith_op expr
    (89) expr -> . expr bool_op expr
    (90) expr -> . unary_op expr
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (108) unary_op -> . PLUS
    (109) unary_op -> . MINUS
    (110) unary_op -> . NOT
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE
    (81) lhs -> . field_access
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID

    SEMICOLON       shift and go to state 177
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    NOT             shift and go to state 118
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101
    ID              shift and go to state 113

    expr                           shift and go to state 178
    primary                        shift and go to state 110
    assign                         shift and go to state 111
    unary_op                       shift and go to state 112
    literal                        shift and go to state 92
    lhs                            shift and go to state 114
    method_invocation              shift and go to state 115
    field_access                   shift and go to state 119

state 169

    (52) stmt -> FOR LPAREN SEMICOLON SEMICOLON . stmt_expr RPAREN stmt
    (55) stmt -> FOR LPAREN SEMICOLON SEMICOLON . RPAREN stmt
    (111) stmt_expr -> . assign
    (112) stmt_expr -> . method_invocation
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (81) lhs -> . field_access
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE

    RPAREN          shift and go to state 180
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    ID              shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    stmt_expr                      shift and go to state 179
    assign                         shift and go to state 83
    method_invocation              shift and go to state 84
    lhs                            shift and go to state 86
    field_access                   shift and go to state 89
    primary                        shift and go to state 91
    literal                        shift and go to state 92

state 170

    (49) stmt -> FOR LPAREN SEMICOLON expr . SEMICOLON stmt_expr RPAREN stmt
    (54) stmt -> FOR LPAREN SEMICOLON expr . SEMICOLON RPAREN stmt
    (88) expr -> expr . arith_op expr
    (89) expr -> expr . bool_op expr
    (96) arith_op -> . PLUS
    (97) arith_op -> . MINUS
    (98) arith_op -> . TIMES
    (99) arith_op -> . DIVIDE
    (100) bool_op -> . AND
    (101) bool_op -> . OR
    (102) bool_op -> . EQUALSCOMPARE
    (103) bool_op -> . NOTEQUALS
    (104) bool_op -> . LESSTHAN
    (105) bool_op -> . GREATERTHAN
    (106) bool_op -> . LESSTHANOREQ
    (107) bool_op -> . GREATERTHANOREQ

    SEMICOLON       shift and go to state 181
    PLUS            shift and go to state 140
    MINUS           shift and go to state 141
    TIMES           shift and go to state 142
    DIVIDE          shift and go to state 143
    AND             shift and go to state 144
    OR              shift and go to state 145
    EQUALSCOMPARE   shift and go to state 146
    NOTEQUALS       shift and go to state 147
    LESSTHAN        shift and go to state 148
    GREATERTHAN     shift and go to state 149
    LESSTHANOREQ    shift and go to state 150
    GREATERTHANOREQ shift and go to state 151

    arith_op                       shift and go to state 138
    bool_op                        shift and go to state 139

state 171

    (85) method_invocation -> field_access LPAREN arguments RPAREN .

    SEMICOLON       reduce using rule 85 (method_invocation -> field_access LPAREN arguments RPAREN .)
    PERIOD          reduce using rule 85 (method_invocation -> field_access LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 85 (method_invocation -> field_access LPAREN arguments RPAREN .)
    PLUS            reduce using rule 85 (method_invocation -> field_access LPAREN arguments RPAREN .)
    MINUS           reduce using rule 85 (method_invocation -> field_access LPAREN arguments RPAREN .)
    TIMES           reduce using rule 85 (method_invocation -> field_access LPAREN arguments RPAREN .)
    DIVIDE          reduce using rule 85 (method_invocation -> field_access LPAREN arguments RPAREN .)
    AND             reduce using rule 85 (method_invocation -> field_access LPAREN arguments RPAREN .)
    OR              reduce using rule 85 (method_invocation -> field_access LPAREN arguments RPAREN .)
    EQUALSCOMPARE   reduce using rule 85 (method_invocation -> field_access LPAREN arguments RPAREN .)
    NOTEQUALS       reduce using rule 85 (method_invocation -> field_access LPAREN arguments RPAREN .)
    LESSTHAN        reduce using rule 85 (method_invocation -> field_access LPAREN arguments RPAREN .)
    GREATERTHAN     reduce using rule 85 (method_invocation -> field_access LPAREN arguments RPAREN .)
    LESSTHANOREQ    reduce using rule 85 (method_invocation -> field_access LPAREN arguments RPAREN .)
    GREATERTHANOREQ reduce using rule 85 (method_invocation -> field_access LPAREN arguments RPAREN .)
    COMMA           reduce using rule 85 (method_invocation -> field_access LPAREN arguments RPAREN .)


state 172

    (79) arguments -> arguments COMMA . expr
    (86) expr -> . primary
    (87) expr -> . assign
    (88) expr -> . expr arith_op expr
    (89) expr -> . expr bool_op expr
    (90) expr -> . unary_op expr
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (108) unary_op -> . PLUS
    (109) unary_op -> . MINUS
    (110) unary_op -> . NOT
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE
    (81) lhs -> . field_access
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID

    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    NOT             shift and go to state 118
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101
    ID              shift and go to state 113

    expr                           shift and go to state 182
    primary                        shift and go to state 110
    assign                         shift and go to state 111
    unary_op                       shift and go to state 112
    literal                        shift and go to state 92
    lhs                            shift and go to state 114
    method_invocation              shift and go to state 115
    field_access                   shift and go to state 119

state 173

    (74) primary -> NEW ID LPAREN arguments . RPAREN
    (79) arguments -> arguments . COMMA expr

    RPAREN          shift and go to state 183
    COMMA           shift and go to state 172


state 174

    (75) primary -> NEW ID LPAREN RPAREN .

    PERIOD          reduce using rule 75 (primary -> NEW ID LPAREN RPAREN .)
    RPAREN          reduce using rule 75 (primary -> NEW ID LPAREN RPAREN .)
    PLUS            reduce using rule 75 (primary -> NEW ID LPAREN RPAREN .)
    MINUS           reduce using rule 75 (primary -> NEW ID LPAREN RPAREN .)
    TIMES           reduce using rule 75 (primary -> NEW ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 75 (primary -> NEW ID LPAREN RPAREN .)
    AND             reduce using rule 75 (primary -> NEW ID LPAREN RPAREN .)
    OR              reduce using rule 75 (primary -> NEW ID LPAREN RPAREN .)
    EQUALSCOMPARE   reduce using rule 75 (primary -> NEW ID LPAREN RPAREN .)
    NOTEQUALS       reduce using rule 75 (primary -> NEW ID LPAREN RPAREN .)
    LESSTHAN        reduce using rule 75 (primary -> NEW ID LPAREN RPAREN .)
    GREATERTHAN     reduce using rule 75 (primary -> NEW ID LPAREN RPAREN .)
    LESSTHANOREQ    reduce using rule 75 (primary -> NEW ID LPAREN RPAREN .)
    GREATERTHANOREQ reduce using rule 75 (primary -> NEW ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 75 (primary -> NEW ID LPAREN RPAREN .)
    COMMA           reduce using rule 75 (primary -> NEW ID LPAREN RPAREN .)


state 175

    (45) stmt -> IF LPAREN expr RPAREN stmt .
    (46) stmt -> IF LPAREN expr RPAREN stmt . ELSE stmt

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    ELSE            shift and go to state 184

  ! ELSE            [ reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .) ]


state 176

    (47) stmt -> WHILE LPAREN expr RPAREN stmt .

    RBRACE          reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    ELSE            reduce using rule 47 (stmt -> WHILE LPAREN expr RPAREN stmt .)


state 177

    (50) stmt -> FOR LPAREN stmt_expr SEMICOLON SEMICOLON . stmt_expr RPAREN stmt
    (53) stmt -> FOR LPAREN stmt_expr SEMICOLON SEMICOLON . RPAREN stmt
    (111) stmt_expr -> . assign
    (112) stmt_expr -> . method_invocation
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (81) lhs -> . field_access
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE

    RPAREN          shift and go to state 186
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    ID              shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    stmt_expr                      shift and go to state 185
    assign                         shift and go to state 83
    method_invocation              shift and go to state 84
    lhs                            shift and go to state 86
    field_access                   shift and go to state 89
    primary                        shift and go to state 91
    literal                        shift and go to state 92

state 178

    (48) stmt -> FOR LPAREN stmt_expr SEMICOLON expr . SEMICOLON stmt_expr RPAREN stmt
    (51) stmt -> FOR LPAREN stmt_expr SEMICOLON expr . SEMICOLON RPAREN stmt
    (88) expr -> expr . arith_op expr
    (89) expr -> expr . bool_op expr
    (96) arith_op -> . PLUS
    (97) arith_op -> . MINUS
    (98) arith_op -> . TIMES
    (99) arith_op -> . DIVIDE
    (100) bool_op -> . AND
    (101) bool_op -> . OR
    (102) bool_op -> . EQUALSCOMPARE
    (103) bool_op -> . NOTEQUALS
    (104) bool_op -> . LESSTHAN
    (105) bool_op -> . GREATERTHAN
    (106) bool_op -> . LESSTHANOREQ
    (107) bool_op -> . GREATERTHANOREQ

    SEMICOLON       shift and go to state 187
    PLUS            shift and go to state 140
    MINUS           shift and go to state 141
    TIMES           shift and go to state 142
    DIVIDE          shift and go to state 143
    AND             shift and go to state 144
    OR              shift and go to state 145
    EQUALSCOMPARE   shift and go to state 146
    NOTEQUALS       shift and go to state 147
    LESSTHAN        shift and go to state 148
    GREATERTHAN     shift and go to state 149
    LESSTHANOREQ    shift and go to state 150
    GREATERTHANOREQ shift and go to state 151

    arith_op                       shift and go to state 138
    bool_op                        shift and go to state 139

state 179

    (52) stmt -> FOR LPAREN SEMICOLON SEMICOLON stmt_expr . RPAREN stmt

    RPAREN          shift and go to state 188


state 180

    (55) stmt -> FOR LPAREN SEMICOLON SEMICOLON RPAREN . stmt
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (47) stmt -> . WHILE LPAREN expr RPAREN stmt
    (48) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (49) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (50) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (51) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON RPAREN stmt
    (52) stmt -> . FOR LPAREN SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (53) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON RPAREN stmt
    (54) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON RPAREN stmt
    (55) stmt -> . FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt
    (56) stmt -> . RETURN SEMICOLON
    (57) stmt -> . RETURN expr SEMICOLON
    (58) stmt -> . stmt_expr SEMICOLON
    (59) stmt -> . BREAK SEMICOLON
    (60) stmt -> . CONTINUE SEMICOLON
    (61) stmt -> . block
    (62) stmt -> . var_decl
    (63) stmt -> . SEMICOLON
    (111) stmt_expr -> . assign
    (112) stmt_expr -> . method_invocation
    (44) block -> . LBRACE stmt RBRACE
    (24) var_decl -> . type variables
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . BOOLEAN
    (28) type -> . VOID
    (29) type -> . ID
    (81) lhs -> . field_access
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE

    IF              shift and go to state 72
    WHILE           shift and go to state 74
    FOR             shift and go to state 75
    RETURN          shift and go to state 78
    BREAK           shift and go to state 79
    CONTINUE        shift and go to state 80
    SEMICOLON       shift and go to state 77
    LBRACE          shift and go to state 63
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    VOID            shift and go to state 56
    ID              shift and go to state 90
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    stmt                           shift and go to state 189
    stmt_expr                      shift and go to state 76
    block                          shift and go to state 81
    var_decl                       shift and go to state 82
    assign                         shift and go to state 83
    method_invocation              shift and go to state 84
    type                           shift and go to state 85
    lhs                            shift and go to state 86
    field_access                   shift and go to state 89
    primary                        shift and go to state 91
    literal                        shift and go to state 92

state 181

    (49) stmt -> FOR LPAREN SEMICOLON expr SEMICOLON . stmt_expr RPAREN stmt
    (54) stmt -> FOR LPAREN SEMICOLON expr SEMICOLON . RPAREN stmt
    (111) stmt_expr -> . assign
    (112) stmt_expr -> . method_invocation
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (81) lhs -> . field_access
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE

    RPAREN          shift and go to state 191
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    ID              shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    stmt_expr                      shift and go to state 190
    assign                         shift and go to state 83
    method_invocation              shift and go to state 84
    lhs                            shift and go to state 86
    field_access                   shift and go to state 89
    primary                        shift and go to state 91
    literal                        shift and go to state 92

state 182

    (79) arguments -> arguments COMMA expr .
    (88) expr -> expr . arith_op expr
    (89) expr -> expr . bool_op expr
    (96) arith_op -> . PLUS
    (97) arith_op -> . MINUS
    (98) arith_op -> . TIMES
    (99) arith_op -> . DIVIDE
    (100) bool_op -> . AND
    (101) bool_op -> . OR
    (102) bool_op -> . EQUALSCOMPARE
    (103) bool_op -> . NOTEQUALS
    (104) bool_op -> . LESSTHAN
    (105) bool_op -> . GREATERTHAN
    (106) bool_op -> . LESSTHANOREQ
    (107) bool_op -> . GREATERTHANOREQ

    RPAREN          reduce using rule 79 (arguments -> arguments COMMA expr .)
    COMMA           reduce using rule 79 (arguments -> arguments COMMA expr .)
    PLUS            shift and go to state 140
    MINUS           shift and go to state 141
    TIMES           shift and go to state 142
    DIVIDE          shift and go to state 143
    AND             shift and go to state 144
    OR              shift and go to state 145
    EQUALSCOMPARE   shift and go to state 146
    NOTEQUALS       shift and go to state 147
    LESSTHAN        shift and go to state 148
    GREATERTHAN     shift and go to state 149
    LESSTHANOREQ    shift and go to state 150
    GREATERTHANOREQ shift and go to state 151

    arith_op                       shift and go to state 138
    bool_op                        shift and go to state 139

state 183

    (74) primary -> NEW ID LPAREN arguments RPAREN .

    PERIOD          reduce using rule 74 (primary -> NEW ID LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 74 (primary -> NEW ID LPAREN arguments RPAREN .)
    PLUS            reduce using rule 74 (primary -> NEW ID LPAREN arguments RPAREN .)
    MINUS           reduce using rule 74 (primary -> NEW ID LPAREN arguments RPAREN .)
    TIMES           reduce using rule 74 (primary -> NEW ID LPAREN arguments RPAREN .)
    DIVIDE          reduce using rule 74 (primary -> NEW ID LPAREN arguments RPAREN .)
    AND             reduce using rule 74 (primary -> NEW ID LPAREN arguments RPAREN .)
    OR              reduce using rule 74 (primary -> NEW ID LPAREN arguments RPAREN .)
    EQUALSCOMPARE   reduce using rule 74 (primary -> NEW ID LPAREN arguments RPAREN .)
    NOTEQUALS       reduce using rule 74 (primary -> NEW ID LPAREN arguments RPAREN .)
    LESSTHAN        reduce using rule 74 (primary -> NEW ID LPAREN arguments RPAREN .)
    GREATERTHAN     reduce using rule 74 (primary -> NEW ID LPAREN arguments RPAREN .)
    LESSTHANOREQ    reduce using rule 74 (primary -> NEW ID LPAREN arguments RPAREN .)
    GREATERTHANOREQ reduce using rule 74 (primary -> NEW ID LPAREN arguments RPAREN .)
    SEMICOLON       reduce using rule 74 (primary -> NEW ID LPAREN arguments RPAREN .)
    COMMA           reduce using rule 74 (primary -> NEW ID LPAREN arguments RPAREN .)


state 184

    (46) stmt -> IF LPAREN expr RPAREN stmt ELSE . stmt
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (47) stmt -> . WHILE LPAREN expr RPAREN stmt
    (48) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (49) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (50) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (51) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON RPAREN stmt
    (52) stmt -> . FOR LPAREN SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (53) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON RPAREN stmt
    (54) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON RPAREN stmt
    (55) stmt -> . FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt
    (56) stmt -> . RETURN SEMICOLON
    (57) stmt -> . RETURN expr SEMICOLON
    (58) stmt -> . stmt_expr SEMICOLON
    (59) stmt -> . BREAK SEMICOLON
    (60) stmt -> . CONTINUE SEMICOLON
    (61) stmt -> . block
    (62) stmt -> . var_decl
    (63) stmt -> . SEMICOLON
    (111) stmt_expr -> . assign
    (112) stmt_expr -> . method_invocation
    (44) block -> . LBRACE stmt RBRACE
    (24) var_decl -> . type variables
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . BOOLEAN
    (28) type -> . VOID
    (29) type -> . ID
    (81) lhs -> . field_access
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE

    IF              shift and go to state 72
    WHILE           shift and go to state 74
    FOR             shift and go to state 75
    RETURN          shift and go to state 78
    BREAK           shift and go to state 79
    CONTINUE        shift and go to state 80
    SEMICOLON       shift and go to state 77
    LBRACE          shift and go to state 63
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    VOID            shift and go to state 56
    ID              shift and go to state 90
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    stmt                           shift and go to state 192
    stmt_expr                      shift and go to state 76
    block                          shift and go to state 81
    var_decl                       shift and go to state 82
    assign                         shift and go to state 83
    method_invocation              shift and go to state 84
    type                           shift and go to state 85
    lhs                            shift and go to state 86
    field_access                   shift and go to state 89
    primary                        shift and go to state 91
    literal                        shift and go to state 92

state 185

    (50) stmt -> FOR LPAREN stmt_expr SEMICOLON SEMICOLON stmt_expr . RPAREN stmt

    RPAREN          shift and go to state 193


state 186

    (53) stmt -> FOR LPAREN stmt_expr SEMICOLON SEMICOLON RPAREN . stmt
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (47) stmt -> . WHILE LPAREN expr RPAREN stmt
    (48) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (49) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (50) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (51) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON RPAREN stmt
    (52) stmt -> . FOR LPAREN SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (53) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON RPAREN stmt
    (54) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON RPAREN stmt
    (55) stmt -> . FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt
    (56) stmt -> . RETURN SEMICOLON
    (57) stmt -> . RETURN expr SEMICOLON
    (58) stmt -> . stmt_expr SEMICOLON
    (59) stmt -> . BREAK SEMICOLON
    (60) stmt -> . CONTINUE SEMICOLON
    (61) stmt -> . block
    (62) stmt -> . var_decl
    (63) stmt -> . SEMICOLON
    (111) stmt_expr -> . assign
    (112) stmt_expr -> . method_invocation
    (44) block -> . LBRACE stmt RBRACE
    (24) var_decl -> . type variables
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . BOOLEAN
    (28) type -> . VOID
    (29) type -> . ID
    (81) lhs -> . field_access
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE

    IF              shift and go to state 72
    WHILE           shift and go to state 74
    FOR             shift and go to state 75
    RETURN          shift and go to state 78
    BREAK           shift and go to state 79
    CONTINUE        shift and go to state 80
    SEMICOLON       shift and go to state 77
    LBRACE          shift and go to state 63
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    VOID            shift and go to state 56
    ID              shift and go to state 90
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    stmt_expr                      shift and go to state 76
    stmt                           shift and go to state 194
    block                          shift and go to state 81
    var_decl                       shift and go to state 82
    assign                         shift and go to state 83
    method_invocation              shift and go to state 84
    type                           shift and go to state 85
    lhs                            shift and go to state 86
    field_access                   shift and go to state 89
    primary                        shift and go to state 91
    literal                        shift and go to state 92

state 187

    (48) stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON . stmt_expr RPAREN stmt
    (51) stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON . RPAREN stmt
    (111) stmt_expr -> . assign
    (112) stmt_expr -> . method_invocation
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (81) lhs -> . field_access
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE

    RPAREN          shift and go to state 196
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    ID              shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    stmt_expr                      shift and go to state 195
    assign                         shift and go to state 83
    method_invocation              shift and go to state 84
    lhs                            shift and go to state 86
    field_access                   shift and go to state 89
    primary                        shift and go to state 91
    literal                        shift and go to state 92

state 188

    (52) stmt -> FOR LPAREN SEMICOLON SEMICOLON stmt_expr RPAREN . stmt
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (47) stmt -> . WHILE LPAREN expr RPAREN stmt
    (48) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (49) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (50) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (51) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON RPAREN stmt
    (52) stmt -> . FOR LPAREN SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (53) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON RPAREN stmt
    (54) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON RPAREN stmt
    (55) stmt -> . FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt
    (56) stmt -> . RETURN SEMICOLON
    (57) stmt -> . RETURN expr SEMICOLON
    (58) stmt -> . stmt_expr SEMICOLON
    (59) stmt -> . BREAK SEMICOLON
    (60) stmt -> . CONTINUE SEMICOLON
    (61) stmt -> . block
    (62) stmt -> . var_decl
    (63) stmt -> . SEMICOLON
    (111) stmt_expr -> . assign
    (112) stmt_expr -> . method_invocation
    (44) block -> . LBRACE stmt RBRACE
    (24) var_decl -> . type variables
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . BOOLEAN
    (28) type -> . VOID
    (29) type -> . ID
    (81) lhs -> . field_access
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE

    IF              shift and go to state 72
    WHILE           shift and go to state 74
    FOR             shift and go to state 75
    RETURN          shift and go to state 78
    BREAK           shift and go to state 79
    CONTINUE        shift and go to state 80
    SEMICOLON       shift and go to state 77
    LBRACE          shift and go to state 63
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    VOID            shift and go to state 56
    ID              shift and go to state 90
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    stmt_expr                      shift and go to state 76
    stmt                           shift and go to state 197
    block                          shift and go to state 81
    var_decl                       shift and go to state 82
    assign                         shift and go to state 83
    method_invocation              shift and go to state 84
    type                           shift and go to state 85
    lhs                            shift and go to state 86
    field_access                   shift and go to state 89
    primary                        shift and go to state 91
    literal                        shift and go to state 92

state 189

    (55) stmt -> FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt .

    RBRACE          reduce using rule 55 (stmt -> FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt .)
    ELSE            reduce using rule 55 (stmt -> FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt .)


state 190

    (49) stmt -> FOR LPAREN SEMICOLON expr SEMICOLON stmt_expr . RPAREN stmt

    RPAREN          shift and go to state 198


state 191

    (54) stmt -> FOR LPAREN SEMICOLON expr SEMICOLON RPAREN . stmt
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (47) stmt -> . WHILE LPAREN expr RPAREN stmt
    (48) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (49) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (50) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (51) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON RPAREN stmt
    (52) stmt -> . FOR LPAREN SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (53) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON RPAREN stmt
    (54) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON RPAREN stmt
    (55) stmt -> . FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt
    (56) stmt -> . RETURN SEMICOLON
    (57) stmt -> . RETURN expr SEMICOLON
    (58) stmt -> . stmt_expr SEMICOLON
    (59) stmt -> . BREAK SEMICOLON
    (60) stmt -> . CONTINUE SEMICOLON
    (61) stmt -> . block
    (62) stmt -> . var_decl
    (63) stmt -> . SEMICOLON
    (111) stmt_expr -> . assign
    (112) stmt_expr -> . method_invocation
    (44) block -> . LBRACE stmt RBRACE
    (24) var_decl -> . type variables
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . BOOLEAN
    (28) type -> . VOID
    (29) type -> . ID
    (81) lhs -> . field_access
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE

    IF              shift and go to state 72
    WHILE           shift and go to state 74
    FOR             shift and go to state 75
    RETURN          shift and go to state 78
    BREAK           shift and go to state 79
    CONTINUE        shift and go to state 80
    SEMICOLON       shift and go to state 77
    LBRACE          shift and go to state 63
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    VOID            shift and go to state 56
    ID              shift and go to state 90
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    stmt                           shift and go to state 199
    stmt_expr                      shift and go to state 76
    block                          shift and go to state 81
    var_decl                       shift and go to state 82
    assign                         shift and go to state 83
    method_invocation              shift and go to state 84
    type                           shift and go to state 85
    lhs                            shift and go to state 86
    field_access                   shift and go to state 89
    primary                        shift and go to state 91
    literal                        shift and go to state 92

state 192

    (46) stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .

    RBRACE          reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    ELSE            reduce using rule 46 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)


state 193

    (50) stmt -> FOR LPAREN stmt_expr SEMICOLON SEMICOLON stmt_expr RPAREN . stmt
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (47) stmt -> . WHILE LPAREN expr RPAREN stmt
    (48) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (49) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (50) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (51) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON RPAREN stmt
    (52) stmt -> . FOR LPAREN SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (53) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON RPAREN stmt
    (54) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON RPAREN stmt
    (55) stmt -> . FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt
    (56) stmt -> . RETURN SEMICOLON
    (57) stmt -> . RETURN expr SEMICOLON
    (58) stmt -> . stmt_expr SEMICOLON
    (59) stmt -> . BREAK SEMICOLON
    (60) stmt -> . CONTINUE SEMICOLON
    (61) stmt -> . block
    (62) stmt -> . var_decl
    (63) stmt -> . SEMICOLON
    (111) stmt_expr -> . assign
    (112) stmt_expr -> . method_invocation
    (44) block -> . LBRACE stmt RBRACE
    (24) var_decl -> . type variables
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . BOOLEAN
    (28) type -> . VOID
    (29) type -> . ID
    (81) lhs -> . field_access
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE

    IF              shift and go to state 72
    WHILE           shift and go to state 74
    FOR             shift and go to state 75
    RETURN          shift and go to state 78
    BREAK           shift and go to state 79
    CONTINUE        shift and go to state 80
    SEMICOLON       shift and go to state 77
    LBRACE          shift and go to state 63
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    VOID            shift and go to state 56
    ID              shift and go to state 90
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    stmt_expr                      shift and go to state 76
    stmt                           shift and go to state 200
    block                          shift and go to state 81
    var_decl                       shift and go to state 82
    assign                         shift and go to state 83
    method_invocation              shift and go to state 84
    type                           shift and go to state 85
    lhs                            shift and go to state 86
    field_access                   shift and go to state 89
    primary                        shift and go to state 91
    literal                        shift and go to state 92

state 194

    (53) stmt -> FOR LPAREN stmt_expr SEMICOLON SEMICOLON RPAREN stmt .

    RBRACE          reduce using rule 53 (stmt -> FOR LPAREN stmt_expr SEMICOLON SEMICOLON RPAREN stmt .)
    ELSE            reduce using rule 53 (stmt -> FOR LPAREN stmt_expr SEMICOLON SEMICOLON RPAREN stmt .)


state 195

    (48) stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr . RPAREN stmt

    RPAREN          shift and go to state 201


state 196

    (51) stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON RPAREN . stmt
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (47) stmt -> . WHILE LPAREN expr RPAREN stmt
    (48) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (49) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (50) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (51) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON RPAREN stmt
    (52) stmt -> . FOR LPAREN SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (53) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON RPAREN stmt
    (54) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON RPAREN stmt
    (55) stmt -> . FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt
    (56) stmt -> . RETURN SEMICOLON
    (57) stmt -> . RETURN expr SEMICOLON
    (58) stmt -> . stmt_expr SEMICOLON
    (59) stmt -> . BREAK SEMICOLON
    (60) stmt -> . CONTINUE SEMICOLON
    (61) stmt -> . block
    (62) stmt -> . var_decl
    (63) stmt -> . SEMICOLON
    (111) stmt_expr -> . assign
    (112) stmt_expr -> . method_invocation
    (44) block -> . LBRACE stmt RBRACE
    (24) var_decl -> . type variables
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . BOOLEAN
    (28) type -> . VOID
    (29) type -> . ID
    (81) lhs -> . field_access
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE

    IF              shift and go to state 72
    WHILE           shift and go to state 74
    FOR             shift and go to state 75
    RETURN          shift and go to state 78
    BREAK           shift and go to state 79
    CONTINUE        shift and go to state 80
    SEMICOLON       shift and go to state 77
    LBRACE          shift and go to state 63
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    VOID            shift and go to state 56
    ID              shift and go to state 90
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    stmt_expr                      shift and go to state 76
    stmt                           shift and go to state 202
    block                          shift and go to state 81
    var_decl                       shift and go to state 82
    assign                         shift and go to state 83
    method_invocation              shift and go to state 84
    type                           shift and go to state 85
    lhs                            shift and go to state 86
    field_access                   shift and go to state 89
    primary                        shift and go to state 91
    literal                        shift and go to state 92

state 197

    (52) stmt -> FOR LPAREN SEMICOLON SEMICOLON stmt_expr RPAREN stmt .

    RBRACE          reduce using rule 52 (stmt -> FOR LPAREN SEMICOLON SEMICOLON stmt_expr RPAREN stmt .)
    ELSE            reduce using rule 52 (stmt -> FOR LPAREN SEMICOLON SEMICOLON stmt_expr RPAREN stmt .)


state 198

    (49) stmt -> FOR LPAREN SEMICOLON expr SEMICOLON stmt_expr RPAREN . stmt
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (47) stmt -> . WHILE LPAREN expr RPAREN stmt
    (48) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (49) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (50) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (51) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON RPAREN stmt
    (52) stmt -> . FOR LPAREN SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (53) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON RPAREN stmt
    (54) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON RPAREN stmt
    (55) stmt -> . FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt
    (56) stmt -> . RETURN SEMICOLON
    (57) stmt -> . RETURN expr SEMICOLON
    (58) stmt -> . stmt_expr SEMICOLON
    (59) stmt -> . BREAK SEMICOLON
    (60) stmt -> . CONTINUE SEMICOLON
    (61) stmt -> . block
    (62) stmt -> . var_decl
    (63) stmt -> . SEMICOLON
    (111) stmt_expr -> . assign
    (112) stmt_expr -> . method_invocation
    (44) block -> . LBRACE stmt RBRACE
    (24) var_decl -> . type variables
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . BOOLEAN
    (28) type -> . VOID
    (29) type -> . ID
    (81) lhs -> . field_access
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE

    IF              shift and go to state 72
    WHILE           shift and go to state 74
    FOR             shift and go to state 75
    RETURN          shift and go to state 78
    BREAK           shift and go to state 79
    CONTINUE        shift and go to state 80
    SEMICOLON       shift and go to state 77
    LBRACE          shift and go to state 63
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    VOID            shift and go to state 56
    ID              shift and go to state 90
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    stmt_expr                      shift and go to state 76
    stmt                           shift and go to state 203
    block                          shift and go to state 81
    var_decl                       shift and go to state 82
    assign                         shift and go to state 83
    method_invocation              shift and go to state 84
    type                           shift and go to state 85
    lhs                            shift and go to state 86
    field_access                   shift and go to state 89
    primary                        shift and go to state 91
    literal                        shift and go to state 92

state 199

    (54) stmt -> FOR LPAREN SEMICOLON expr SEMICOLON RPAREN stmt .

    RBRACE          reduce using rule 54 (stmt -> FOR LPAREN SEMICOLON expr SEMICOLON RPAREN stmt .)
    ELSE            reduce using rule 54 (stmt -> FOR LPAREN SEMICOLON expr SEMICOLON RPAREN stmt .)


state 200

    (50) stmt -> FOR LPAREN stmt_expr SEMICOLON SEMICOLON stmt_expr RPAREN stmt .

    RBRACE          reduce using rule 50 (stmt -> FOR LPAREN stmt_expr SEMICOLON SEMICOLON stmt_expr RPAREN stmt .)
    ELSE            reduce using rule 50 (stmt -> FOR LPAREN stmt_expr SEMICOLON SEMICOLON stmt_expr RPAREN stmt .)


state 201

    (48) stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN . stmt
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (47) stmt -> . WHILE LPAREN expr RPAREN stmt
    (48) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (49) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (50) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (51) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON RPAREN stmt
    (52) stmt -> . FOR LPAREN SEMICOLON SEMICOLON stmt_expr RPAREN stmt
    (53) stmt -> . FOR LPAREN stmt_expr SEMICOLON SEMICOLON RPAREN stmt
    (54) stmt -> . FOR LPAREN SEMICOLON expr SEMICOLON RPAREN stmt
    (55) stmt -> . FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt
    (56) stmt -> . RETURN SEMICOLON
    (57) stmt -> . RETURN expr SEMICOLON
    (58) stmt -> . stmt_expr SEMICOLON
    (59) stmt -> . BREAK SEMICOLON
    (60) stmt -> . CONTINUE SEMICOLON
    (61) stmt -> . block
    (62) stmt -> . var_decl
    (63) stmt -> . SEMICOLON
    (111) stmt_expr -> . assign
    (112) stmt_expr -> . method_invocation
    (44) block -> . LBRACE stmt RBRACE
    (24) var_decl -> . type variables
    (91) assign -> . lhs EQUALS expr
    (92) assign -> . lhs PLUSPLUS
    (93) assign -> . PLUSPLUS lhs
    (94) assign -> . lhs MINUSMINUS
    (95) assign -> . MINUSMINUS lhs
    (84) method_invocation -> . field_access LPAREN RPAREN
    (85) method_invocation -> . field_access LPAREN arguments RPAREN
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . BOOLEAN
    (28) type -> . VOID
    (29) type -> . ID
    (81) lhs -> . field_access
    (82) field_access -> . primary PERIOD ID
    (83) field_access -> . ID
    (70) primary -> . literal
    (71) primary -> . THIS
    (72) primary -> . SUPER
    (73) primary -> . LPAREN expr RPAREN
    (74) primary -> . NEW ID LPAREN arguments RPAREN
    (75) primary -> . NEW ID LPAREN RPAREN
    (76) primary -> . lhs
    (77) primary -> . method_invocation
    (64) literal -> . INTCONST
    (65) literal -> . FLOATCONST
    (66) literal -> . STRINGCONST
    (67) literal -> . NULL
    (68) literal -> . TRUE
    (69) literal -> . FALSE

    IF              shift and go to state 72
    WHILE           shift and go to state 74
    FOR             shift and go to state 75
    RETURN          shift and go to state 78
    BREAK           shift and go to state 79
    CONTINUE        shift and go to state 80
    SEMICOLON       shift and go to state 77
    LBRACE          shift and go to state 63
    PLUSPLUS        shift and go to state 87
    MINUSMINUS      shift and go to state 88
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    VOID            shift and go to state 56
    ID              shift and go to state 90
    THIS            shift and go to state 93
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 73
    NEW             shift and go to state 95
    INTCONST        shift and go to state 96
    FLOATCONST      shift and go to state 97
    STRINGCONST     shift and go to state 98
    NULL            shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    stmt_expr                      shift and go to state 76
    stmt                           shift and go to state 204
    block                          shift and go to state 81
    var_decl                       shift and go to state 82
    assign                         shift and go to state 83
    method_invocation              shift and go to state 84
    type                           shift and go to state 85
    lhs                            shift and go to state 86
    field_access                   shift and go to state 89
    primary                        shift and go to state 91
    literal                        shift and go to state 92

state 202

    (51) stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON RPAREN stmt .

    RBRACE          reduce using rule 51 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON RPAREN stmt .)
    ELSE            reduce using rule 51 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON RPAREN stmt .)


state 203

    (49) stmt -> FOR LPAREN SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .

    RBRACE          reduce using rule 49 (stmt -> FOR LPAREN SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    ELSE            reduce using rule 49 (stmt -> FOR LPAREN SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)


state 204

    (48) stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .

    RBRACE          reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    ELSE            reduce using rule 48 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 29 resolved as shift
WARNING: shift/reduce conflict for ID in state 31 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 45 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 48 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 57 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 132 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 152 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 152 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 152 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 152 resolved as shift
WARNING: shift/reduce conflict for AND in state 152 resolved as shift
WARNING: shift/reduce conflict for OR in state 152 resolved as shift
WARNING: shift/reduce conflict for EQUALSCOMPARE in state 152 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 152 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 152 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 152 resolved as shift
WARNING: shift/reduce conflict for LESSTHANOREQ in state 152 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANOREQ in state 152 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 157 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 157 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 157 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 157 resolved as shift
WARNING: shift/reduce conflict for AND in state 157 resolved as shift
WARNING: shift/reduce conflict for OR in state 157 resolved as shift
WARNING: shift/reduce conflict for EQUALSCOMPARE in state 157 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 157 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 157 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 157 resolved as shift
WARNING: shift/reduce conflict for LESSTHANOREQ in state 157 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANOREQ in state 157 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 163 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 165 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 165 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 165 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 165 resolved as shift
WARNING: shift/reduce conflict for AND in state 165 resolved as shift
WARNING: shift/reduce conflict for OR in state 165 resolved as shift
WARNING: shift/reduce conflict for EQUALSCOMPARE in state 165 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 165 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 165 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 165 resolved as shift
WARNING: shift/reduce conflict for LESSTHANOREQ in state 165 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANOREQ in state 165 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 166 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 166 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 166 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 166 resolved as shift
WARNING: shift/reduce conflict for AND in state 166 resolved as shift
WARNING: shift/reduce conflict for OR in state 166 resolved as shift
WARNING: shift/reduce conflict for EQUALSCOMPARE in state 166 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 166 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 166 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 166 resolved as shift
WARNING: shift/reduce conflict for LESSTHANOREQ in state 166 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANOREQ in state 166 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 175 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (empty -> <empty>)
WARNING: rejected rule (program -> class_decl) in state 2
WARNING: reduce/reduce conflict in state 11 resolved using rule (empty -> <empty>)
WARNING: rejected rule (class_body_decl -> field_decl) in state 11
WARNING: reduce/reduce conflict in state 12 resolved using rule (empty -> <empty>)
WARNING: rejected rule (class_body_decl -> method_decl) in state 12
WARNING: reduce/reduce conflict in state 13 resolved using rule (empty -> <empty>)
WARNING: rejected rule (class_body_decl -> constructor_decl) in state 13
WARNING: Rule (program -> class_decl) is never reduced
WARNING: Rule (class_body_decl -> field_decl) is never reduced
WARNING: Rule (class_body_decl -> method_decl) is never reduced
WARNING: Rule (class_body_decl -> constructor_decl) is never reduced
