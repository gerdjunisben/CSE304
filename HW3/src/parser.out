Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DECLARE
    DO
    LBRACKET
    NEWLINE
    NUMBER
    RBRACKET
    STRING
    SYMBOLS
    TERMINALS

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> class_decl
Rule 3     program -> class_decl program
Rule 4     class_decl -> CLASS ID EXTENDS ID LBRACE class_body_decl RBRACE
Rule 5     class_decl -> CLASS ID LBRACE class_body_decl RBRACE
Rule 6     class_body_decl -> class_body_sub_decls
Rule 7     class_body_sub_decls -> field_decl SEMICOLON class_body_sub_decls
Rule 8     class_body_sub_decls -> method_decl class_body_sub_decls
Rule 9     class_body_sub_decls -> constructor_decl class_body_sub_decls
Rule 10    class_body_sub_decls -> empty
Rule 11    field_decl -> modifier var_decl
Rule 12    modifier -> PUBLIC STATIC
Rule 13    modifier -> PRIVATE STATIC
Rule 14    modifier -> PUBLIC
Rule 15    modifier -> PRIVATE
Rule 16    modifier -> STATIC
Rule 17    modifier -> empty
Rule 18    var_decl -> type variables
Rule 19    type -> INT
Rule 20    type -> FLOAT
Rule 21    type -> BOOLEAN
Rule 22    type -> VOID
Rule 23    type -> ID
Rule 24    variables -> variable
Rule 25    variables -> variables COMMA variable
Rule 26    variables -> empty
Rule 27    variable -> ID
Rule 28    method_decl -> modifier type ID LPAREN RPAREN block
Rule 29    method_decl -> modifier VOID ID LPAREN RPAREN block
Rule 30    method_decl -> modifier type ID LPAREN formals RPAREN block
Rule 31    method_decl -> modifier VOID ID LPAREN formals RPAREN block
Rule 32    method_decl -> modifier ID LPAREN RPAREN block
Rule 33    method_decl -> modifier ID LPAREN formals RPAREN block
Rule 34    constructor_decl -> modifier ID LPAREN RPAREN block
Rule 35    constructor_decl -> modifier ID LPAREN formals RPAREN block
Rule 36    formals -> formals COMMA formal_param
Rule 37    formals -> formal_param
Rule 38    formals -> empty
Rule 39    formal_param -> type variable
Rule 40    block -> LBRACE stmt RBRACE
Rule 41    stmt -> IF LPAREN expr RPAREN stmt
Rule 42    stmt -> IF LPAREN expr RPAREN stmt ELSE stmt
Rule 43    stmt -> WHILE LPAREN expr RPAREN stmt
Rule 44    stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
Rule 45    stmt -> RETURN SEMICOLON stmt
Rule 46    stmt -> RETURN expr SEMICOLON stmt
Rule 47    stmt -> stmt_expr SEMICOLON stmt
Rule 48    stmt -> BREAK SEMICOLON stmt
Rule 49    stmt -> CONTINUE SEMICOLON stmt
Rule 50    stmt -> block stmt
Rule 51    stmt -> var_decl SEMICOLON stmt
Rule 52    stmt -> SEMICOLON stmt
Rule 53    stmt -> empty
Rule 54    literal -> INTCONST
Rule 55    literal -> FLOATCONST
Rule 56    literal -> STRINGCONST
Rule 57    literal -> NULL
Rule 58    literal -> TRUE
Rule 59    literal -> FALSE
Rule 60    primary -> literal
Rule 61    primary -> THIS
Rule 62    primary -> SUPER
Rule 63    primary -> LPAREN expr RPAREN
Rule 64    primary -> NEW ID LPAREN arguments RPAREN
Rule 65    primary -> NEW ID LPAREN RPAREN
Rule 66    primary -> lhs
Rule 67    primary -> method_invocation
Rule 68    arguments -> expr
Rule 69    arguments -> arguments COMMA expr
Rule 70    arguments -> empty
Rule 71    lhs -> field_access
Rule 72    field_access -> primary PERIOD ID
Rule 73    field_access -> ID
Rule 74    method_invocation -> field_access LPAREN RPAREN
Rule 75    method_invocation -> field_access LPAREN arguments RPAREN
Rule 76    expr -> primary
Rule 77    expr -> assign
Rule 78    expr -> expr arith_op expr
Rule 79    expr -> expr bool_op expr
Rule 80    expr -> unary_op expr
Rule 81    assign -> lhs EQUALS expr
Rule 82    assign -> lhs PLUSPLUS
Rule 83    assign -> PLUSPLUS lhs
Rule 84    assign -> lhs MINUSMINUS
Rule 85    assign -> MINUSMINUS lhs
Rule 86    arith_op -> PLUS
Rule 87    arith_op -> MINUS
Rule 88    arith_op -> TIMES
Rule 89    arith_op -> DIVIDE
Rule 90    bool_op -> AND
Rule 91    bool_op -> OR
Rule 92    bool_op -> EQUALSCOMPARE
Rule 93    bool_op -> NOTEQUALS
Rule 94    bool_op -> LESSTHAN
Rule 95    bool_op -> GREATERTHAN
Rule 96    bool_op -> LESSTHANOREQ
Rule 97    bool_op -> GREATERTHANOREQ
Rule 98    unary_op -> PLUS
Rule 99    unary_op -> MINUS
Rule 100   unary_op -> NOT
Rule 101   stmt_expr -> assign
Rule 102   stmt_expr -> method_invocation

Terminals, with rules where they appear

AND                  : 90
BOOLEAN              : 21
BREAK                : 48
CLASS                : 4 5
COMMA                : 25 36 69
CONTINUE             : 49
DECLARE              : 
DIVIDE               : 89
DO                   : 
ELSE                 : 42
EQUALS               : 81
EQUALSCOMPARE        : 92
EXTENDS              : 4
FALSE                : 59
FLOAT                : 20
FLOATCONST           : 55
FOR                  : 44
GREATERTHAN          : 95
GREATERTHANOREQ      : 97
ID                   : 4 4 5 23 27 28 29 30 31 32 33 34 35 64 65 72 73
IF                   : 41 42
INT                  : 19
INTCONST             : 54
LBRACE               : 4 5 40
LBRACKET             : 
LESSTHAN             : 94
LESSTHANOREQ         : 96
LPAREN               : 28 29 30 31 32 33 34 35 41 42 43 44 63 64 65 74 75
MINUS                : 87 99
MINUSMINUS           : 84 85
NEW                  : 64 65
NEWLINE              : 
NOT                  : 100
NOTEQUALS            : 93
NULL                 : 57
NUMBER               : 
OR                   : 91
PERIOD               : 72
PLUS                 : 86 98
PLUSPLUS             : 82 83
PRIVATE              : 13 15
PUBLIC               : 12 14
RBRACE               : 4 5 40
RBRACKET             : 
RETURN               : 45 46
RPAREN               : 28 29 30 31 32 33 34 35 41 42 43 44 63 64 65 74 75
SEMICOLON            : 7 44 44 45 46 47 48 49 51 52
STATIC               : 12 13 16
STRING               : 
STRINGCONST          : 56
SUPER                : 62
SYMBOLS              : 
TERMINALS            : 
THIS                 : 61
TIMES                : 88
TRUE                 : 58
VOID                 : 22 29 31
WHILE                : 43
error                : 

Nonterminals, with rules where they appear

arguments            : 64 69 75
arith_op             : 78
assign               : 77 101
block                : 28 29 30 31 32 33 34 35 50
bool_op              : 79
class_body_decl      : 4 5
class_body_sub_decls : 6 7 8 9
class_decl           : 2 3
constructor_decl     : 9
empty                : 10 17 26 38 53 70
expr                 : 41 42 43 44 46 63 68 69 78 78 79 79 80 81
field_access         : 71 74 75
field_decl           : 7
formal_param         : 36 37
formals              : 30 31 33 35 36
lhs                  : 66 81 82 83 84 85
literal              : 60
method_decl          : 8
method_invocation    : 67 102
modifier             : 11 28 29 30 31 32 33 34 35
primary              : 72 76
program              : 3 0
stmt                 : 40 41 42 42 43 44 45 46 47 48 49 50 51 52
stmt_expr            : 44 44 47
type                 : 18 28 30 39
unary_op             : 80
var_decl             : 11 51
variable             : 24 25 39
variables            : 18 25

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . class_decl
    (3) program -> . class_decl program
    (4) class_decl -> . CLASS ID EXTENDS ID LBRACE class_body_decl RBRACE
    (5) class_decl -> . CLASS ID LBRACE class_body_decl RBRACE

    CLASS           shift and go to state 3

    program                        shift and go to state 1
    class_decl                     shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (2) program -> class_decl .
    (3) program -> class_decl . program
    (2) program -> . class_decl
    (3) program -> . class_decl program
    (4) class_decl -> . CLASS ID EXTENDS ID LBRACE class_body_decl RBRACE
    (5) class_decl -> . CLASS ID LBRACE class_body_decl RBRACE

    $end            reduce using rule 2 (program -> class_decl .)
    CLASS           shift and go to state 3

    class_decl                     shift and go to state 2
    program                        shift and go to state 4

state 3

    (4) class_decl -> CLASS . ID EXTENDS ID LBRACE class_body_decl RBRACE
    (5) class_decl -> CLASS . ID LBRACE class_body_decl RBRACE

    ID              shift and go to state 5


state 4

    (3) program -> class_decl program .

    $end            reduce using rule 3 (program -> class_decl program .)


state 5

    (4) class_decl -> CLASS ID . EXTENDS ID LBRACE class_body_decl RBRACE
    (5) class_decl -> CLASS ID . LBRACE class_body_decl RBRACE

    EXTENDS         shift and go to state 6
    LBRACE          shift and go to state 7


state 6

    (4) class_decl -> CLASS ID EXTENDS . ID LBRACE class_body_decl RBRACE

    ID              shift and go to state 8


state 7

    (5) class_decl -> CLASS ID LBRACE . class_body_decl RBRACE
    (6) class_body_decl -> . class_body_sub_decls
    (7) class_body_sub_decls -> . field_decl SEMICOLON class_body_sub_decls
    (8) class_body_sub_decls -> . method_decl class_body_sub_decls
    (9) class_body_sub_decls -> . constructor_decl class_body_sub_decls
    (10) class_body_sub_decls -> . empty
    (11) field_decl -> . modifier var_decl
    (28) method_decl -> . modifier type ID LPAREN RPAREN block
    (29) method_decl -> . modifier VOID ID LPAREN RPAREN block
    (30) method_decl -> . modifier type ID LPAREN formals RPAREN block
    (31) method_decl -> . modifier VOID ID LPAREN formals RPAREN block
    (32) method_decl -> . modifier ID LPAREN RPAREN block
    (33) method_decl -> . modifier ID LPAREN formals RPAREN block
    (34) constructor_decl -> . modifier ID LPAREN RPAREN block
    (35) constructor_decl -> . modifier ID LPAREN formals RPAREN block
    (1) empty -> .
    (12) modifier -> . PUBLIC STATIC
    (13) modifier -> . PRIVATE STATIC
    (14) modifier -> . PUBLIC
    (15) modifier -> . PRIVATE
    (16) modifier -> . STATIC
    (17) modifier -> . empty

    RBRACE          reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    PUBLIC          shift and go to state 16
    PRIVATE         shift and go to state 18
    STATIC          shift and go to state 17

    class_body_decl                shift and go to state 9
    class_body_sub_decls           shift and go to state 10
    field_decl                     shift and go to state 11
    method_decl                    shift and go to state 12
    constructor_decl               shift and go to state 13
    empty                          shift and go to state 14
    modifier                       shift and go to state 15

state 8

    (4) class_decl -> CLASS ID EXTENDS ID . LBRACE class_body_decl RBRACE

    LBRACE          shift and go to state 19


state 9

    (5) class_decl -> CLASS ID LBRACE class_body_decl . RBRACE

    RBRACE          shift and go to state 20


state 10

    (6) class_body_decl -> class_body_sub_decls .

    RBRACE          reduce using rule 6 (class_body_decl -> class_body_sub_decls .)


state 11

    (7) class_body_sub_decls -> field_decl . SEMICOLON class_body_sub_decls

    SEMICOLON       shift and go to state 21


state 12

    (8) class_body_sub_decls -> method_decl . class_body_sub_decls
    (7) class_body_sub_decls -> . field_decl SEMICOLON class_body_sub_decls
    (8) class_body_sub_decls -> . method_decl class_body_sub_decls
    (9) class_body_sub_decls -> . constructor_decl class_body_sub_decls
    (10) class_body_sub_decls -> . empty
    (11) field_decl -> . modifier var_decl
    (28) method_decl -> . modifier type ID LPAREN RPAREN block
    (29) method_decl -> . modifier VOID ID LPAREN RPAREN block
    (30) method_decl -> . modifier type ID LPAREN formals RPAREN block
    (31) method_decl -> . modifier VOID ID LPAREN formals RPAREN block
    (32) method_decl -> . modifier ID LPAREN RPAREN block
    (33) method_decl -> . modifier ID LPAREN formals RPAREN block
    (34) constructor_decl -> . modifier ID LPAREN RPAREN block
    (35) constructor_decl -> . modifier ID LPAREN formals RPAREN block
    (1) empty -> .
    (12) modifier -> . PUBLIC STATIC
    (13) modifier -> . PRIVATE STATIC
    (14) modifier -> . PUBLIC
    (15) modifier -> . PRIVATE
    (16) modifier -> . STATIC
    (17) modifier -> . empty

    RBRACE          reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    PUBLIC          shift and go to state 16
    PRIVATE         shift and go to state 18
    STATIC          shift and go to state 17

    method_decl                    shift and go to state 12
    class_body_sub_decls           shift and go to state 22
    field_decl                     shift and go to state 11
    constructor_decl               shift and go to state 13
    empty                          shift and go to state 14
    modifier                       shift and go to state 15

state 13

    (9) class_body_sub_decls -> constructor_decl . class_body_sub_decls
    (7) class_body_sub_decls -> . field_decl SEMICOLON class_body_sub_decls
    (8) class_body_sub_decls -> . method_decl class_body_sub_decls
    (9) class_body_sub_decls -> . constructor_decl class_body_sub_decls
    (10) class_body_sub_decls -> . empty
    (11) field_decl -> . modifier var_decl
    (28) method_decl -> . modifier type ID LPAREN RPAREN block
    (29) method_decl -> . modifier VOID ID LPAREN RPAREN block
    (30) method_decl -> . modifier type ID LPAREN formals RPAREN block
    (31) method_decl -> . modifier VOID ID LPAREN formals RPAREN block
    (32) method_decl -> . modifier ID LPAREN RPAREN block
    (33) method_decl -> . modifier ID LPAREN formals RPAREN block
    (34) constructor_decl -> . modifier ID LPAREN RPAREN block
    (35) constructor_decl -> . modifier ID LPAREN formals RPAREN block
    (1) empty -> .
    (12) modifier -> . PUBLIC STATIC
    (13) modifier -> . PRIVATE STATIC
    (14) modifier -> . PUBLIC
    (15) modifier -> . PRIVATE
    (16) modifier -> . STATIC
    (17) modifier -> . empty

    RBRACE          reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    PUBLIC          shift and go to state 16
    PRIVATE         shift and go to state 18
    STATIC          shift and go to state 17

    constructor_decl               shift and go to state 13
    class_body_sub_decls           shift and go to state 23
    field_decl                     shift and go to state 11
    method_decl                    shift and go to state 12
    empty                          shift and go to state 14
    modifier                       shift and go to state 15

state 14

    (10) class_body_sub_decls -> empty .
    (17) modifier -> empty .

    RBRACE          reduce using rule 10 (class_body_sub_decls -> empty .)
    VOID            reduce using rule 17 (modifier -> empty .)
    ID              reduce using rule 17 (modifier -> empty .)
    INT             reduce using rule 17 (modifier -> empty .)
    FLOAT           reduce using rule 17 (modifier -> empty .)
    BOOLEAN         reduce using rule 17 (modifier -> empty .)


state 15

    (11) field_decl -> modifier . var_decl
    (28) method_decl -> modifier . type ID LPAREN RPAREN block
    (29) method_decl -> modifier . VOID ID LPAREN RPAREN block
    (30) method_decl -> modifier . type ID LPAREN formals RPAREN block
    (31) method_decl -> modifier . VOID ID LPAREN formals RPAREN block
    (32) method_decl -> modifier . ID LPAREN RPAREN block
    (33) method_decl -> modifier . ID LPAREN formals RPAREN block
    (34) constructor_decl -> modifier . ID LPAREN RPAREN block
    (35) constructor_decl -> modifier . ID LPAREN formals RPAREN block
    (18) var_decl -> . type variables
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . VOID
    (23) type -> . ID

    VOID            shift and go to state 27
    ID              shift and go to state 26
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30

    var_decl                       shift and go to state 24
    type                           shift and go to state 25

state 16

    (12) modifier -> PUBLIC . STATIC
    (14) modifier -> PUBLIC .

    STATIC          shift and go to state 31
    VOID            reduce using rule 14 (modifier -> PUBLIC .)
    ID              reduce using rule 14 (modifier -> PUBLIC .)
    INT             reduce using rule 14 (modifier -> PUBLIC .)
    FLOAT           reduce using rule 14 (modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 14 (modifier -> PUBLIC .)


state 17

    (16) modifier -> STATIC .

    VOID            reduce using rule 16 (modifier -> STATIC .)
    ID              reduce using rule 16 (modifier -> STATIC .)
    INT             reduce using rule 16 (modifier -> STATIC .)
    FLOAT           reduce using rule 16 (modifier -> STATIC .)
    BOOLEAN         reduce using rule 16 (modifier -> STATIC .)


state 18

    (13) modifier -> PRIVATE . STATIC
    (15) modifier -> PRIVATE .

    STATIC          shift and go to state 32
    VOID            reduce using rule 15 (modifier -> PRIVATE .)
    ID              reduce using rule 15 (modifier -> PRIVATE .)
    INT             reduce using rule 15 (modifier -> PRIVATE .)
    FLOAT           reduce using rule 15 (modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 15 (modifier -> PRIVATE .)


state 19

    (4) class_decl -> CLASS ID EXTENDS ID LBRACE . class_body_decl RBRACE
    (6) class_body_decl -> . class_body_sub_decls
    (7) class_body_sub_decls -> . field_decl SEMICOLON class_body_sub_decls
    (8) class_body_sub_decls -> . method_decl class_body_sub_decls
    (9) class_body_sub_decls -> . constructor_decl class_body_sub_decls
    (10) class_body_sub_decls -> . empty
    (11) field_decl -> . modifier var_decl
    (28) method_decl -> . modifier type ID LPAREN RPAREN block
    (29) method_decl -> . modifier VOID ID LPAREN RPAREN block
    (30) method_decl -> . modifier type ID LPAREN formals RPAREN block
    (31) method_decl -> . modifier VOID ID LPAREN formals RPAREN block
    (32) method_decl -> . modifier ID LPAREN RPAREN block
    (33) method_decl -> . modifier ID LPAREN formals RPAREN block
    (34) constructor_decl -> . modifier ID LPAREN RPAREN block
    (35) constructor_decl -> . modifier ID LPAREN formals RPAREN block
    (1) empty -> .
    (12) modifier -> . PUBLIC STATIC
    (13) modifier -> . PRIVATE STATIC
    (14) modifier -> . PUBLIC
    (15) modifier -> . PRIVATE
    (16) modifier -> . STATIC
    (17) modifier -> . empty

    RBRACE          reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    PUBLIC          shift and go to state 16
    PRIVATE         shift and go to state 18
    STATIC          shift and go to state 17

    class_body_decl                shift and go to state 33
    class_body_sub_decls           shift and go to state 10
    field_decl                     shift and go to state 11
    method_decl                    shift and go to state 12
    constructor_decl               shift and go to state 13
    empty                          shift and go to state 14
    modifier                       shift and go to state 15

state 20

    (5) class_decl -> CLASS ID LBRACE class_body_decl RBRACE .

    CLASS           reduce using rule 5 (class_decl -> CLASS ID LBRACE class_body_decl RBRACE .)
    $end            reduce using rule 5 (class_decl -> CLASS ID LBRACE class_body_decl RBRACE .)


state 21

    (7) class_body_sub_decls -> field_decl SEMICOLON . class_body_sub_decls
    (7) class_body_sub_decls -> . field_decl SEMICOLON class_body_sub_decls
    (8) class_body_sub_decls -> . method_decl class_body_sub_decls
    (9) class_body_sub_decls -> . constructor_decl class_body_sub_decls
    (10) class_body_sub_decls -> . empty
    (11) field_decl -> . modifier var_decl
    (28) method_decl -> . modifier type ID LPAREN RPAREN block
    (29) method_decl -> . modifier VOID ID LPAREN RPAREN block
    (30) method_decl -> . modifier type ID LPAREN formals RPAREN block
    (31) method_decl -> . modifier VOID ID LPAREN formals RPAREN block
    (32) method_decl -> . modifier ID LPAREN RPAREN block
    (33) method_decl -> . modifier ID LPAREN formals RPAREN block
    (34) constructor_decl -> . modifier ID LPAREN RPAREN block
    (35) constructor_decl -> . modifier ID LPAREN formals RPAREN block
    (1) empty -> .
    (12) modifier -> . PUBLIC STATIC
    (13) modifier -> . PRIVATE STATIC
    (14) modifier -> . PUBLIC
    (15) modifier -> . PRIVATE
    (16) modifier -> . STATIC
    (17) modifier -> . empty

    RBRACE          reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    PUBLIC          shift and go to state 16
    PRIVATE         shift and go to state 18
    STATIC          shift and go to state 17

    field_decl                     shift and go to state 11
    class_body_sub_decls           shift and go to state 34
    method_decl                    shift and go to state 12
    constructor_decl               shift and go to state 13
    empty                          shift and go to state 14
    modifier                       shift and go to state 15

state 22

    (8) class_body_sub_decls -> method_decl class_body_sub_decls .

    RBRACE          reduce using rule 8 (class_body_sub_decls -> method_decl class_body_sub_decls .)


state 23

    (9) class_body_sub_decls -> constructor_decl class_body_sub_decls .

    RBRACE          reduce using rule 9 (class_body_sub_decls -> constructor_decl class_body_sub_decls .)


state 24

    (11) field_decl -> modifier var_decl .

    SEMICOLON       reduce using rule 11 (field_decl -> modifier var_decl .)


state 25

    (28) method_decl -> modifier type . ID LPAREN RPAREN block
    (30) method_decl -> modifier type . ID LPAREN formals RPAREN block
    (18) var_decl -> type . variables
    (24) variables -> . variable
    (25) variables -> . variables COMMA variable
    (26) variables -> . empty
    (27) variable -> . ID
    (1) empty -> .

    ID              shift and go to state 35
    COMMA           reduce using rule 1 (empty -> .)
    SEMICOLON       reduce using rule 1 (empty -> .)

    variables                      shift and go to state 36
    variable                       shift and go to state 37
    empty                          shift and go to state 38

state 26

    (32) method_decl -> modifier ID . LPAREN RPAREN block
    (33) method_decl -> modifier ID . LPAREN formals RPAREN block
    (34) constructor_decl -> modifier ID . LPAREN RPAREN block
    (35) constructor_decl -> modifier ID . LPAREN formals RPAREN block
    (23) type -> ID .

    LPAREN          shift and go to state 39
    ID              reduce using rule 23 (type -> ID .)
    COMMA           reduce using rule 23 (type -> ID .)
    SEMICOLON       reduce using rule 23 (type -> ID .)


state 27

    (29) method_decl -> modifier VOID . ID LPAREN RPAREN block
    (31) method_decl -> modifier VOID . ID LPAREN formals RPAREN block
    (22) type -> VOID .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 40
    COMMA           reduce using rule 22 (type -> VOID .)
    SEMICOLON       reduce using rule 22 (type -> VOID .)

  ! ID              [ reduce using rule 22 (type -> VOID .) ]


state 28

    (19) type -> INT .

    ID              reduce using rule 19 (type -> INT .)
    COMMA           reduce using rule 19 (type -> INT .)
    SEMICOLON       reduce using rule 19 (type -> INT .)


state 29

    (20) type -> FLOAT .

    ID              reduce using rule 20 (type -> FLOAT .)
    COMMA           reduce using rule 20 (type -> FLOAT .)
    SEMICOLON       reduce using rule 20 (type -> FLOAT .)


state 30

    (21) type -> BOOLEAN .

    ID              reduce using rule 21 (type -> BOOLEAN .)
    COMMA           reduce using rule 21 (type -> BOOLEAN .)
    SEMICOLON       reduce using rule 21 (type -> BOOLEAN .)


state 31

    (12) modifier -> PUBLIC STATIC .

    VOID            reduce using rule 12 (modifier -> PUBLIC STATIC .)
    ID              reduce using rule 12 (modifier -> PUBLIC STATIC .)
    INT             reduce using rule 12 (modifier -> PUBLIC STATIC .)
    FLOAT           reduce using rule 12 (modifier -> PUBLIC STATIC .)
    BOOLEAN         reduce using rule 12 (modifier -> PUBLIC STATIC .)


state 32

    (13) modifier -> PRIVATE STATIC .

    VOID            reduce using rule 13 (modifier -> PRIVATE STATIC .)
    ID              reduce using rule 13 (modifier -> PRIVATE STATIC .)
    INT             reduce using rule 13 (modifier -> PRIVATE STATIC .)
    FLOAT           reduce using rule 13 (modifier -> PRIVATE STATIC .)
    BOOLEAN         reduce using rule 13 (modifier -> PRIVATE STATIC .)


state 33

    (4) class_decl -> CLASS ID EXTENDS ID LBRACE class_body_decl . RBRACE

    RBRACE          shift and go to state 41


state 34

    (7) class_body_sub_decls -> field_decl SEMICOLON class_body_sub_decls .

    RBRACE          reduce using rule 7 (class_body_sub_decls -> field_decl SEMICOLON class_body_sub_decls .)


state 35

    (28) method_decl -> modifier type ID . LPAREN RPAREN block
    (30) method_decl -> modifier type ID . LPAREN formals RPAREN block
    (27) variable -> ID .

    LPAREN          shift and go to state 42
    COMMA           reduce using rule 27 (variable -> ID .)
    SEMICOLON       reduce using rule 27 (variable -> ID .)


state 36

    (18) var_decl -> type variables .
    (25) variables -> variables . COMMA variable

    SEMICOLON       reduce using rule 18 (var_decl -> type variables .)
    COMMA           shift and go to state 43


state 37

    (24) variables -> variable .

    COMMA           reduce using rule 24 (variables -> variable .)
    SEMICOLON       reduce using rule 24 (variables -> variable .)


state 38

    (26) variables -> empty .

    COMMA           reduce using rule 26 (variables -> empty .)
    SEMICOLON       reduce using rule 26 (variables -> empty .)


state 39

    (32) method_decl -> modifier ID LPAREN . RPAREN block
    (33) method_decl -> modifier ID LPAREN . formals RPAREN block
    (34) constructor_decl -> modifier ID LPAREN . RPAREN block
    (35) constructor_decl -> modifier ID LPAREN . formals RPAREN block
    (36) formals -> . formals COMMA formal_param
    (37) formals -> . formal_param
    (38) formals -> . empty
    (39) formal_param -> . type variable
    (1) empty -> .
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . VOID
    (23) type -> . ID

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 45
    COMMA           reduce using rule 1 (empty -> .)
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 44

  ! RPAREN          [ reduce using rule 1 (empty -> .) ]

    formals                        shift and go to state 46
    formal_param                   shift and go to state 47
    empty                          shift and go to state 48
    type                           shift and go to state 49

state 40

    (29) method_decl -> modifier VOID ID . LPAREN RPAREN block
    (31) method_decl -> modifier VOID ID . LPAREN formals RPAREN block

    LPAREN          shift and go to state 51


state 41

    (4) class_decl -> CLASS ID EXTENDS ID LBRACE class_body_decl RBRACE .

    CLASS           reduce using rule 4 (class_decl -> CLASS ID EXTENDS ID LBRACE class_body_decl RBRACE .)
    $end            reduce using rule 4 (class_decl -> CLASS ID EXTENDS ID LBRACE class_body_decl RBRACE .)


state 42

    (28) method_decl -> modifier type ID LPAREN . RPAREN block
    (30) method_decl -> modifier type ID LPAREN . formals RPAREN block
    (36) formals -> . formals COMMA formal_param
    (37) formals -> . formal_param
    (38) formals -> . empty
    (39) formal_param -> . type variable
    (1) empty -> .
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . VOID
    (23) type -> . ID

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 52
    COMMA           reduce using rule 1 (empty -> .)
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 44

  ! RPAREN          [ reduce using rule 1 (empty -> .) ]

    type                           shift and go to state 49
    formals                        shift and go to state 53
    formal_param                   shift and go to state 47
    empty                          shift and go to state 48

state 43

    (25) variables -> variables COMMA . variable
    (27) variable -> . ID

    ID              shift and go to state 55

    variable                       shift and go to state 54

state 44

    (23) type -> ID .

    ID              reduce using rule 23 (type -> ID .)


state 45

    (32) method_decl -> modifier ID LPAREN RPAREN . block
    (34) constructor_decl -> modifier ID LPAREN RPAREN . block
    (40) block -> . LBRACE stmt RBRACE

    LBRACE          shift and go to state 57

    block                          shift and go to state 56

state 46

    (33) method_decl -> modifier ID LPAREN formals . RPAREN block
    (35) constructor_decl -> modifier ID LPAREN formals . RPAREN block
    (36) formals -> formals . COMMA formal_param

    RPAREN          shift and go to state 58
    COMMA           shift and go to state 59


state 47

    (37) formals -> formal_param .

    RPAREN          reduce using rule 37 (formals -> formal_param .)
    COMMA           reduce using rule 37 (formals -> formal_param .)


state 48

    (38) formals -> empty .

    RPAREN          reduce using rule 38 (formals -> empty .)
    COMMA           reduce using rule 38 (formals -> empty .)


state 49

    (39) formal_param -> type . variable
    (27) variable -> . ID

    ID              shift and go to state 55

    variable                       shift and go to state 60

state 50

    (22) type -> VOID .

    ID              reduce using rule 22 (type -> VOID .)
    COMMA           reduce using rule 22 (type -> VOID .)
    SEMICOLON       reduce using rule 22 (type -> VOID .)


state 51

    (29) method_decl -> modifier VOID ID LPAREN . RPAREN block
    (31) method_decl -> modifier VOID ID LPAREN . formals RPAREN block
    (36) formals -> . formals COMMA formal_param
    (37) formals -> . formal_param
    (38) formals -> . empty
    (39) formal_param -> . type variable
    (1) empty -> .
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . VOID
    (23) type -> . ID

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 61
    COMMA           reduce using rule 1 (empty -> .)
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 44

  ! RPAREN          [ reduce using rule 1 (empty -> .) ]

    formals                        shift and go to state 62
    formal_param                   shift and go to state 47
    empty                          shift and go to state 48
    type                           shift and go to state 49

state 52

    (28) method_decl -> modifier type ID LPAREN RPAREN . block
    (40) block -> . LBRACE stmt RBRACE

    LBRACE          shift and go to state 57

    block                          shift and go to state 63

state 53

    (30) method_decl -> modifier type ID LPAREN formals . RPAREN block
    (36) formals -> formals . COMMA formal_param

    RPAREN          shift and go to state 64
    COMMA           shift and go to state 59


state 54

    (25) variables -> variables COMMA variable .

    COMMA           reduce using rule 25 (variables -> variables COMMA variable .)
    SEMICOLON       reduce using rule 25 (variables -> variables COMMA variable .)


state 55

    (27) variable -> ID .

    COMMA           reduce using rule 27 (variable -> ID .)
    SEMICOLON       reduce using rule 27 (variable -> ID .)
    RPAREN          reduce using rule 27 (variable -> ID .)


state 56

    (32) method_decl -> modifier ID LPAREN RPAREN block .
    (34) constructor_decl -> modifier ID LPAREN RPAREN block .

  ! reduce/reduce conflict for PUBLIC resolved using rule 32 (method_decl -> modifier ID LPAREN RPAREN block .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 32 (method_decl -> modifier ID LPAREN RPAREN block .)
  ! reduce/reduce conflict for STATIC resolved using rule 32 (method_decl -> modifier ID LPAREN RPAREN block .)
  ! reduce/reduce conflict for VOID resolved using rule 32 (method_decl -> modifier ID LPAREN RPAREN block .)
  ! reduce/reduce conflict for ID resolved using rule 32 (method_decl -> modifier ID LPAREN RPAREN block .)
  ! reduce/reduce conflict for INT resolved using rule 32 (method_decl -> modifier ID LPAREN RPAREN block .)
  ! reduce/reduce conflict for FLOAT resolved using rule 32 (method_decl -> modifier ID LPAREN RPAREN block .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 32 (method_decl -> modifier ID LPAREN RPAREN block .)
  ! reduce/reduce conflict for RBRACE resolved using rule 32 (method_decl -> modifier ID LPAREN RPAREN block .)
    PUBLIC          reduce using rule 32 (method_decl -> modifier ID LPAREN RPAREN block .)
    PRIVATE         reduce using rule 32 (method_decl -> modifier ID LPAREN RPAREN block .)
    STATIC          reduce using rule 32 (method_decl -> modifier ID LPAREN RPAREN block .)
    VOID            reduce using rule 32 (method_decl -> modifier ID LPAREN RPAREN block .)
    ID              reduce using rule 32 (method_decl -> modifier ID LPAREN RPAREN block .)
    INT             reduce using rule 32 (method_decl -> modifier ID LPAREN RPAREN block .)
    FLOAT           reduce using rule 32 (method_decl -> modifier ID LPAREN RPAREN block .)
    BOOLEAN         reduce using rule 32 (method_decl -> modifier ID LPAREN RPAREN block .)
    RBRACE          reduce using rule 32 (method_decl -> modifier ID LPAREN RPAREN block .)

  ! PUBLIC          [ reduce using rule 34 (constructor_decl -> modifier ID LPAREN RPAREN block .) ]
  ! PRIVATE         [ reduce using rule 34 (constructor_decl -> modifier ID LPAREN RPAREN block .) ]
  ! STATIC          [ reduce using rule 34 (constructor_decl -> modifier ID LPAREN RPAREN block .) ]
  ! VOID            [ reduce using rule 34 (constructor_decl -> modifier ID LPAREN RPAREN block .) ]
  ! ID              [ reduce using rule 34 (constructor_decl -> modifier ID LPAREN RPAREN block .) ]
  ! INT             [ reduce using rule 34 (constructor_decl -> modifier ID LPAREN RPAREN block .) ]
  ! FLOAT           [ reduce using rule 34 (constructor_decl -> modifier ID LPAREN RPAREN block .) ]
  ! BOOLEAN         [ reduce using rule 34 (constructor_decl -> modifier ID LPAREN RPAREN block .) ]
  ! RBRACE          [ reduce using rule 34 (constructor_decl -> modifier ID LPAREN RPAREN block .) ]


state 57

    (40) block -> LBRACE . stmt RBRACE
    (41) stmt -> . IF LPAREN expr RPAREN stmt
    (42) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (43) stmt -> . WHILE LPAREN expr RPAREN stmt
    (44) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (45) stmt -> . RETURN SEMICOLON stmt
    (46) stmt -> . RETURN expr SEMICOLON stmt
    (47) stmt -> . stmt_expr SEMICOLON stmt
    (48) stmt -> . BREAK SEMICOLON stmt
    (49) stmt -> . CONTINUE SEMICOLON stmt
    (50) stmt -> . block stmt
    (51) stmt -> . var_decl SEMICOLON stmt
    (52) stmt -> . SEMICOLON stmt
    (53) stmt -> . empty
    (101) stmt_expr -> . assign
    (102) stmt_expr -> . method_invocation
    (40) block -> . LBRACE stmt RBRACE
    (18) var_decl -> . type variables
    (1) empty -> .
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . VOID
    (23) type -> . ID
    (71) lhs -> . field_access
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE

    IF              shift and go to state 66
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    RETURN          shift and go to state 72
    BREAK           shift and go to state 73
    CONTINUE        shift and go to state 74
    SEMICOLON       shift and go to state 71
    LBRACE          shift and go to state 57
    RBRACE          reduce using rule 1 (empty -> .)
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 85
    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96

    stmt                           shift and go to state 65
    stmt_expr                      shift and go to state 70
    block                          shift and go to state 75
    var_decl                       shift and go to state 76
    empty                          shift and go to state 77
    assign                         shift and go to state 78
    method_invocation              shift and go to state 79
    type                           shift and go to state 80
    lhs                            shift and go to state 81
    field_access                   shift and go to state 84
    primary                        shift and go to state 86
    literal                        shift and go to state 87

state 58

    (33) method_decl -> modifier ID LPAREN formals RPAREN . block
    (35) constructor_decl -> modifier ID LPAREN formals RPAREN . block
    (40) block -> . LBRACE stmt RBRACE

    LBRACE          shift and go to state 57

    block                          shift and go to state 97

state 59

    (36) formals -> formals COMMA . formal_param
    (39) formal_param -> . type variable
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . VOID
    (23) type -> . ID

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 44

    formal_param                   shift and go to state 98
    type                           shift and go to state 49

state 60

    (39) formal_param -> type variable .

    RPAREN          reduce using rule 39 (formal_param -> type variable .)
    COMMA           reduce using rule 39 (formal_param -> type variable .)


state 61

    (29) method_decl -> modifier VOID ID LPAREN RPAREN . block
    (40) block -> . LBRACE stmt RBRACE

    LBRACE          shift and go to state 57

    block                          shift and go to state 99

state 62

    (31) method_decl -> modifier VOID ID LPAREN formals . RPAREN block
    (36) formals -> formals . COMMA formal_param

    RPAREN          shift and go to state 100
    COMMA           shift and go to state 59


state 63

    (28) method_decl -> modifier type ID LPAREN RPAREN block .

    PUBLIC          reduce using rule 28 (method_decl -> modifier type ID LPAREN RPAREN block .)
    PRIVATE         reduce using rule 28 (method_decl -> modifier type ID LPAREN RPAREN block .)
    STATIC          reduce using rule 28 (method_decl -> modifier type ID LPAREN RPAREN block .)
    VOID            reduce using rule 28 (method_decl -> modifier type ID LPAREN RPAREN block .)
    ID              reduce using rule 28 (method_decl -> modifier type ID LPAREN RPAREN block .)
    INT             reduce using rule 28 (method_decl -> modifier type ID LPAREN RPAREN block .)
    FLOAT           reduce using rule 28 (method_decl -> modifier type ID LPAREN RPAREN block .)
    BOOLEAN         reduce using rule 28 (method_decl -> modifier type ID LPAREN RPAREN block .)
    RBRACE          reduce using rule 28 (method_decl -> modifier type ID LPAREN RPAREN block .)


state 64

    (30) method_decl -> modifier type ID LPAREN formals RPAREN . block
    (40) block -> . LBRACE stmt RBRACE

    LBRACE          shift and go to state 57

    block                          shift and go to state 101

state 65

    (40) block -> LBRACE stmt . RBRACE

    RBRACE          shift and go to state 102


state 66

    (41) stmt -> IF . LPAREN expr RPAREN stmt
    (42) stmt -> IF . LPAREN expr RPAREN stmt ELSE stmt

    LPAREN          shift and go to state 103


state 67

    (63) primary -> LPAREN . expr RPAREN
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . expr arith_op expr
    (79) expr -> . expr bool_op expr
    (80) expr -> . unary_op expr
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (98) unary_op -> . PLUS
    (99) unary_op -> . MINUS
    (100) unary_op -> . NOT
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE
    (71) lhs -> . field_access
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID

    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NOT             shift and go to state 113
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96
    ID              shift and go to state 108

    expr                           shift and go to state 104
    primary                        shift and go to state 105
    assign                         shift and go to state 106
    unary_op                       shift and go to state 107
    literal                        shift and go to state 87
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 110
    field_access                   shift and go to state 114

state 68

    (43) stmt -> WHILE . LPAREN expr RPAREN stmt

    LPAREN          shift and go to state 115


state 69

    (44) stmt -> FOR . LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt

    LPAREN          shift and go to state 116


state 70

    (47) stmt -> stmt_expr . SEMICOLON stmt

    SEMICOLON       shift and go to state 117


state 71

    (52) stmt -> SEMICOLON . stmt
    (41) stmt -> . IF LPAREN expr RPAREN stmt
    (42) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (43) stmt -> . WHILE LPAREN expr RPAREN stmt
    (44) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (45) stmt -> . RETURN SEMICOLON stmt
    (46) stmt -> . RETURN expr SEMICOLON stmt
    (47) stmt -> . stmt_expr SEMICOLON stmt
    (48) stmt -> . BREAK SEMICOLON stmt
    (49) stmt -> . CONTINUE SEMICOLON stmt
    (50) stmt -> . block stmt
    (51) stmt -> . var_decl SEMICOLON stmt
    (52) stmt -> . SEMICOLON stmt
    (53) stmt -> . empty
    (101) stmt_expr -> . assign
    (102) stmt_expr -> . method_invocation
    (40) block -> . LBRACE stmt RBRACE
    (18) var_decl -> . type variables
    (1) empty -> .
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . VOID
    (23) type -> . ID
    (71) lhs -> . field_access
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE

    IF              shift and go to state 66
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    RETURN          shift and go to state 72
    BREAK           shift and go to state 73
    CONTINUE        shift and go to state 74
    SEMICOLON       shift and go to state 71
    LBRACE          shift and go to state 57
    RBRACE          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 85
    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96

    stmt                           shift and go to state 118
    stmt_expr                      shift and go to state 70
    block                          shift and go to state 75
    var_decl                       shift and go to state 76
    empty                          shift and go to state 77
    assign                         shift and go to state 78
    method_invocation              shift and go to state 79
    type                           shift and go to state 80
    lhs                            shift and go to state 81
    field_access                   shift and go to state 84
    primary                        shift and go to state 86
    literal                        shift and go to state 87

state 72

    (45) stmt -> RETURN . SEMICOLON stmt
    (46) stmt -> RETURN . expr SEMICOLON stmt
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . expr arith_op expr
    (79) expr -> . expr bool_op expr
    (80) expr -> . unary_op expr
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (98) unary_op -> . PLUS
    (99) unary_op -> . MINUS
    (100) unary_op -> . NOT
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE
    (71) lhs -> . field_access
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID

    SEMICOLON       shift and go to state 119
    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NOT             shift and go to state 113
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96
    ID              shift and go to state 108

    expr                           shift and go to state 120
    primary                        shift and go to state 105
    assign                         shift and go to state 106
    unary_op                       shift and go to state 107
    literal                        shift and go to state 87
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 110
    field_access                   shift and go to state 114

state 73

    (48) stmt -> BREAK . SEMICOLON stmt

    SEMICOLON       shift and go to state 121


state 74

    (49) stmt -> CONTINUE . SEMICOLON stmt

    SEMICOLON       shift and go to state 122


state 75

    (50) stmt -> block . stmt
    (41) stmt -> . IF LPAREN expr RPAREN stmt
    (42) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (43) stmt -> . WHILE LPAREN expr RPAREN stmt
    (44) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (45) stmt -> . RETURN SEMICOLON stmt
    (46) stmt -> . RETURN expr SEMICOLON stmt
    (47) stmt -> . stmt_expr SEMICOLON stmt
    (48) stmt -> . BREAK SEMICOLON stmt
    (49) stmt -> . CONTINUE SEMICOLON stmt
    (50) stmt -> . block stmt
    (51) stmt -> . var_decl SEMICOLON stmt
    (52) stmt -> . SEMICOLON stmt
    (53) stmt -> . empty
    (101) stmt_expr -> . assign
    (102) stmt_expr -> . method_invocation
    (40) block -> . LBRACE stmt RBRACE
    (18) var_decl -> . type variables
    (1) empty -> .
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . VOID
    (23) type -> . ID
    (71) lhs -> . field_access
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE

    IF              shift and go to state 66
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    RETURN          shift and go to state 72
    BREAK           shift and go to state 73
    CONTINUE        shift and go to state 74
    SEMICOLON       shift and go to state 71
    LBRACE          shift and go to state 57
    RBRACE          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 85
    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96

    block                          shift and go to state 75
    stmt                           shift and go to state 123
    stmt_expr                      shift and go to state 70
    var_decl                       shift and go to state 76
    empty                          shift and go to state 77
    assign                         shift and go to state 78
    method_invocation              shift and go to state 79
    type                           shift and go to state 80
    lhs                            shift and go to state 81
    field_access                   shift and go to state 84
    primary                        shift and go to state 86
    literal                        shift and go to state 87

state 76

    (51) stmt -> var_decl . SEMICOLON stmt

    SEMICOLON       shift and go to state 124


state 77

    (53) stmt -> empty .

    RBRACE          reduce using rule 53 (stmt -> empty .)
    ELSE            reduce using rule 53 (stmt -> empty .)


state 78

    (101) stmt_expr -> assign .

    SEMICOLON       reduce using rule 101 (stmt_expr -> assign .)
    RPAREN          reduce using rule 101 (stmt_expr -> assign .)


state 79

    (102) stmt_expr -> method_invocation .
    (67) primary -> method_invocation .

    SEMICOLON       reduce using rule 102 (stmt_expr -> method_invocation .)
    RPAREN          reduce using rule 102 (stmt_expr -> method_invocation .)
    PERIOD          reduce using rule 67 (primary -> method_invocation .)


state 80

    (18) var_decl -> type . variables
    (24) variables -> . variable
    (25) variables -> . variables COMMA variable
    (26) variables -> . empty
    (27) variable -> . ID
    (1) empty -> .

    ID              shift and go to state 55
    COMMA           reduce using rule 1 (empty -> .)
    SEMICOLON       reduce using rule 1 (empty -> .)

    variables                      shift and go to state 36
    variable                       shift and go to state 37
    empty                          shift and go to state 38

state 81

    (81) assign -> lhs . EQUALS expr
    (82) assign -> lhs . PLUSPLUS
    (84) assign -> lhs . MINUSMINUS
    (66) primary -> lhs .

    EQUALS          shift and go to state 125
    PLUSPLUS        shift and go to state 126
    MINUSMINUS      shift and go to state 127
    PERIOD          reduce using rule 66 (primary -> lhs .)


state 82

    (83) assign -> PLUSPLUS . lhs
    (71) lhs -> . field_access
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN

    ID              shift and go to state 108
    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96

    lhs                            shift and go to state 128
    field_access                   shift and go to state 114
    primary                        shift and go to state 86
    literal                        shift and go to state 87
    method_invocation              shift and go to state 110

state 83

    (85) assign -> MINUSMINUS . lhs
    (71) lhs -> . field_access
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN

    ID              shift and go to state 108
    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96

    lhs                            shift and go to state 129
    field_access                   shift and go to state 114
    primary                        shift and go to state 86
    literal                        shift and go to state 87
    method_invocation              shift and go to state 110

state 84

    (74) method_invocation -> field_access . LPAREN RPAREN
    (75) method_invocation -> field_access . LPAREN arguments RPAREN
    (71) lhs -> field_access .

    LPAREN          shift and go to state 130
    EQUALS          reduce using rule 71 (lhs -> field_access .)
    PLUSPLUS        reduce using rule 71 (lhs -> field_access .)
    MINUSMINUS      reduce using rule 71 (lhs -> field_access .)
    PERIOD          reduce using rule 71 (lhs -> field_access .)


state 85

    (23) type -> ID .
    (73) field_access -> ID .

    ID              reduce using rule 23 (type -> ID .)
    COMMA           reduce using rule 23 (type -> ID .)
    SEMICOLON       reduce using rule 23 (type -> ID .)
    LPAREN          reduce using rule 73 (field_access -> ID .)
    EQUALS          reduce using rule 73 (field_access -> ID .)
    PLUSPLUS        reduce using rule 73 (field_access -> ID .)
    MINUSMINUS      reduce using rule 73 (field_access -> ID .)
    PERIOD          reduce using rule 73 (field_access -> ID .)


state 86

    (72) field_access -> primary . PERIOD ID

    PERIOD          shift and go to state 131


state 87

    (60) primary -> literal .

    PERIOD          reduce using rule 60 (primary -> literal .)
    RPAREN          reduce using rule 60 (primary -> literal .)
    PLUS            reduce using rule 60 (primary -> literal .)
    MINUS           reduce using rule 60 (primary -> literal .)
    TIMES           reduce using rule 60 (primary -> literal .)
    DIVIDE          reduce using rule 60 (primary -> literal .)
    AND             reduce using rule 60 (primary -> literal .)
    OR              reduce using rule 60 (primary -> literal .)
    EQUALSCOMPARE   reduce using rule 60 (primary -> literal .)
    NOTEQUALS       reduce using rule 60 (primary -> literal .)
    LESSTHAN        reduce using rule 60 (primary -> literal .)
    GREATERTHAN     reduce using rule 60 (primary -> literal .)
    LESSTHANOREQ    reduce using rule 60 (primary -> literal .)
    GREATERTHANOREQ reduce using rule 60 (primary -> literal .)
    SEMICOLON       reduce using rule 60 (primary -> literal .)
    COMMA           reduce using rule 60 (primary -> literal .)


state 88

    (61) primary -> THIS .

    PERIOD          reduce using rule 61 (primary -> THIS .)
    RPAREN          reduce using rule 61 (primary -> THIS .)
    PLUS            reduce using rule 61 (primary -> THIS .)
    MINUS           reduce using rule 61 (primary -> THIS .)
    TIMES           reduce using rule 61 (primary -> THIS .)
    DIVIDE          reduce using rule 61 (primary -> THIS .)
    AND             reduce using rule 61 (primary -> THIS .)
    OR              reduce using rule 61 (primary -> THIS .)
    EQUALSCOMPARE   reduce using rule 61 (primary -> THIS .)
    NOTEQUALS       reduce using rule 61 (primary -> THIS .)
    LESSTHAN        reduce using rule 61 (primary -> THIS .)
    GREATERTHAN     reduce using rule 61 (primary -> THIS .)
    LESSTHANOREQ    reduce using rule 61 (primary -> THIS .)
    GREATERTHANOREQ reduce using rule 61 (primary -> THIS .)
    SEMICOLON       reduce using rule 61 (primary -> THIS .)
    COMMA           reduce using rule 61 (primary -> THIS .)


state 89

    (62) primary -> SUPER .

    PERIOD          reduce using rule 62 (primary -> SUPER .)
    RPAREN          reduce using rule 62 (primary -> SUPER .)
    PLUS            reduce using rule 62 (primary -> SUPER .)
    MINUS           reduce using rule 62 (primary -> SUPER .)
    TIMES           reduce using rule 62 (primary -> SUPER .)
    DIVIDE          reduce using rule 62 (primary -> SUPER .)
    AND             reduce using rule 62 (primary -> SUPER .)
    OR              reduce using rule 62 (primary -> SUPER .)
    EQUALSCOMPARE   reduce using rule 62 (primary -> SUPER .)
    NOTEQUALS       reduce using rule 62 (primary -> SUPER .)
    LESSTHAN        reduce using rule 62 (primary -> SUPER .)
    GREATERTHAN     reduce using rule 62 (primary -> SUPER .)
    LESSTHANOREQ    reduce using rule 62 (primary -> SUPER .)
    GREATERTHANOREQ reduce using rule 62 (primary -> SUPER .)
    SEMICOLON       reduce using rule 62 (primary -> SUPER .)
    COMMA           reduce using rule 62 (primary -> SUPER .)


state 90

    (64) primary -> NEW . ID LPAREN arguments RPAREN
    (65) primary -> NEW . ID LPAREN RPAREN

    ID              shift and go to state 132


state 91

    (54) literal -> INTCONST .

    PERIOD          reduce using rule 54 (literal -> INTCONST .)
    RPAREN          reduce using rule 54 (literal -> INTCONST .)
    PLUS            reduce using rule 54 (literal -> INTCONST .)
    MINUS           reduce using rule 54 (literal -> INTCONST .)
    TIMES           reduce using rule 54 (literal -> INTCONST .)
    DIVIDE          reduce using rule 54 (literal -> INTCONST .)
    AND             reduce using rule 54 (literal -> INTCONST .)
    OR              reduce using rule 54 (literal -> INTCONST .)
    EQUALSCOMPARE   reduce using rule 54 (literal -> INTCONST .)
    NOTEQUALS       reduce using rule 54 (literal -> INTCONST .)
    LESSTHAN        reduce using rule 54 (literal -> INTCONST .)
    GREATERTHAN     reduce using rule 54 (literal -> INTCONST .)
    LESSTHANOREQ    reduce using rule 54 (literal -> INTCONST .)
    GREATERTHANOREQ reduce using rule 54 (literal -> INTCONST .)
    SEMICOLON       reduce using rule 54 (literal -> INTCONST .)
    COMMA           reduce using rule 54 (literal -> INTCONST .)


state 92

    (55) literal -> FLOATCONST .

    PERIOD          reduce using rule 55 (literal -> FLOATCONST .)
    RPAREN          reduce using rule 55 (literal -> FLOATCONST .)
    PLUS            reduce using rule 55 (literal -> FLOATCONST .)
    MINUS           reduce using rule 55 (literal -> FLOATCONST .)
    TIMES           reduce using rule 55 (literal -> FLOATCONST .)
    DIVIDE          reduce using rule 55 (literal -> FLOATCONST .)
    AND             reduce using rule 55 (literal -> FLOATCONST .)
    OR              reduce using rule 55 (literal -> FLOATCONST .)
    EQUALSCOMPARE   reduce using rule 55 (literal -> FLOATCONST .)
    NOTEQUALS       reduce using rule 55 (literal -> FLOATCONST .)
    LESSTHAN        reduce using rule 55 (literal -> FLOATCONST .)
    GREATERTHAN     reduce using rule 55 (literal -> FLOATCONST .)
    LESSTHANOREQ    reduce using rule 55 (literal -> FLOATCONST .)
    GREATERTHANOREQ reduce using rule 55 (literal -> FLOATCONST .)
    SEMICOLON       reduce using rule 55 (literal -> FLOATCONST .)
    COMMA           reduce using rule 55 (literal -> FLOATCONST .)


state 93

    (56) literal -> STRINGCONST .

    PERIOD          reduce using rule 56 (literal -> STRINGCONST .)
    RPAREN          reduce using rule 56 (literal -> STRINGCONST .)
    PLUS            reduce using rule 56 (literal -> STRINGCONST .)
    MINUS           reduce using rule 56 (literal -> STRINGCONST .)
    TIMES           reduce using rule 56 (literal -> STRINGCONST .)
    DIVIDE          reduce using rule 56 (literal -> STRINGCONST .)
    AND             reduce using rule 56 (literal -> STRINGCONST .)
    OR              reduce using rule 56 (literal -> STRINGCONST .)
    EQUALSCOMPARE   reduce using rule 56 (literal -> STRINGCONST .)
    NOTEQUALS       reduce using rule 56 (literal -> STRINGCONST .)
    LESSTHAN        reduce using rule 56 (literal -> STRINGCONST .)
    GREATERTHAN     reduce using rule 56 (literal -> STRINGCONST .)
    LESSTHANOREQ    reduce using rule 56 (literal -> STRINGCONST .)
    GREATERTHANOREQ reduce using rule 56 (literal -> STRINGCONST .)
    SEMICOLON       reduce using rule 56 (literal -> STRINGCONST .)
    COMMA           reduce using rule 56 (literal -> STRINGCONST .)


state 94

    (57) literal -> NULL .

    PERIOD          reduce using rule 57 (literal -> NULL .)
    RPAREN          reduce using rule 57 (literal -> NULL .)
    PLUS            reduce using rule 57 (literal -> NULL .)
    MINUS           reduce using rule 57 (literal -> NULL .)
    TIMES           reduce using rule 57 (literal -> NULL .)
    DIVIDE          reduce using rule 57 (literal -> NULL .)
    AND             reduce using rule 57 (literal -> NULL .)
    OR              reduce using rule 57 (literal -> NULL .)
    EQUALSCOMPARE   reduce using rule 57 (literal -> NULL .)
    NOTEQUALS       reduce using rule 57 (literal -> NULL .)
    LESSTHAN        reduce using rule 57 (literal -> NULL .)
    GREATERTHAN     reduce using rule 57 (literal -> NULL .)
    LESSTHANOREQ    reduce using rule 57 (literal -> NULL .)
    GREATERTHANOREQ reduce using rule 57 (literal -> NULL .)
    SEMICOLON       reduce using rule 57 (literal -> NULL .)
    COMMA           reduce using rule 57 (literal -> NULL .)


state 95

    (58) literal -> TRUE .

    PERIOD          reduce using rule 58 (literal -> TRUE .)
    RPAREN          reduce using rule 58 (literal -> TRUE .)
    PLUS            reduce using rule 58 (literal -> TRUE .)
    MINUS           reduce using rule 58 (literal -> TRUE .)
    TIMES           reduce using rule 58 (literal -> TRUE .)
    DIVIDE          reduce using rule 58 (literal -> TRUE .)
    AND             reduce using rule 58 (literal -> TRUE .)
    OR              reduce using rule 58 (literal -> TRUE .)
    EQUALSCOMPARE   reduce using rule 58 (literal -> TRUE .)
    NOTEQUALS       reduce using rule 58 (literal -> TRUE .)
    LESSTHAN        reduce using rule 58 (literal -> TRUE .)
    GREATERTHAN     reduce using rule 58 (literal -> TRUE .)
    LESSTHANOREQ    reduce using rule 58 (literal -> TRUE .)
    GREATERTHANOREQ reduce using rule 58 (literal -> TRUE .)
    SEMICOLON       reduce using rule 58 (literal -> TRUE .)
    COMMA           reduce using rule 58 (literal -> TRUE .)


state 96

    (59) literal -> FALSE .

    PERIOD          reduce using rule 59 (literal -> FALSE .)
    RPAREN          reduce using rule 59 (literal -> FALSE .)
    PLUS            reduce using rule 59 (literal -> FALSE .)
    MINUS           reduce using rule 59 (literal -> FALSE .)
    TIMES           reduce using rule 59 (literal -> FALSE .)
    DIVIDE          reduce using rule 59 (literal -> FALSE .)
    AND             reduce using rule 59 (literal -> FALSE .)
    OR              reduce using rule 59 (literal -> FALSE .)
    EQUALSCOMPARE   reduce using rule 59 (literal -> FALSE .)
    NOTEQUALS       reduce using rule 59 (literal -> FALSE .)
    LESSTHAN        reduce using rule 59 (literal -> FALSE .)
    GREATERTHAN     reduce using rule 59 (literal -> FALSE .)
    LESSTHANOREQ    reduce using rule 59 (literal -> FALSE .)
    GREATERTHANOREQ reduce using rule 59 (literal -> FALSE .)
    SEMICOLON       reduce using rule 59 (literal -> FALSE .)
    COMMA           reduce using rule 59 (literal -> FALSE .)


state 97

    (33) method_decl -> modifier ID LPAREN formals RPAREN block .
    (35) constructor_decl -> modifier ID LPAREN formals RPAREN block .

  ! reduce/reduce conflict for PUBLIC resolved using rule 33 (method_decl -> modifier ID LPAREN formals RPAREN block .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 33 (method_decl -> modifier ID LPAREN formals RPAREN block .)
  ! reduce/reduce conflict for STATIC resolved using rule 33 (method_decl -> modifier ID LPAREN formals RPAREN block .)
  ! reduce/reduce conflict for VOID resolved using rule 33 (method_decl -> modifier ID LPAREN formals RPAREN block .)
  ! reduce/reduce conflict for ID resolved using rule 33 (method_decl -> modifier ID LPAREN formals RPAREN block .)
  ! reduce/reduce conflict for INT resolved using rule 33 (method_decl -> modifier ID LPAREN formals RPAREN block .)
  ! reduce/reduce conflict for FLOAT resolved using rule 33 (method_decl -> modifier ID LPAREN formals RPAREN block .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 33 (method_decl -> modifier ID LPAREN formals RPAREN block .)
  ! reduce/reduce conflict for RBRACE resolved using rule 33 (method_decl -> modifier ID LPAREN formals RPAREN block .)
    PUBLIC          reduce using rule 33 (method_decl -> modifier ID LPAREN formals RPAREN block .)
    PRIVATE         reduce using rule 33 (method_decl -> modifier ID LPAREN formals RPAREN block .)
    STATIC          reduce using rule 33 (method_decl -> modifier ID LPAREN formals RPAREN block .)
    VOID            reduce using rule 33 (method_decl -> modifier ID LPAREN formals RPAREN block .)
    ID              reduce using rule 33 (method_decl -> modifier ID LPAREN formals RPAREN block .)
    INT             reduce using rule 33 (method_decl -> modifier ID LPAREN formals RPAREN block .)
    FLOAT           reduce using rule 33 (method_decl -> modifier ID LPAREN formals RPAREN block .)
    BOOLEAN         reduce using rule 33 (method_decl -> modifier ID LPAREN formals RPAREN block .)
    RBRACE          reduce using rule 33 (method_decl -> modifier ID LPAREN formals RPAREN block .)

  ! PUBLIC          [ reduce using rule 35 (constructor_decl -> modifier ID LPAREN formals RPAREN block .) ]
  ! PRIVATE         [ reduce using rule 35 (constructor_decl -> modifier ID LPAREN formals RPAREN block .) ]
  ! STATIC          [ reduce using rule 35 (constructor_decl -> modifier ID LPAREN formals RPAREN block .) ]
  ! VOID            [ reduce using rule 35 (constructor_decl -> modifier ID LPAREN formals RPAREN block .) ]
  ! ID              [ reduce using rule 35 (constructor_decl -> modifier ID LPAREN formals RPAREN block .) ]
  ! INT             [ reduce using rule 35 (constructor_decl -> modifier ID LPAREN formals RPAREN block .) ]
  ! FLOAT           [ reduce using rule 35 (constructor_decl -> modifier ID LPAREN formals RPAREN block .) ]
  ! BOOLEAN         [ reduce using rule 35 (constructor_decl -> modifier ID LPAREN formals RPAREN block .) ]
  ! RBRACE          [ reduce using rule 35 (constructor_decl -> modifier ID LPAREN formals RPAREN block .) ]


state 98

    (36) formals -> formals COMMA formal_param .

    RPAREN          reduce using rule 36 (formals -> formals COMMA formal_param .)
    COMMA           reduce using rule 36 (formals -> formals COMMA formal_param .)


state 99

    (29) method_decl -> modifier VOID ID LPAREN RPAREN block .

    PUBLIC          reduce using rule 29 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    PRIVATE         reduce using rule 29 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    STATIC          reduce using rule 29 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    VOID            reduce using rule 29 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    ID              reduce using rule 29 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    INT             reduce using rule 29 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    FLOAT           reduce using rule 29 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    BOOLEAN         reduce using rule 29 (method_decl -> modifier VOID ID LPAREN RPAREN block .)
    RBRACE          reduce using rule 29 (method_decl -> modifier VOID ID LPAREN RPAREN block .)


state 100

    (31) method_decl -> modifier VOID ID LPAREN formals RPAREN . block
    (40) block -> . LBRACE stmt RBRACE

    LBRACE          shift and go to state 57

    block                          shift and go to state 133

state 101

    (30) method_decl -> modifier type ID LPAREN formals RPAREN block .

    PUBLIC          reduce using rule 30 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    PRIVATE         reduce using rule 30 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    STATIC          reduce using rule 30 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    VOID            reduce using rule 30 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    ID              reduce using rule 30 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    INT             reduce using rule 30 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    FLOAT           reduce using rule 30 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    BOOLEAN         reduce using rule 30 (method_decl -> modifier type ID LPAREN formals RPAREN block .)
    RBRACE          reduce using rule 30 (method_decl -> modifier type ID LPAREN formals RPAREN block .)


state 102

    (40) block -> LBRACE stmt RBRACE .

    PUBLIC          reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    PRIVATE         reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    STATIC          reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    VOID            reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    ID              reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    INT             reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    FLOAT           reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    BOOLEAN         reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    RBRACE          reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    IF              reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    WHILE           reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    FOR             reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    RETURN          reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    BREAK           reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    CONTINUE        reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    SEMICOLON       reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    LBRACE          reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    PLUSPLUS        reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    MINUSMINUS      reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    THIS            reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    SUPER           reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    LPAREN          reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    NEW             reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    INTCONST        reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    FLOATCONST      reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    STRINGCONST     reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    NULL            reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    TRUE            reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    FALSE           reduce using rule 40 (block -> LBRACE stmt RBRACE .)
    ELSE            reduce using rule 40 (block -> LBRACE stmt RBRACE .)


state 103

    (41) stmt -> IF LPAREN . expr RPAREN stmt
    (42) stmt -> IF LPAREN . expr RPAREN stmt ELSE stmt
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . expr arith_op expr
    (79) expr -> . expr bool_op expr
    (80) expr -> . unary_op expr
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (98) unary_op -> . PLUS
    (99) unary_op -> . MINUS
    (100) unary_op -> . NOT
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE
    (71) lhs -> . field_access
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID

    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NOT             shift and go to state 113
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96
    ID              shift and go to state 108

    expr                           shift and go to state 134
    primary                        shift and go to state 105
    assign                         shift and go to state 106
    unary_op                       shift and go to state 107
    literal                        shift and go to state 87
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 110
    field_access                   shift and go to state 114

state 104

    (63) primary -> LPAREN expr . RPAREN
    (78) expr -> expr . arith_op expr
    (79) expr -> expr . bool_op expr
    (86) arith_op -> . PLUS
    (87) arith_op -> . MINUS
    (88) arith_op -> . TIMES
    (89) arith_op -> . DIVIDE
    (90) bool_op -> . AND
    (91) bool_op -> . OR
    (92) bool_op -> . EQUALSCOMPARE
    (93) bool_op -> . NOTEQUALS
    (94) bool_op -> . LESSTHAN
    (95) bool_op -> . GREATERTHAN
    (96) bool_op -> . LESSTHANOREQ
    (97) bool_op -> . GREATERTHANOREQ

    RPAREN          shift and go to state 135
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    AND             shift and go to state 142
    OR              shift and go to state 143
    EQUALSCOMPARE   shift and go to state 144
    NOTEQUALS       shift and go to state 145
    LESSTHAN        shift and go to state 146
    GREATERTHAN     shift and go to state 147
    LESSTHANOREQ    shift and go to state 148
    GREATERTHANOREQ shift and go to state 149

    arith_op                       shift and go to state 136
    bool_op                        shift and go to state 137

state 105

    (76) expr -> primary .
    (72) field_access -> primary . PERIOD ID

    RPAREN          reduce using rule 76 (expr -> primary .)
    PLUS            reduce using rule 76 (expr -> primary .)
    MINUS           reduce using rule 76 (expr -> primary .)
    TIMES           reduce using rule 76 (expr -> primary .)
    DIVIDE          reduce using rule 76 (expr -> primary .)
    AND             reduce using rule 76 (expr -> primary .)
    OR              reduce using rule 76 (expr -> primary .)
    EQUALSCOMPARE   reduce using rule 76 (expr -> primary .)
    NOTEQUALS       reduce using rule 76 (expr -> primary .)
    LESSTHAN        reduce using rule 76 (expr -> primary .)
    GREATERTHAN     reduce using rule 76 (expr -> primary .)
    LESSTHANOREQ    reduce using rule 76 (expr -> primary .)
    GREATERTHANOREQ reduce using rule 76 (expr -> primary .)
    SEMICOLON       reduce using rule 76 (expr -> primary .)
    COMMA           reduce using rule 76 (expr -> primary .)
    PERIOD          shift and go to state 131


state 106

    (77) expr -> assign .

    RPAREN          reduce using rule 77 (expr -> assign .)
    PLUS            reduce using rule 77 (expr -> assign .)
    MINUS           reduce using rule 77 (expr -> assign .)
    TIMES           reduce using rule 77 (expr -> assign .)
    DIVIDE          reduce using rule 77 (expr -> assign .)
    AND             reduce using rule 77 (expr -> assign .)
    OR              reduce using rule 77 (expr -> assign .)
    EQUALSCOMPARE   reduce using rule 77 (expr -> assign .)
    NOTEQUALS       reduce using rule 77 (expr -> assign .)
    LESSTHAN        reduce using rule 77 (expr -> assign .)
    GREATERTHAN     reduce using rule 77 (expr -> assign .)
    LESSTHANOREQ    reduce using rule 77 (expr -> assign .)
    GREATERTHANOREQ reduce using rule 77 (expr -> assign .)
    SEMICOLON       reduce using rule 77 (expr -> assign .)
    COMMA           reduce using rule 77 (expr -> assign .)


state 107

    (80) expr -> unary_op . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . expr arith_op expr
    (79) expr -> . expr bool_op expr
    (80) expr -> . unary_op expr
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (98) unary_op -> . PLUS
    (99) unary_op -> . MINUS
    (100) unary_op -> . NOT
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE
    (71) lhs -> . field_access
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID

    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NOT             shift and go to state 113
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96
    ID              shift and go to state 108

    unary_op                       shift and go to state 107
    expr                           shift and go to state 150
    primary                        shift and go to state 105
    assign                         shift and go to state 106
    literal                        shift and go to state 87
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 110
    field_access                   shift and go to state 114

state 108

    (73) field_access -> ID .

    LPAREN          reduce using rule 73 (field_access -> ID .)
    EQUALS          reduce using rule 73 (field_access -> ID .)
    PLUSPLUS        reduce using rule 73 (field_access -> ID .)
    MINUSMINUS      reduce using rule 73 (field_access -> ID .)
    PERIOD          reduce using rule 73 (field_access -> ID .)
    RPAREN          reduce using rule 73 (field_access -> ID .)
    PLUS            reduce using rule 73 (field_access -> ID .)
    MINUS           reduce using rule 73 (field_access -> ID .)
    TIMES           reduce using rule 73 (field_access -> ID .)
    DIVIDE          reduce using rule 73 (field_access -> ID .)
    AND             reduce using rule 73 (field_access -> ID .)
    OR              reduce using rule 73 (field_access -> ID .)
    EQUALSCOMPARE   reduce using rule 73 (field_access -> ID .)
    NOTEQUALS       reduce using rule 73 (field_access -> ID .)
    LESSTHAN        reduce using rule 73 (field_access -> ID .)
    GREATERTHAN     reduce using rule 73 (field_access -> ID .)
    LESSTHANOREQ    reduce using rule 73 (field_access -> ID .)
    GREATERTHANOREQ reduce using rule 73 (field_access -> ID .)
    SEMICOLON       reduce using rule 73 (field_access -> ID .)
    COMMA           reduce using rule 73 (field_access -> ID .)


state 109

    (66) primary -> lhs .
    (81) assign -> lhs . EQUALS expr
    (82) assign -> lhs . PLUSPLUS
    (84) assign -> lhs . MINUSMINUS

    PERIOD          reduce using rule 66 (primary -> lhs .)
    RPAREN          reduce using rule 66 (primary -> lhs .)
    PLUS            reduce using rule 66 (primary -> lhs .)
    MINUS           reduce using rule 66 (primary -> lhs .)
    TIMES           reduce using rule 66 (primary -> lhs .)
    DIVIDE          reduce using rule 66 (primary -> lhs .)
    AND             reduce using rule 66 (primary -> lhs .)
    OR              reduce using rule 66 (primary -> lhs .)
    EQUALSCOMPARE   reduce using rule 66 (primary -> lhs .)
    NOTEQUALS       reduce using rule 66 (primary -> lhs .)
    LESSTHAN        reduce using rule 66 (primary -> lhs .)
    GREATERTHAN     reduce using rule 66 (primary -> lhs .)
    LESSTHANOREQ    reduce using rule 66 (primary -> lhs .)
    GREATERTHANOREQ reduce using rule 66 (primary -> lhs .)
    SEMICOLON       reduce using rule 66 (primary -> lhs .)
    COMMA           reduce using rule 66 (primary -> lhs .)
    EQUALS          shift and go to state 125
    PLUSPLUS        shift and go to state 126
    MINUSMINUS      shift and go to state 127


state 110

    (67) primary -> method_invocation .

    PERIOD          reduce using rule 67 (primary -> method_invocation .)
    RPAREN          reduce using rule 67 (primary -> method_invocation .)
    PLUS            reduce using rule 67 (primary -> method_invocation .)
    MINUS           reduce using rule 67 (primary -> method_invocation .)
    TIMES           reduce using rule 67 (primary -> method_invocation .)
    DIVIDE          reduce using rule 67 (primary -> method_invocation .)
    AND             reduce using rule 67 (primary -> method_invocation .)
    OR              reduce using rule 67 (primary -> method_invocation .)
    EQUALSCOMPARE   reduce using rule 67 (primary -> method_invocation .)
    NOTEQUALS       reduce using rule 67 (primary -> method_invocation .)
    LESSTHAN        reduce using rule 67 (primary -> method_invocation .)
    GREATERTHAN     reduce using rule 67 (primary -> method_invocation .)
    LESSTHANOREQ    reduce using rule 67 (primary -> method_invocation .)
    GREATERTHANOREQ reduce using rule 67 (primary -> method_invocation .)
    SEMICOLON       reduce using rule 67 (primary -> method_invocation .)
    COMMA           reduce using rule 67 (primary -> method_invocation .)


state 111

    (98) unary_op -> PLUS .

    THIS            reduce using rule 98 (unary_op -> PLUS .)
    SUPER           reduce using rule 98 (unary_op -> PLUS .)
    LPAREN          reduce using rule 98 (unary_op -> PLUS .)
    NEW             reduce using rule 98 (unary_op -> PLUS .)
    PLUSPLUS        reduce using rule 98 (unary_op -> PLUS .)
    MINUSMINUS      reduce using rule 98 (unary_op -> PLUS .)
    PLUS            reduce using rule 98 (unary_op -> PLUS .)
    MINUS           reduce using rule 98 (unary_op -> PLUS .)
    NOT             reduce using rule 98 (unary_op -> PLUS .)
    INTCONST        reduce using rule 98 (unary_op -> PLUS .)
    FLOATCONST      reduce using rule 98 (unary_op -> PLUS .)
    STRINGCONST     reduce using rule 98 (unary_op -> PLUS .)
    NULL            reduce using rule 98 (unary_op -> PLUS .)
    TRUE            reduce using rule 98 (unary_op -> PLUS .)
    FALSE           reduce using rule 98 (unary_op -> PLUS .)
    ID              reduce using rule 98 (unary_op -> PLUS .)


state 112

    (99) unary_op -> MINUS .

    THIS            reduce using rule 99 (unary_op -> MINUS .)
    SUPER           reduce using rule 99 (unary_op -> MINUS .)
    LPAREN          reduce using rule 99 (unary_op -> MINUS .)
    NEW             reduce using rule 99 (unary_op -> MINUS .)
    PLUSPLUS        reduce using rule 99 (unary_op -> MINUS .)
    MINUSMINUS      reduce using rule 99 (unary_op -> MINUS .)
    PLUS            reduce using rule 99 (unary_op -> MINUS .)
    MINUS           reduce using rule 99 (unary_op -> MINUS .)
    NOT             reduce using rule 99 (unary_op -> MINUS .)
    INTCONST        reduce using rule 99 (unary_op -> MINUS .)
    FLOATCONST      reduce using rule 99 (unary_op -> MINUS .)
    STRINGCONST     reduce using rule 99 (unary_op -> MINUS .)
    NULL            reduce using rule 99 (unary_op -> MINUS .)
    TRUE            reduce using rule 99 (unary_op -> MINUS .)
    FALSE           reduce using rule 99 (unary_op -> MINUS .)
    ID              reduce using rule 99 (unary_op -> MINUS .)


state 113

    (100) unary_op -> NOT .

    THIS            reduce using rule 100 (unary_op -> NOT .)
    SUPER           reduce using rule 100 (unary_op -> NOT .)
    LPAREN          reduce using rule 100 (unary_op -> NOT .)
    NEW             reduce using rule 100 (unary_op -> NOT .)
    PLUSPLUS        reduce using rule 100 (unary_op -> NOT .)
    MINUSMINUS      reduce using rule 100 (unary_op -> NOT .)
    PLUS            reduce using rule 100 (unary_op -> NOT .)
    MINUS           reduce using rule 100 (unary_op -> NOT .)
    NOT             reduce using rule 100 (unary_op -> NOT .)
    INTCONST        reduce using rule 100 (unary_op -> NOT .)
    FLOATCONST      reduce using rule 100 (unary_op -> NOT .)
    STRINGCONST     reduce using rule 100 (unary_op -> NOT .)
    NULL            reduce using rule 100 (unary_op -> NOT .)
    TRUE            reduce using rule 100 (unary_op -> NOT .)
    FALSE           reduce using rule 100 (unary_op -> NOT .)
    ID              reduce using rule 100 (unary_op -> NOT .)


state 114

    (71) lhs -> field_access .
    (74) method_invocation -> field_access . LPAREN RPAREN
    (75) method_invocation -> field_access . LPAREN arguments RPAREN

    EQUALS          reduce using rule 71 (lhs -> field_access .)
    PLUSPLUS        reduce using rule 71 (lhs -> field_access .)
    MINUSMINUS      reduce using rule 71 (lhs -> field_access .)
    PERIOD          reduce using rule 71 (lhs -> field_access .)
    RPAREN          reduce using rule 71 (lhs -> field_access .)
    PLUS            reduce using rule 71 (lhs -> field_access .)
    MINUS           reduce using rule 71 (lhs -> field_access .)
    TIMES           reduce using rule 71 (lhs -> field_access .)
    DIVIDE          reduce using rule 71 (lhs -> field_access .)
    AND             reduce using rule 71 (lhs -> field_access .)
    OR              reduce using rule 71 (lhs -> field_access .)
    EQUALSCOMPARE   reduce using rule 71 (lhs -> field_access .)
    NOTEQUALS       reduce using rule 71 (lhs -> field_access .)
    LESSTHAN        reduce using rule 71 (lhs -> field_access .)
    GREATERTHAN     reduce using rule 71 (lhs -> field_access .)
    LESSTHANOREQ    reduce using rule 71 (lhs -> field_access .)
    GREATERTHANOREQ reduce using rule 71 (lhs -> field_access .)
    SEMICOLON       reduce using rule 71 (lhs -> field_access .)
    COMMA           reduce using rule 71 (lhs -> field_access .)
    LPAREN          shift and go to state 130


state 115

    (43) stmt -> WHILE LPAREN . expr RPAREN stmt
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . expr arith_op expr
    (79) expr -> . expr bool_op expr
    (80) expr -> . unary_op expr
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (98) unary_op -> . PLUS
    (99) unary_op -> . MINUS
    (100) unary_op -> . NOT
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE
    (71) lhs -> . field_access
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID

    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NOT             shift and go to state 113
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96
    ID              shift and go to state 108

    expr                           shift and go to state 151
    primary                        shift and go to state 105
    assign                         shift and go to state 106
    unary_op                       shift and go to state 107
    literal                        shift and go to state 87
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 110
    field_access                   shift and go to state 114

state 116

    (44) stmt -> FOR LPAREN . stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (101) stmt_expr -> . assign
    (102) stmt_expr -> . method_invocation
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (71) lhs -> . field_access
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE

    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    ID              shift and go to state 108
    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96

    stmt_expr                      shift and go to state 152
    assign                         shift and go to state 78
    method_invocation              shift and go to state 79
    lhs                            shift and go to state 81
    field_access                   shift and go to state 84
    primary                        shift and go to state 86
    literal                        shift and go to state 87

state 117

    (47) stmt -> stmt_expr SEMICOLON . stmt
    (41) stmt -> . IF LPAREN expr RPAREN stmt
    (42) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (43) stmt -> . WHILE LPAREN expr RPAREN stmt
    (44) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (45) stmt -> . RETURN SEMICOLON stmt
    (46) stmt -> . RETURN expr SEMICOLON stmt
    (47) stmt -> . stmt_expr SEMICOLON stmt
    (48) stmt -> . BREAK SEMICOLON stmt
    (49) stmt -> . CONTINUE SEMICOLON stmt
    (50) stmt -> . block stmt
    (51) stmt -> . var_decl SEMICOLON stmt
    (52) stmt -> . SEMICOLON stmt
    (53) stmt -> . empty
    (101) stmt_expr -> . assign
    (102) stmt_expr -> . method_invocation
    (40) block -> . LBRACE stmt RBRACE
    (18) var_decl -> . type variables
    (1) empty -> .
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . VOID
    (23) type -> . ID
    (71) lhs -> . field_access
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE

    IF              shift and go to state 66
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    RETURN          shift and go to state 72
    BREAK           shift and go to state 73
    CONTINUE        shift and go to state 74
    SEMICOLON       shift and go to state 71
    LBRACE          shift and go to state 57
    RBRACE          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 85
    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96

    stmt_expr                      shift and go to state 70
    stmt                           shift and go to state 153
    block                          shift and go to state 75
    var_decl                       shift and go to state 76
    empty                          shift and go to state 77
    assign                         shift and go to state 78
    method_invocation              shift and go to state 79
    type                           shift and go to state 80
    lhs                            shift and go to state 81
    field_access                   shift and go to state 84
    primary                        shift and go to state 86
    literal                        shift and go to state 87

state 118

    (52) stmt -> SEMICOLON stmt .

    RBRACE          reduce using rule 52 (stmt -> SEMICOLON stmt .)
    ELSE            reduce using rule 52 (stmt -> SEMICOLON stmt .)


state 119

    (45) stmt -> RETURN SEMICOLON . stmt
    (41) stmt -> . IF LPAREN expr RPAREN stmt
    (42) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (43) stmt -> . WHILE LPAREN expr RPAREN stmt
    (44) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (45) stmt -> . RETURN SEMICOLON stmt
    (46) stmt -> . RETURN expr SEMICOLON stmt
    (47) stmt -> . stmt_expr SEMICOLON stmt
    (48) stmt -> . BREAK SEMICOLON stmt
    (49) stmt -> . CONTINUE SEMICOLON stmt
    (50) stmt -> . block stmt
    (51) stmt -> . var_decl SEMICOLON stmt
    (52) stmt -> . SEMICOLON stmt
    (53) stmt -> . empty
    (101) stmt_expr -> . assign
    (102) stmt_expr -> . method_invocation
    (40) block -> . LBRACE stmt RBRACE
    (18) var_decl -> . type variables
    (1) empty -> .
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . VOID
    (23) type -> . ID
    (71) lhs -> . field_access
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE

    IF              shift and go to state 66
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    RETURN          shift and go to state 72
    BREAK           shift and go to state 73
    CONTINUE        shift and go to state 74
    SEMICOLON       shift and go to state 71
    LBRACE          shift and go to state 57
    RBRACE          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 85
    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96

    stmt                           shift and go to state 154
    stmt_expr                      shift and go to state 70
    block                          shift and go to state 75
    var_decl                       shift and go to state 76
    empty                          shift and go to state 77
    assign                         shift and go to state 78
    method_invocation              shift and go to state 79
    type                           shift and go to state 80
    lhs                            shift and go to state 81
    field_access                   shift and go to state 84
    primary                        shift and go to state 86
    literal                        shift and go to state 87

state 120

    (46) stmt -> RETURN expr . SEMICOLON stmt
    (78) expr -> expr . arith_op expr
    (79) expr -> expr . bool_op expr
    (86) arith_op -> . PLUS
    (87) arith_op -> . MINUS
    (88) arith_op -> . TIMES
    (89) arith_op -> . DIVIDE
    (90) bool_op -> . AND
    (91) bool_op -> . OR
    (92) bool_op -> . EQUALSCOMPARE
    (93) bool_op -> . NOTEQUALS
    (94) bool_op -> . LESSTHAN
    (95) bool_op -> . GREATERTHAN
    (96) bool_op -> . LESSTHANOREQ
    (97) bool_op -> . GREATERTHANOREQ

    SEMICOLON       shift and go to state 155
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    AND             shift and go to state 142
    OR              shift and go to state 143
    EQUALSCOMPARE   shift and go to state 144
    NOTEQUALS       shift and go to state 145
    LESSTHAN        shift and go to state 146
    GREATERTHAN     shift and go to state 147
    LESSTHANOREQ    shift and go to state 148
    GREATERTHANOREQ shift and go to state 149

    arith_op                       shift and go to state 136
    bool_op                        shift and go to state 137

state 121

    (48) stmt -> BREAK SEMICOLON . stmt
    (41) stmt -> . IF LPAREN expr RPAREN stmt
    (42) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (43) stmt -> . WHILE LPAREN expr RPAREN stmt
    (44) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (45) stmt -> . RETURN SEMICOLON stmt
    (46) stmt -> . RETURN expr SEMICOLON stmt
    (47) stmt -> . stmt_expr SEMICOLON stmt
    (48) stmt -> . BREAK SEMICOLON stmt
    (49) stmt -> . CONTINUE SEMICOLON stmt
    (50) stmt -> . block stmt
    (51) stmt -> . var_decl SEMICOLON stmt
    (52) stmt -> . SEMICOLON stmt
    (53) stmt -> . empty
    (101) stmt_expr -> . assign
    (102) stmt_expr -> . method_invocation
    (40) block -> . LBRACE stmt RBRACE
    (18) var_decl -> . type variables
    (1) empty -> .
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . VOID
    (23) type -> . ID
    (71) lhs -> . field_access
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE

    IF              shift and go to state 66
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    RETURN          shift and go to state 72
    BREAK           shift and go to state 73
    CONTINUE        shift and go to state 74
    SEMICOLON       shift and go to state 71
    LBRACE          shift and go to state 57
    RBRACE          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 85
    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96

    stmt                           shift and go to state 156
    stmt_expr                      shift and go to state 70
    block                          shift and go to state 75
    var_decl                       shift and go to state 76
    empty                          shift and go to state 77
    assign                         shift and go to state 78
    method_invocation              shift and go to state 79
    type                           shift and go to state 80
    lhs                            shift and go to state 81
    field_access                   shift and go to state 84
    primary                        shift and go to state 86
    literal                        shift and go to state 87

state 122

    (49) stmt -> CONTINUE SEMICOLON . stmt
    (41) stmt -> . IF LPAREN expr RPAREN stmt
    (42) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (43) stmt -> . WHILE LPAREN expr RPAREN stmt
    (44) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (45) stmt -> . RETURN SEMICOLON stmt
    (46) stmt -> . RETURN expr SEMICOLON stmt
    (47) stmt -> . stmt_expr SEMICOLON stmt
    (48) stmt -> . BREAK SEMICOLON stmt
    (49) stmt -> . CONTINUE SEMICOLON stmt
    (50) stmt -> . block stmt
    (51) stmt -> . var_decl SEMICOLON stmt
    (52) stmt -> . SEMICOLON stmt
    (53) stmt -> . empty
    (101) stmt_expr -> . assign
    (102) stmt_expr -> . method_invocation
    (40) block -> . LBRACE stmt RBRACE
    (18) var_decl -> . type variables
    (1) empty -> .
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . VOID
    (23) type -> . ID
    (71) lhs -> . field_access
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE

    IF              shift and go to state 66
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    RETURN          shift and go to state 72
    BREAK           shift and go to state 73
    CONTINUE        shift and go to state 74
    SEMICOLON       shift and go to state 71
    LBRACE          shift and go to state 57
    RBRACE          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 85
    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96

    stmt                           shift and go to state 157
    stmt_expr                      shift and go to state 70
    block                          shift and go to state 75
    var_decl                       shift and go to state 76
    empty                          shift and go to state 77
    assign                         shift and go to state 78
    method_invocation              shift and go to state 79
    type                           shift and go to state 80
    lhs                            shift and go to state 81
    field_access                   shift and go to state 84
    primary                        shift and go to state 86
    literal                        shift and go to state 87

state 123

    (50) stmt -> block stmt .

    RBRACE          reduce using rule 50 (stmt -> block stmt .)
    ELSE            reduce using rule 50 (stmt -> block stmt .)


state 124

    (51) stmt -> var_decl SEMICOLON . stmt
    (41) stmt -> . IF LPAREN expr RPAREN stmt
    (42) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (43) stmt -> . WHILE LPAREN expr RPAREN stmt
    (44) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (45) stmt -> . RETURN SEMICOLON stmt
    (46) stmt -> . RETURN expr SEMICOLON stmt
    (47) stmt -> . stmt_expr SEMICOLON stmt
    (48) stmt -> . BREAK SEMICOLON stmt
    (49) stmt -> . CONTINUE SEMICOLON stmt
    (50) stmt -> . block stmt
    (51) stmt -> . var_decl SEMICOLON stmt
    (52) stmt -> . SEMICOLON stmt
    (53) stmt -> . empty
    (101) stmt_expr -> . assign
    (102) stmt_expr -> . method_invocation
    (40) block -> . LBRACE stmt RBRACE
    (18) var_decl -> . type variables
    (1) empty -> .
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . VOID
    (23) type -> . ID
    (71) lhs -> . field_access
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE

    IF              shift and go to state 66
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    RETURN          shift and go to state 72
    BREAK           shift and go to state 73
    CONTINUE        shift and go to state 74
    SEMICOLON       shift and go to state 71
    LBRACE          shift and go to state 57
    RBRACE          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 85
    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96

    var_decl                       shift and go to state 76
    stmt                           shift and go to state 158
    stmt_expr                      shift and go to state 70
    block                          shift and go to state 75
    empty                          shift and go to state 77
    assign                         shift and go to state 78
    method_invocation              shift and go to state 79
    type                           shift and go to state 80
    lhs                            shift and go to state 81
    field_access                   shift and go to state 84
    primary                        shift and go to state 86
    literal                        shift and go to state 87

state 125

    (81) assign -> lhs EQUALS . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . expr arith_op expr
    (79) expr -> . expr bool_op expr
    (80) expr -> . unary_op expr
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (98) unary_op -> . PLUS
    (99) unary_op -> . MINUS
    (100) unary_op -> . NOT
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE
    (71) lhs -> . field_access
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID

    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NOT             shift and go to state 113
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96
    ID              shift and go to state 108

    lhs                            shift and go to state 109
    expr                           shift and go to state 159
    primary                        shift and go to state 105
    assign                         shift and go to state 106
    unary_op                       shift and go to state 107
    literal                        shift and go to state 87
    method_invocation              shift and go to state 110
    field_access                   shift and go to state 114

state 126

    (82) assign -> lhs PLUSPLUS .

    SEMICOLON       reduce using rule 82 (assign -> lhs PLUSPLUS .)
    RPAREN          reduce using rule 82 (assign -> lhs PLUSPLUS .)
    PLUS            reduce using rule 82 (assign -> lhs PLUSPLUS .)
    MINUS           reduce using rule 82 (assign -> lhs PLUSPLUS .)
    TIMES           reduce using rule 82 (assign -> lhs PLUSPLUS .)
    DIVIDE          reduce using rule 82 (assign -> lhs PLUSPLUS .)
    AND             reduce using rule 82 (assign -> lhs PLUSPLUS .)
    OR              reduce using rule 82 (assign -> lhs PLUSPLUS .)
    EQUALSCOMPARE   reduce using rule 82 (assign -> lhs PLUSPLUS .)
    NOTEQUALS       reduce using rule 82 (assign -> lhs PLUSPLUS .)
    LESSTHAN        reduce using rule 82 (assign -> lhs PLUSPLUS .)
    GREATERTHAN     reduce using rule 82 (assign -> lhs PLUSPLUS .)
    LESSTHANOREQ    reduce using rule 82 (assign -> lhs PLUSPLUS .)
    GREATERTHANOREQ reduce using rule 82 (assign -> lhs PLUSPLUS .)
    COMMA           reduce using rule 82 (assign -> lhs PLUSPLUS .)


state 127

    (84) assign -> lhs MINUSMINUS .

    SEMICOLON       reduce using rule 84 (assign -> lhs MINUSMINUS .)
    RPAREN          reduce using rule 84 (assign -> lhs MINUSMINUS .)
    PLUS            reduce using rule 84 (assign -> lhs MINUSMINUS .)
    MINUS           reduce using rule 84 (assign -> lhs MINUSMINUS .)
    TIMES           reduce using rule 84 (assign -> lhs MINUSMINUS .)
    DIVIDE          reduce using rule 84 (assign -> lhs MINUSMINUS .)
    AND             reduce using rule 84 (assign -> lhs MINUSMINUS .)
    OR              reduce using rule 84 (assign -> lhs MINUSMINUS .)
    EQUALSCOMPARE   reduce using rule 84 (assign -> lhs MINUSMINUS .)
    NOTEQUALS       reduce using rule 84 (assign -> lhs MINUSMINUS .)
    LESSTHAN        reduce using rule 84 (assign -> lhs MINUSMINUS .)
    GREATERTHAN     reduce using rule 84 (assign -> lhs MINUSMINUS .)
    LESSTHANOREQ    reduce using rule 84 (assign -> lhs MINUSMINUS .)
    GREATERTHANOREQ reduce using rule 84 (assign -> lhs MINUSMINUS .)
    COMMA           reduce using rule 84 (assign -> lhs MINUSMINUS .)


state 128

    (83) assign -> PLUSPLUS lhs .
    (66) primary -> lhs .

    SEMICOLON       reduce using rule 83 (assign -> PLUSPLUS lhs .)
    RPAREN          reduce using rule 83 (assign -> PLUSPLUS lhs .)
    PLUS            reduce using rule 83 (assign -> PLUSPLUS lhs .)
    MINUS           reduce using rule 83 (assign -> PLUSPLUS lhs .)
    TIMES           reduce using rule 83 (assign -> PLUSPLUS lhs .)
    DIVIDE          reduce using rule 83 (assign -> PLUSPLUS lhs .)
    AND             reduce using rule 83 (assign -> PLUSPLUS lhs .)
    OR              reduce using rule 83 (assign -> PLUSPLUS lhs .)
    EQUALSCOMPARE   reduce using rule 83 (assign -> PLUSPLUS lhs .)
    NOTEQUALS       reduce using rule 83 (assign -> PLUSPLUS lhs .)
    LESSTHAN        reduce using rule 83 (assign -> PLUSPLUS lhs .)
    GREATERTHAN     reduce using rule 83 (assign -> PLUSPLUS lhs .)
    LESSTHANOREQ    reduce using rule 83 (assign -> PLUSPLUS lhs .)
    GREATERTHANOREQ reduce using rule 83 (assign -> PLUSPLUS lhs .)
    COMMA           reduce using rule 83 (assign -> PLUSPLUS lhs .)
    PERIOD          reduce using rule 66 (primary -> lhs .)


state 129

    (85) assign -> MINUSMINUS lhs .
    (66) primary -> lhs .

    SEMICOLON       reduce using rule 85 (assign -> MINUSMINUS lhs .)
    RPAREN          reduce using rule 85 (assign -> MINUSMINUS lhs .)
    PLUS            reduce using rule 85 (assign -> MINUSMINUS lhs .)
    MINUS           reduce using rule 85 (assign -> MINUSMINUS lhs .)
    TIMES           reduce using rule 85 (assign -> MINUSMINUS lhs .)
    DIVIDE          reduce using rule 85 (assign -> MINUSMINUS lhs .)
    AND             reduce using rule 85 (assign -> MINUSMINUS lhs .)
    OR              reduce using rule 85 (assign -> MINUSMINUS lhs .)
    EQUALSCOMPARE   reduce using rule 85 (assign -> MINUSMINUS lhs .)
    NOTEQUALS       reduce using rule 85 (assign -> MINUSMINUS lhs .)
    LESSTHAN        reduce using rule 85 (assign -> MINUSMINUS lhs .)
    GREATERTHAN     reduce using rule 85 (assign -> MINUSMINUS lhs .)
    LESSTHANOREQ    reduce using rule 85 (assign -> MINUSMINUS lhs .)
    GREATERTHANOREQ reduce using rule 85 (assign -> MINUSMINUS lhs .)
    COMMA           reduce using rule 85 (assign -> MINUSMINUS lhs .)
    PERIOD          reduce using rule 66 (primary -> lhs .)


state 130

    (74) method_invocation -> field_access LPAREN . RPAREN
    (75) method_invocation -> field_access LPAREN . arguments RPAREN
    (68) arguments -> . expr
    (69) arguments -> . arguments COMMA expr
    (70) arguments -> . empty
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . expr arith_op expr
    (79) expr -> . expr bool_op expr
    (80) expr -> . unary_op expr
    (1) empty -> .
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (98) unary_op -> . PLUS
    (99) unary_op -> . MINUS
    (100) unary_op -> . NOT
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE
    (71) lhs -> . field_access
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 160
    COMMA           reduce using rule 1 (empty -> .)
    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NOT             shift and go to state 113
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96
    ID              shift and go to state 108

  ! RPAREN          [ reduce using rule 1 (empty -> .) ]

    field_access                   shift and go to state 114
    arguments                      shift and go to state 161
    expr                           shift and go to state 162
    empty                          shift and go to state 163
    primary                        shift and go to state 105
    assign                         shift and go to state 106
    unary_op                       shift and go to state 107
    literal                        shift and go to state 87
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 110

state 131

    (72) field_access -> primary PERIOD . ID

    ID              shift and go to state 164


state 132

    (64) primary -> NEW ID . LPAREN arguments RPAREN
    (65) primary -> NEW ID . LPAREN RPAREN

    LPAREN          shift and go to state 165


state 133

    (31) method_decl -> modifier VOID ID LPAREN formals RPAREN block .

    PUBLIC          reduce using rule 31 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    PRIVATE         reduce using rule 31 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    STATIC          reduce using rule 31 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    VOID            reduce using rule 31 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    ID              reduce using rule 31 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    INT             reduce using rule 31 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    FLOAT           reduce using rule 31 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    BOOLEAN         reduce using rule 31 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)
    RBRACE          reduce using rule 31 (method_decl -> modifier VOID ID LPAREN formals RPAREN block .)


state 134

    (41) stmt -> IF LPAREN expr . RPAREN stmt
    (42) stmt -> IF LPAREN expr . RPAREN stmt ELSE stmt
    (78) expr -> expr . arith_op expr
    (79) expr -> expr . bool_op expr
    (86) arith_op -> . PLUS
    (87) arith_op -> . MINUS
    (88) arith_op -> . TIMES
    (89) arith_op -> . DIVIDE
    (90) bool_op -> . AND
    (91) bool_op -> . OR
    (92) bool_op -> . EQUALSCOMPARE
    (93) bool_op -> . NOTEQUALS
    (94) bool_op -> . LESSTHAN
    (95) bool_op -> . GREATERTHAN
    (96) bool_op -> . LESSTHANOREQ
    (97) bool_op -> . GREATERTHANOREQ

    RPAREN          shift and go to state 166
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    AND             shift and go to state 142
    OR              shift and go to state 143
    EQUALSCOMPARE   shift and go to state 144
    NOTEQUALS       shift and go to state 145
    LESSTHAN        shift and go to state 146
    GREATERTHAN     shift and go to state 147
    LESSTHANOREQ    shift and go to state 148
    GREATERTHANOREQ shift and go to state 149

    arith_op                       shift and go to state 136
    bool_op                        shift and go to state 137

state 135

    (63) primary -> LPAREN expr RPAREN .

    PERIOD          reduce using rule 63 (primary -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 63 (primary -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 63 (primary -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 63 (primary -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 63 (primary -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 63 (primary -> LPAREN expr RPAREN .)
    AND             reduce using rule 63 (primary -> LPAREN expr RPAREN .)
    OR              reduce using rule 63 (primary -> LPAREN expr RPAREN .)
    EQUALSCOMPARE   reduce using rule 63 (primary -> LPAREN expr RPAREN .)
    NOTEQUALS       reduce using rule 63 (primary -> LPAREN expr RPAREN .)
    LESSTHAN        reduce using rule 63 (primary -> LPAREN expr RPAREN .)
    GREATERTHAN     reduce using rule 63 (primary -> LPAREN expr RPAREN .)
    LESSTHANOREQ    reduce using rule 63 (primary -> LPAREN expr RPAREN .)
    GREATERTHANOREQ reduce using rule 63 (primary -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 63 (primary -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 63 (primary -> LPAREN expr RPAREN .)


state 136

    (78) expr -> expr arith_op . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . expr arith_op expr
    (79) expr -> . expr bool_op expr
    (80) expr -> . unary_op expr
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (98) unary_op -> . PLUS
    (99) unary_op -> . MINUS
    (100) unary_op -> . NOT
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE
    (71) lhs -> . field_access
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID

    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NOT             shift and go to state 113
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96
    ID              shift and go to state 108

    expr                           shift and go to state 167
    primary                        shift and go to state 105
    assign                         shift and go to state 106
    unary_op                       shift and go to state 107
    literal                        shift and go to state 87
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 110
    field_access                   shift and go to state 114

state 137

    (79) expr -> expr bool_op . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . expr arith_op expr
    (79) expr -> . expr bool_op expr
    (80) expr -> . unary_op expr
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (98) unary_op -> . PLUS
    (99) unary_op -> . MINUS
    (100) unary_op -> . NOT
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE
    (71) lhs -> . field_access
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID

    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NOT             shift and go to state 113
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96
    ID              shift and go to state 108

    expr                           shift and go to state 168
    primary                        shift and go to state 105
    assign                         shift and go to state 106
    unary_op                       shift and go to state 107
    literal                        shift and go to state 87
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 110
    field_access                   shift and go to state 114

state 138

    (86) arith_op -> PLUS .

    THIS            reduce using rule 86 (arith_op -> PLUS .)
    SUPER           reduce using rule 86 (arith_op -> PLUS .)
    LPAREN          reduce using rule 86 (arith_op -> PLUS .)
    NEW             reduce using rule 86 (arith_op -> PLUS .)
    PLUSPLUS        reduce using rule 86 (arith_op -> PLUS .)
    MINUSMINUS      reduce using rule 86 (arith_op -> PLUS .)
    PLUS            reduce using rule 86 (arith_op -> PLUS .)
    MINUS           reduce using rule 86 (arith_op -> PLUS .)
    NOT             reduce using rule 86 (arith_op -> PLUS .)
    INTCONST        reduce using rule 86 (arith_op -> PLUS .)
    FLOATCONST      reduce using rule 86 (arith_op -> PLUS .)
    STRINGCONST     reduce using rule 86 (arith_op -> PLUS .)
    NULL            reduce using rule 86 (arith_op -> PLUS .)
    TRUE            reduce using rule 86 (arith_op -> PLUS .)
    FALSE           reduce using rule 86 (arith_op -> PLUS .)
    ID              reduce using rule 86 (arith_op -> PLUS .)


state 139

    (87) arith_op -> MINUS .

    THIS            reduce using rule 87 (arith_op -> MINUS .)
    SUPER           reduce using rule 87 (arith_op -> MINUS .)
    LPAREN          reduce using rule 87 (arith_op -> MINUS .)
    NEW             reduce using rule 87 (arith_op -> MINUS .)
    PLUSPLUS        reduce using rule 87 (arith_op -> MINUS .)
    MINUSMINUS      reduce using rule 87 (arith_op -> MINUS .)
    PLUS            reduce using rule 87 (arith_op -> MINUS .)
    MINUS           reduce using rule 87 (arith_op -> MINUS .)
    NOT             reduce using rule 87 (arith_op -> MINUS .)
    INTCONST        reduce using rule 87 (arith_op -> MINUS .)
    FLOATCONST      reduce using rule 87 (arith_op -> MINUS .)
    STRINGCONST     reduce using rule 87 (arith_op -> MINUS .)
    NULL            reduce using rule 87 (arith_op -> MINUS .)
    TRUE            reduce using rule 87 (arith_op -> MINUS .)
    FALSE           reduce using rule 87 (arith_op -> MINUS .)
    ID              reduce using rule 87 (arith_op -> MINUS .)


state 140

    (88) arith_op -> TIMES .

    THIS            reduce using rule 88 (arith_op -> TIMES .)
    SUPER           reduce using rule 88 (arith_op -> TIMES .)
    LPAREN          reduce using rule 88 (arith_op -> TIMES .)
    NEW             reduce using rule 88 (arith_op -> TIMES .)
    PLUSPLUS        reduce using rule 88 (arith_op -> TIMES .)
    MINUSMINUS      reduce using rule 88 (arith_op -> TIMES .)
    PLUS            reduce using rule 88 (arith_op -> TIMES .)
    MINUS           reduce using rule 88 (arith_op -> TIMES .)
    NOT             reduce using rule 88 (arith_op -> TIMES .)
    INTCONST        reduce using rule 88 (arith_op -> TIMES .)
    FLOATCONST      reduce using rule 88 (arith_op -> TIMES .)
    STRINGCONST     reduce using rule 88 (arith_op -> TIMES .)
    NULL            reduce using rule 88 (arith_op -> TIMES .)
    TRUE            reduce using rule 88 (arith_op -> TIMES .)
    FALSE           reduce using rule 88 (arith_op -> TIMES .)
    ID              reduce using rule 88 (arith_op -> TIMES .)


state 141

    (89) arith_op -> DIVIDE .

    THIS            reduce using rule 89 (arith_op -> DIVIDE .)
    SUPER           reduce using rule 89 (arith_op -> DIVIDE .)
    LPAREN          reduce using rule 89 (arith_op -> DIVIDE .)
    NEW             reduce using rule 89 (arith_op -> DIVIDE .)
    PLUSPLUS        reduce using rule 89 (arith_op -> DIVIDE .)
    MINUSMINUS      reduce using rule 89 (arith_op -> DIVIDE .)
    PLUS            reduce using rule 89 (arith_op -> DIVIDE .)
    MINUS           reduce using rule 89 (arith_op -> DIVIDE .)
    NOT             reduce using rule 89 (arith_op -> DIVIDE .)
    INTCONST        reduce using rule 89 (arith_op -> DIVIDE .)
    FLOATCONST      reduce using rule 89 (arith_op -> DIVIDE .)
    STRINGCONST     reduce using rule 89 (arith_op -> DIVIDE .)
    NULL            reduce using rule 89 (arith_op -> DIVIDE .)
    TRUE            reduce using rule 89 (arith_op -> DIVIDE .)
    FALSE           reduce using rule 89 (arith_op -> DIVIDE .)
    ID              reduce using rule 89 (arith_op -> DIVIDE .)


state 142

    (90) bool_op -> AND .

    THIS            reduce using rule 90 (bool_op -> AND .)
    SUPER           reduce using rule 90 (bool_op -> AND .)
    LPAREN          reduce using rule 90 (bool_op -> AND .)
    NEW             reduce using rule 90 (bool_op -> AND .)
    PLUSPLUS        reduce using rule 90 (bool_op -> AND .)
    MINUSMINUS      reduce using rule 90 (bool_op -> AND .)
    PLUS            reduce using rule 90 (bool_op -> AND .)
    MINUS           reduce using rule 90 (bool_op -> AND .)
    NOT             reduce using rule 90 (bool_op -> AND .)
    INTCONST        reduce using rule 90 (bool_op -> AND .)
    FLOATCONST      reduce using rule 90 (bool_op -> AND .)
    STRINGCONST     reduce using rule 90 (bool_op -> AND .)
    NULL            reduce using rule 90 (bool_op -> AND .)
    TRUE            reduce using rule 90 (bool_op -> AND .)
    FALSE           reduce using rule 90 (bool_op -> AND .)
    ID              reduce using rule 90 (bool_op -> AND .)


state 143

    (91) bool_op -> OR .

    THIS            reduce using rule 91 (bool_op -> OR .)
    SUPER           reduce using rule 91 (bool_op -> OR .)
    LPAREN          reduce using rule 91 (bool_op -> OR .)
    NEW             reduce using rule 91 (bool_op -> OR .)
    PLUSPLUS        reduce using rule 91 (bool_op -> OR .)
    MINUSMINUS      reduce using rule 91 (bool_op -> OR .)
    PLUS            reduce using rule 91 (bool_op -> OR .)
    MINUS           reduce using rule 91 (bool_op -> OR .)
    NOT             reduce using rule 91 (bool_op -> OR .)
    INTCONST        reduce using rule 91 (bool_op -> OR .)
    FLOATCONST      reduce using rule 91 (bool_op -> OR .)
    STRINGCONST     reduce using rule 91 (bool_op -> OR .)
    NULL            reduce using rule 91 (bool_op -> OR .)
    TRUE            reduce using rule 91 (bool_op -> OR .)
    FALSE           reduce using rule 91 (bool_op -> OR .)
    ID              reduce using rule 91 (bool_op -> OR .)


state 144

    (92) bool_op -> EQUALSCOMPARE .

    THIS            reduce using rule 92 (bool_op -> EQUALSCOMPARE .)
    SUPER           reduce using rule 92 (bool_op -> EQUALSCOMPARE .)
    LPAREN          reduce using rule 92 (bool_op -> EQUALSCOMPARE .)
    NEW             reduce using rule 92 (bool_op -> EQUALSCOMPARE .)
    PLUSPLUS        reduce using rule 92 (bool_op -> EQUALSCOMPARE .)
    MINUSMINUS      reduce using rule 92 (bool_op -> EQUALSCOMPARE .)
    PLUS            reduce using rule 92 (bool_op -> EQUALSCOMPARE .)
    MINUS           reduce using rule 92 (bool_op -> EQUALSCOMPARE .)
    NOT             reduce using rule 92 (bool_op -> EQUALSCOMPARE .)
    INTCONST        reduce using rule 92 (bool_op -> EQUALSCOMPARE .)
    FLOATCONST      reduce using rule 92 (bool_op -> EQUALSCOMPARE .)
    STRINGCONST     reduce using rule 92 (bool_op -> EQUALSCOMPARE .)
    NULL            reduce using rule 92 (bool_op -> EQUALSCOMPARE .)
    TRUE            reduce using rule 92 (bool_op -> EQUALSCOMPARE .)
    FALSE           reduce using rule 92 (bool_op -> EQUALSCOMPARE .)
    ID              reduce using rule 92 (bool_op -> EQUALSCOMPARE .)


state 145

    (93) bool_op -> NOTEQUALS .

    THIS            reduce using rule 93 (bool_op -> NOTEQUALS .)
    SUPER           reduce using rule 93 (bool_op -> NOTEQUALS .)
    LPAREN          reduce using rule 93 (bool_op -> NOTEQUALS .)
    NEW             reduce using rule 93 (bool_op -> NOTEQUALS .)
    PLUSPLUS        reduce using rule 93 (bool_op -> NOTEQUALS .)
    MINUSMINUS      reduce using rule 93 (bool_op -> NOTEQUALS .)
    PLUS            reduce using rule 93 (bool_op -> NOTEQUALS .)
    MINUS           reduce using rule 93 (bool_op -> NOTEQUALS .)
    NOT             reduce using rule 93 (bool_op -> NOTEQUALS .)
    INTCONST        reduce using rule 93 (bool_op -> NOTEQUALS .)
    FLOATCONST      reduce using rule 93 (bool_op -> NOTEQUALS .)
    STRINGCONST     reduce using rule 93 (bool_op -> NOTEQUALS .)
    NULL            reduce using rule 93 (bool_op -> NOTEQUALS .)
    TRUE            reduce using rule 93 (bool_op -> NOTEQUALS .)
    FALSE           reduce using rule 93 (bool_op -> NOTEQUALS .)
    ID              reduce using rule 93 (bool_op -> NOTEQUALS .)


state 146

    (94) bool_op -> LESSTHAN .

    THIS            reduce using rule 94 (bool_op -> LESSTHAN .)
    SUPER           reduce using rule 94 (bool_op -> LESSTHAN .)
    LPAREN          reduce using rule 94 (bool_op -> LESSTHAN .)
    NEW             reduce using rule 94 (bool_op -> LESSTHAN .)
    PLUSPLUS        reduce using rule 94 (bool_op -> LESSTHAN .)
    MINUSMINUS      reduce using rule 94 (bool_op -> LESSTHAN .)
    PLUS            reduce using rule 94 (bool_op -> LESSTHAN .)
    MINUS           reduce using rule 94 (bool_op -> LESSTHAN .)
    NOT             reduce using rule 94 (bool_op -> LESSTHAN .)
    INTCONST        reduce using rule 94 (bool_op -> LESSTHAN .)
    FLOATCONST      reduce using rule 94 (bool_op -> LESSTHAN .)
    STRINGCONST     reduce using rule 94 (bool_op -> LESSTHAN .)
    NULL            reduce using rule 94 (bool_op -> LESSTHAN .)
    TRUE            reduce using rule 94 (bool_op -> LESSTHAN .)
    FALSE           reduce using rule 94 (bool_op -> LESSTHAN .)
    ID              reduce using rule 94 (bool_op -> LESSTHAN .)


state 147

    (95) bool_op -> GREATERTHAN .

    THIS            reduce using rule 95 (bool_op -> GREATERTHAN .)
    SUPER           reduce using rule 95 (bool_op -> GREATERTHAN .)
    LPAREN          reduce using rule 95 (bool_op -> GREATERTHAN .)
    NEW             reduce using rule 95 (bool_op -> GREATERTHAN .)
    PLUSPLUS        reduce using rule 95 (bool_op -> GREATERTHAN .)
    MINUSMINUS      reduce using rule 95 (bool_op -> GREATERTHAN .)
    PLUS            reduce using rule 95 (bool_op -> GREATERTHAN .)
    MINUS           reduce using rule 95 (bool_op -> GREATERTHAN .)
    NOT             reduce using rule 95 (bool_op -> GREATERTHAN .)
    INTCONST        reduce using rule 95 (bool_op -> GREATERTHAN .)
    FLOATCONST      reduce using rule 95 (bool_op -> GREATERTHAN .)
    STRINGCONST     reduce using rule 95 (bool_op -> GREATERTHAN .)
    NULL            reduce using rule 95 (bool_op -> GREATERTHAN .)
    TRUE            reduce using rule 95 (bool_op -> GREATERTHAN .)
    FALSE           reduce using rule 95 (bool_op -> GREATERTHAN .)
    ID              reduce using rule 95 (bool_op -> GREATERTHAN .)


state 148

    (96) bool_op -> LESSTHANOREQ .

    THIS            reduce using rule 96 (bool_op -> LESSTHANOREQ .)
    SUPER           reduce using rule 96 (bool_op -> LESSTHANOREQ .)
    LPAREN          reduce using rule 96 (bool_op -> LESSTHANOREQ .)
    NEW             reduce using rule 96 (bool_op -> LESSTHANOREQ .)
    PLUSPLUS        reduce using rule 96 (bool_op -> LESSTHANOREQ .)
    MINUSMINUS      reduce using rule 96 (bool_op -> LESSTHANOREQ .)
    PLUS            reduce using rule 96 (bool_op -> LESSTHANOREQ .)
    MINUS           reduce using rule 96 (bool_op -> LESSTHANOREQ .)
    NOT             reduce using rule 96 (bool_op -> LESSTHANOREQ .)
    INTCONST        reduce using rule 96 (bool_op -> LESSTHANOREQ .)
    FLOATCONST      reduce using rule 96 (bool_op -> LESSTHANOREQ .)
    STRINGCONST     reduce using rule 96 (bool_op -> LESSTHANOREQ .)
    NULL            reduce using rule 96 (bool_op -> LESSTHANOREQ .)
    TRUE            reduce using rule 96 (bool_op -> LESSTHANOREQ .)
    FALSE           reduce using rule 96 (bool_op -> LESSTHANOREQ .)
    ID              reduce using rule 96 (bool_op -> LESSTHANOREQ .)


state 149

    (97) bool_op -> GREATERTHANOREQ .

    THIS            reduce using rule 97 (bool_op -> GREATERTHANOREQ .)
    SUPER           reduce using rule 97 (bool_op -> GREATERTHANOREQ .)
    LPAREN          reduce using rule 97 (bool_op -> GREATERTHANOREQ .)
    NEW             reduce using rule 97 (bool_op -> GREATERTHANOREQ .)
    PLUSPLUS        reduce using rule 97 (bool_op -> GREATERTHANOREQ .)
    MINUSMINUS      reduce using rule 97 (bool_op -> GREATERTHANOREQ .)
    PLUS            reduce using rule 97 (bool_op -> GREATERTHANOREQ .)
    MINUS           reduce using rule 97 (bool_op -> GREATERTHANOREQ .)
    NOT             reduce using rule 97 (bool_op -> GREATERTHANOREQ .)
    INTCONST        reduce using rule 97 (bool_op -> GREATERTHANOREQ .)
    FLOATCONST      reduce using rule 97 (bool_op -> GREATERTHANOREQ .)
    STRINGCONST     reduce using rule 97 (bool_op -> GREATERTHANOREQ .)
    NULL            reduce using rule 97 (bool_op -> GREATERTHANOREQ .)
    TRUE            reduce using rule 97 (bool_op -> GREATERTHANOREQ .)
    FALSE           reduce using rule 97 (bool_op -> GREATERTHANOREQ .)
    ID              reduce using rule 97 (bool_op -> GREATERTHANOREQ .)


state 150

    (80) expr -> unary_op expr .
    (78) expr -> expr . arith_op expr
    (79) expr -> expr . bool_op expr
    (86) arith_op -> . PLUS
    (87) arith_op -> . MINUS
    (88) arith_op -> . TIMES
    (89) arith_op -> . DIVIDE
    (90) bool_op -> . AND
    (91) bool_op -> . OR
    (92) bool_op -> . EQUALSCOMPARE
    (93) bool_op -> . NOTEQUALS
    (94) bool_op -> . LESSTHAN
    (95) bool_op -> . GREATERTHAN
    (96) bool_op -> . LESSTHANOREQ
    (97) bool_op -> . GREATERTHANOREQ

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUALSCOMPARE resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANOREQ resolved as shift
  ! shift/reduce conflict for GREATERTHANOREQ resolved as shift
    RPAREN          reduce using rule 80 (expr -> unary_op expr .)
    SEMICOLON       reduce using rule 80 (expr -> unary_op expr .)
    COMMA           reduce using rule 80 (expr -> unary_op expr .)
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    AND             shift and go to state 142
    OR              shift and go to state 143
    EQUALSCOMPARE   shift and go to state 144
    NOTEQUALS       shift and go to state 145
    LESSTHAN        shift and go to state 146
    GREATERTHAN     shift and go to state 147
    LESSTHANOREQ    shift and go to state 148
    GREATERTHANOREQ shift and go to state 149

  ! PLUS            [ reduce using rule 80 (expr -> unary_op expr .) ]
  ! MINUS           [ reduce using rule 80 (expr -> unary_op expr .) ]
  ! TIMES           [ reduce using rule 80 (expr -> unary_op expr .) ]
  ! DIVIDE          [ reduce using rule 80 (expr -> unary_op expr .) ]
  ! AND             [ reduce using rule 80 (expr -> unary_op expr .) ]
  ! OR              [ reduce using rule 80 (expr -> unary_op expr .) ]
  ! EQUALSCOMPARE   [ reduce using rule 80 (expr -> unary_op expr .) ]
  ! NOTEQUALS       [ reduce using rule 80 (expr -> unary_op expr .) ]
  ! LESSTHAN        [ reduce using rule 80 (expr -> unary_op expr .) ]
  ! GREATERTHAN     [ reduce using rule 80 (expr -> unary_op expr .) ]
  ! LESSTHANOREQ    [ reduce using rule 80 (expr -> unary_op expr .) ]
  ! GREATERTHANOREQ [ reduce using rule 80 (expr -> unary_op expr .) ]

    arith_op                       shift and go to state 136
    bool_op                        shift and go to state 137

state 151

    (43) stmt -> WHILE LPAREN expr . RPAREN stmt
    (78) expr -> expr . arith_op expr
    (79) expr -> expr . bool_op expr
    (86) arith_op -> . PLUS
    (87) arith_op -> . MINUS
    (88) arith_op -> . TIMES
    (89) arith_op -> . DIVIDE
    (90) bool_op -> . AND
    (91) bool_op -> . OR
    (92) bool_op -> . EQUALSCOMPARE
    (93) bool_op -> . NOTEQUALS
    (94) bool_op -> . LESSTHAN
    (95) bool_op -> . GREATERTHAN
    (96) bool_op -> . LESSTHANOREQ
    (97) bool_op -> . GREATERTHANOREQ

    RPAREN          shift and go to state 169
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    AND             shift and go to state 142
    OR              shift and go to state 143
    EQUALSCOMPARE   shift and go to state 144
    NOTEQUALS       shift and go to state 145
    LESSTHAN        shift and go to state 146
    GREATERTHAN     shift and go to state 147
    LESSTHANOREQ    shift and go to state 148
    GREATERTHANOREQ shift and go to state 149

    arith_op                       shift and go to state 136
    bool_op                        shift and go to state 137

state 152

    (44) stmt -> FOR LPAREN stmt_expr . SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt

    SEMICOLON       shift and go to state 170


state 153

    (47) stmt -> stmt_expr SEMICOLON stmt .

    RBRACE          reduce using rule 47 (stmt -> stmt_expr SEMICOLON stmt .)
    ELSE            reduce using rule 47 (stmt -> stmt_expr SEMICOLON stmt .)


state 154

    (45) stmt -> RETURN SEMICOLON stmt .

    RBRACE          reduce using rule 45 (stmt -> RETURN SEMICOLON stmt .)
    ELSE            reduce using rule 45 (stmt -> RETURN SEMICOLON stmt .)


state 155

    (46) stmt -> RETURN expr SEMICOLON . stmt
    (41) stmt -> . IF LPAREN expr RPAREN stmt
    (42) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (43) stmt -> . WHILE LPAREN expr RPAREN stmt
    (44) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (45) stmt -> . RETURN SEMICOLON stmt
    (46) stmt -> . RETURN expr SEMICOLON stmt
    (47) stmt -> . stmt_expr SEMICOLON stmt
    (48) stmt -> . BREAK SEMICOLON stmt
    (49) stmt -> . CONTINUE SEMICOLON stmt
    (50) stmt -> . block stmt
    (51) stmt -> . var_decl SEMICOLON stmt
    (52) stmt -> . SEMICOLON stmt
    (53) stmt -> . empty
    (101) stmt_expr -> . assign
    (102) stmt_expr -> . method_invocation
    (40) block -> . LBRACE stmt RBRACE
    (18) var_decl -> . type variables
    (1) empty -> .
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . VOID
    (23) type -> . ID
    (71) lhs -> . field_access
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE

    IF              shift and go to state 66
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    RETURN          shift and go to state 72
    BREAK           shift and go to state 73
    CONTINUE        shift and go to state 74
    SEMICOLON       shift and go to state 71
    LBRACE          shift and go to state 57
    RBRACE          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 85
    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96

    stmt                           shift and go to state 171
    stmt_expr                      shift and go to state 70
    block                          shift and go to state 75
    var_decl                       shift and go to state 76
    empty                          shift and go to state 77
    assign                         shift and go to state 78
    method_invocation              shift and go to state 79
    type                           shift and go to state 80
    lhs                            shift and go to state 81
    field_access                   shift and go to state 84
    primary                        shift and go to state 86
    literal                        shift and go to state 87

state 156

    (48) stmt -> BREAK SEMICOLON stmt .

    RBRACE          reduce using rule 48 (stmt -> BREAK SEMICOLON stmt .)
    ELSE            reduce using rule 48 (stmt -> BREAK SEMICOLON stmt .)


state 157

    (49) stmt -> CONTINUE SEMICOLON stmt .

    RBRACE          reduce using rule 49 (stmt -> CONTINUE SEMICOLON stmt .)
    ELSE            reduce using rule 49 (stmt -> CONTINUE SEMICOLON stmt .)


state 158

    (51) stmt -> var_decl SEMICOLON stmt .

    RBRACE          reduce using rule 51 (stmt -> var_decl SEMICOLON stmt .)
    ELSE            reduce using rule 51 (stmt -> var_decl SEMICOLON stmt .)


state 159

    (81) assign -> lhs EQUALS expr .
    (78) expr -> expr . arith_op expr
    (79) expr -> expr . bool_op expr
    (86) arith_op -> . PLUS
    (87) arith_op -> . MINUS
    (88) arith_op -> . TIMES
    (89) arith_op -> . DIVIDE
    (90) bool_op -> . AND
    (91) bool_op -> . OR
    (92) bool_op -> . EQUALSCOMPARE
    (93) bool_op -> . NOTEQUALS
    (94) bool_op -> . LESSTHAN
    (95) bool_op -> . GREATERTHAN
    (96) bool_op -> . LESSTHANOREQ
    (97) bool_op -> . GREATERTHANOREQ

    SEMICOLON       reduce using rule 81 (assign -> lhs EQUALS expr .)
    RPAREN          reduce using rule 81 (assign -> lhs EQUALS expr .)
    COMMA           reduce using rule 81 (assign -> lhs EQUALS expr .)
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    AND             shift and go to state 142
    OR              shift and go to state 143
    EQUALSCOMPARE   shift and go to state 144
    NOTEQUALS       shift and go to state 145
    LESSTHAN        shift and go to state 146
    GREATERTHAN     shift and go to state 147
    LESSTHANOREQ    shift and go to state 148
    GREATERTHANOREQ shift and go to state 149

  ! PLUS            [ reduce using rule 81 (assign -> lhs EQUALS expr .) ]
  ! MINUS           [ reduce using rule 81 (assign -> lhs EQUALS expr .) ]
  ! TIMES           [ reduce using rule 81 (assign -> lhs EQUALS expr .) ]
  ! DIVIDE          [ reduce using rule 81 (assign -> lhs EQUALS expr .) ]
  ! AND             [ reduce using rule 81 (assign -> lhs EQUALS expr .) ]
  ! OR              [ reduce using rule 81 (assign -> lhs EQUALS expr .) ]
  ! EQUALSCOMPARE   [ reduce using rule 81 (assign -> lhs EQUALS expr .) ]
  ! NOTEQUALS       [ reduce using rule 81 (assign -> lhs EQUALS expr .) ]
  ! LESSTHAN        [ reduce using rule 81 (assign -> lhs EQUALS expr .) ]
  ! GREATERTHAN     [ reduce using rule 81 (assign -> lhs EQUALS expr .) ]
  ! LESSTHANOREQ    [ reduce using rule 81 (assign -> lhs EQUALS expr .) ]
  ! GREATERTHANOREQ [ reduce using rule 81 (assign -> lhs EQUALS expr .) ]

    arith_op                       shift and go to state 136
    bool_op                        shift and go to state 137

state 160

    (74) method_invocation -> field_access LPAREN RPAREN .

    SEMICOLON       reduce using rule 74 (method_invocation -> field_access LPAREN RPAREN .)
    PERIOD          reduce using rule 74 (method_invocation -> field_access LPAREN RPAREN .)
    RPAREN          reduce using rule 74 (method_invocation -> field_access LPAREN RPAREN .)
    PLUS            reduce using rule 74 (method_invocation -> field_access LPAREN RPAREN .)
    MINUS           reduce using rule 74 (method_invocation -> field_access LPAREN RPAREN .)
    TIMES           reduce using rule 74 (method_invocation -> field_access LPAREN RPAREN .)
    DIVIDE          reduce using rule 74 (method_invocation -> field_access LPAREN RPAREN .)
    AND             reduce using rule 74 (method_invocation -> field_access LPAREN RPAREN .)
    OR              reduce using rule 74 (method_invocation -> field_access LPAREN RPAREN .)
    EQUALSCOMPARE   reduce using rule 74 (method_invocation -> field_access LPAREN RPAREN .)
    NOTEQUALS       reduce using rule 74 (method_invocation -> field_access LPAREN RPAREN .)
    LESSTHAN        reduce using rule 74 (method_invocation -> field_access LPAREN RPAREN .)
    GREATERTHAN     reduce using rule 74 (method_invocation -> field_access LPAREN RPAREN .)
    LESSTHANOREQ    reduce using rule 74 (method_invocation -> field_access LPAREN RPAREN .)
    GREATERTHANOREQ reduce using rule 74 (method_invocation -> field_access LPAREN RPAREN .)
    COMMA           reduce using rule 74 (method_invocation -> field_access LPAREN RPAREN .)


state 161

    (75) method_invocation -> field_access LPAREN arguments . RPAREN
    (69) arguments -> arguments . COMMA expr

    RPAREN          shift and go to state 172
    COMMA           shift and go to state 173


state 162

    (68) arguments -> expr .
    (78) expr -> expr . arith_op expr
    (79) expr -> expr . bool_op expr
    (86) arith_op -> . PLUS
    (87) arith_op -> . MINUS
    (88) arith_op -> . TIMES
    (89) arith_op -> . DIVIDE
    (90) bool_op -> . AND
    (91) bool_op -> . OR
    (92) bool_op -> . EQUALSCOMPARE
    (93) bool_op -> . NOTEQUALS
    (94) bool_op -> . LESSTHAN
    (95) bool_op -> . GREATERTHAN
    (96) bool_op -> . LESSTHANOREQ
    (97) bool_op -> . GREATERTHANOREQ

    RPAREN          reduce using rule 68 (arguments -> expr .)
    COMMA           reduce using rule 68 (arguments -> expr .)
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    AND             shift and go to state 142
    OR              shift and go to state 143
    EQUALSCOMPARE   shift and go to state 144
    NOTEQUALS       shift and go to state 145
    LESSTHAN        shift and go to state 146
    GREATERTHAN     shift and go to state 147
    LESSTHANOREQ    shift and go to state 148
    GREATERTHANOREQ shift and go to state 149

    arith_op                       shift and go to state 136
    bool_op                        shift and go to state 137

state 163

    (70) arguments -> empty .

    RPAREN          reduce using rule 70 (arguments -> empty .)
    COMMA           reduce using rule 70 (arguments -> empty .)


state 164

    (72) field_access -> primary PERIOD ID .

    LPAREN          reduce using rule 72 (field_access -> primary PERIOD ID .)
    EQUALS          reduce using rule 72 (field_access -> primary PERIOD ID .)
    PLUSPLUS        reduce using rule 72 (field_access -> primary PERIOD ID .)
    MINUSMINUS      reduce using rule 72 (field_access -> primary PERIOD ID .)
    PERIOD          reduce using rule 72 (field_access -> primary PERIOD ID .)
    RPAREN          reduce using rule 72 (field_access -> primary PERIOD ID .)
    PLUS            reduce using rule 72 (field_access -> primary PERIOD ID .)
    MINUS           reduce using rule 72 (field_access -> primary PERIOD ID .)
    TIMES           reduce using rule 72 (field_access -> primary PERIOD ID .)
    DIVIDE          reduce using rule 72 (field_access -> primary PERIOD ID .)
    AND             reduce using rule 72 (field_access -> primary PERIOD ID .)
    OR              reduce using rule 72 (field_access -> primary PERIOD ID .)
    EQUALSCOMPARE   reduce using rule 72 (field_access -> primary PERIOD ID .)
    NOTEQUALS       reduce using rule 72 (field_access -> primary PERIOD ID .)
    LESSTHAN        reduce using rule 72 (field_access -> primary PERIOD ID .)
    GREATERTHAN     reduce using rule 72 (field_access -> primary PERIOD ID .)
    LESSTHANOREQ    reduce using rule 72 (field_access -> primary PERIOD ID .)
    GREATERTHANOREQ reduce using rule 72 (field_access -> primary PERIOD ID .)
    SEMICOLON       reduce using rule 72 (field_access -> primary PERIOD ID .)
    COMMA           reduce using rule 72 (field_access -> primary PERIOD ID .)


state 165

    (64) primary -> NEW ID LPAREN . arguments RPAREN
    (65) primary -> NEW ID LPAREN . RPAREN
    (68) arguments -> . expr
    (69) arguments -> . arguments COMMA expr
    (70) arguments -> . empty
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . expr arith_op expr
    (79) expr -> . expr bool_op expr
    (80) expr -> . unary_op expr
    (1) empty -> .
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (98) unary_op -> . PLUS
    (99) unary_op -> . MINUS
    (100) unary_op -> . NOT
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE
    (71) lhs -> . field_access
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 175
    COMMA           reduce using rule 1 (empty -> .)
    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NOT             shift and go to state 113
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96
    ID              shift and go to state 108

  ! RPAREN          [ reduce using rule 1 (empty -> .) ]

    arguments                      shift and go to state 174
    expr                           shift and go to state 162
    empty                          shift and go to state 163
    primary                        shift and go to state 105
    assign                         shift and go to state 106
    unary_op                       shift and go to state 107
    literal                        shift and go to state 87
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 110
    field_access                   shift and go to state 114

state 166

    (41) stmt -> IF LPAREN expr RPAREN . stmt
    (42) stmt -> IF LPAREN expr RPAREN . stmt ELSE stmt
    (41) stmt -> . IF LPAREN expr RPAREN stmt
    (42) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (43) stmt -> . WHILE LPAREN expr RPAREN stmt
    (44) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (45) stmt -> . RETURN SEMICOLON stmt
    (46) stmt -> . RETURN expr SEMICOLON stmt
    (47) stmt -> . stmt_expr SEMICOLON stmt
    (48) stmt -> . BREAK SEMICOLON stmt
    (49) stmt -> . CONTINUE SEMICOLON stmt
    (50) stmt -> . block stmt
    (51) stmt -> . var_decl SEMICOLON stmt
    (52) stmt -> . SEMICOLON stmt
    (53) stmt -> . empty
    (101) stmt_expr -> . assign
    (102) stmt_expr -> . method_invocation
    (40) block -> . LBRACE stmt RBRACE
    (18) var_decl -> . type variables
    (1) empty -> .
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . VOID
    (23) type -> . ID
    (71) lhs -> . field_access
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE

    IF              shift and go to state 66
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    RETURN          shift and go to state 72
    BREAK           shift and go to state 73
    CONTINUE        shift and go to state 74
    SEMICOLON       shift and go to state 71
    LBRACE          shift and go to state 57
    RBRACE          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 85
    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96

    stmt                           shift and go to state 176
    stmt_expr                      shift and go to state 70
    block                          shift and go to state 75
    var_decl                       shift and go to state 76
    empty                          shift and go to state 77
    assign                         shift and go to state 78
    method_invocation              shift and go to state 79
    type                           shift and go to state 80
    lhs                            shift and go to state 81
    field_access                   shift and go to state 84
    primary                        shift and go to state 86
    literal                        shift and go to state 87

state 167

    (78) expr -> expr arith_op expr .
    (78) expr -> expr . arith_op expr
    (79) expr -> expr . bool_op expr
    (86) arith_op -> . PLUS
    (87) arith_op -> . MINUS
    (88) arith_op -> . TIMES
    (89) arith_op -> . DIVIDE
    (90) bool_op -> . AND
    (91) bool_op -> . OR
    (92) bool_op -> . EQUALSCOMPARE
    (93) bool_op -> . NOTEQUALS
    (94) bool_op -> . LESSTHAN
    (95) bool_op -> . GREATERTHAN
    (96) bool_op -> . LESSTHANOREQ
    (97) bool_op -> . GREATERTHANOREQ

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUALSCOMPARE resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANOREQ resolved as shift
  ! shift/reduce conflict for GREATERTHANOREQ resolved as shift
    RPAREN          reduce using rule 78 (expr -> expr arith_op expr .)
    SEMICOLON       reduce using rule 78 (expr -> expr arith_op expr .)
    COMMA           reduce using rule 78 (expr -> expr arith_op expr .)
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    AND             shift and go to state 142
    OR              shift and go to state 143
    EQUALSCOMPARE   shift and go to state 144
    NOTEQUALS       shift and go to state 145
    LESSTHAN        shift and go to state 146
    GREATERTHAN     shift and go to state 147
    LESSTHANOREQ    shift and go to state 148
    GREATERTHANOREQ shift and go to state 149

  ! PLUS            [ reduce using rule 78 (expr -> expr arith_op expr .) ]
  ! MINUS           [ reduce using rule 78 (expr -> expr arith_op expr .) ]
  ! TIMES           [ reduce using rule 78 (expr -> expr arith_op expr .) ]
  ! DIVIDE          [ reduce using rule 78 (expr -> expr arith_op expr .) ]
  ! AND             [ reduce using rule 78 (expr -> expr arith_op expr .) ]
  ! OR              [ reduce using rule 78 (expr -> expr arith_op expr .) ]
  ! EQUALSCOMPARE   [ reduce using rule 78 (expr -> expr arith_op expr .) ]
  ! NOTEQUALS       [ reduce using rule 78 (expr -> expr arith_op expr .) ]
  ! LESSTHAN        [ reduce using rule 78 (expr -> expr arith_op expr .) ]
  ! GREATERTHAN     [ reduce using rule 78 (expr -> expr arith_op expr .) ]
  ! LESSTHANOREQ    [ reduce using rule 78 (expr -> expr arith_op expr .) ]
  ! GREATERTHANOREQ [ reduce using rule 78 (expr -> expr arith_op expr .) ]

    arith_op                       shift and go to state 136
    bool_op                        shift and go to state 137

state 168

    (79) expr -> expr bool_op expr .
    (78) expr -> expr . arith_op expr
    (79) expr -> expr . bool_op expr
    (86) arith_op -> . PLUS
    (87) arith_op -> . MINUS
    (88) arith_op -> . TIMES
    (89) arith_op -> . DIVIDE
    (90) bool_op -> . AND
    (91) bool_op -> . OR
    (92) bool_op -> . EQUALSCOMPARE
    (93) bool_op -> . NOTEQUALS
    (94) bool_op -> . LESSTHAN
    (95) bool_op -> . GREATERTHAN
    (96) bool_op -> . LESSTHANOREQ
    (97) bool_op -> . GREATERTHANOREQ

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUALSCOMPARE resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANOREQ resolved as shift
  ! shift/reduce conflict for GREATERTHANOREQ resolved as shift
    RPAREN          reduce using rule 79 (expr -> expr bool_op expr .)
    SEMICOLON       reduce using rule 79 (expr -> expr bool_op expr .)
    COMMA           reduce using rule 79 (expr -> expr bool_op expr .)
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    AND             shift and go to state 142
    OR              shift and go to state 143
    EQUALSCOMPARE   shift and go to state 144
    NOTEQUALS       shift and go to state 145
    LESSTHAN        shift and go to state 146
    GREATERTHAN     shift and go to state 147
    LESSTHANOREQ    shift and go to state 148
    GREATERTHANOREQ shift and go to state 149

  ! PLUS            [ reduce using rule 79 (expr -> expr bool_op expr .) ]
  ! MINUS           [ reduce using rule 79 (expr -> expr bool_op expr .) ]
  ! TIMES           [ reduce using rule 79 (expr -> expr bool_op expr .) ]
  ! DIVIDE          [ reduce using rule 79 (expr -> expr bool_op expr .) ]
  ! AND             [ reduce using rule 79 (expr -> expr bool_op expr .) ]
  ! OR              [ reduce using rule 79 (expr -> expr bool_op expr .) ]
  ! EQUALSCOMPARE   [ reduce using rule 79 (expr -> expr bool_op expr .) ]
  ! NOTEQUALS       [ reduce using rule 79 (expr -> expr bool_op expr .) ]
  ! LESSTHAN        [ reduce using rule 79 (expr -> expr bool_op expr .) ]
  ! GREATERTHAN     [ reduce using rule 79 (expr -> expr bool_op expr .) ]
  ! LESSTHANOREQ    [ reduce using rule 79 (expr -> expr bool_op expr .) ]
  ! GREATERTHANOREQ [ reduce using rule 79 (expr -> expr bool_op expr .) ]

    bool_op                        shift and go to state 137
    arith_op                       shift and go to state 136

state 169

    (43) stmt -> WHILE LPAREN expr RPAREN . stmt
    (41) stmt -> . IF LPAREN expr RPAREN stmt
    (42) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (43) stmt -> . WHILE LPAREN expr RPAREN stmt
    (44) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (45) stmt -> . RETURN SEMICOLON stmt
    (46) stmt -> . RETURN expr SEMICOLON stmt
    (47) stmt -> . stmt_expr SEMICOLON stmt
    (48) stmt -> . BREAK SEMICOLON stmt
    (49) stmt -> . CONTINUE SEMICOLON stmt
    (50) stmt -> . block stmt
    (51) stmt -> . var_decl SEMICOLON stmt
    (52) stmt -> . SEMICOLON stmt
    (53) stmt -> . empty
    (101) stmt_expr -> . assign
    (102) stmt_expr -> . method_invocation
    (40) block -> . LBRACE stmt RBRACE
    (18) var_decl -> . type variables
    (1) empty -> .
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . VOID
    (23) type -> . ID
    (71) lhs -> . field_access
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE

    IF              shift and go to state 66
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    RETURN          shift and go to state 72
    BREAK           shift and go to state 73
    CONTINUE        shift and go to state 74
    SEMICOLON       shift and go to state 71
    LBRACE          shift and go to state 57
    RBRACE          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 85
    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96

    stmt                           shift and go to state 177
    stmt_expr                      shift and go to state 70
    block                          shift and go to state 75
    var_decl                       shift and go to state 76
    empty                          shift and go to state 77
    assign                         shift and go to state 78
    method_invocation              shift and go to state 79
    type                           shift and go to state 80
    lhs                            shift and go to state 81
    field_access                   shift and go to state 84
    primary                        shift and go to state 86
    literal                        shift and go to state 87

state 170

    (44) stmt -> FOR LPAREN stmt_expr SEMICOLON . expr SEMICOLON stmt_expr RPAREN stmt
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . expr arith_op expr
    (79) expr -> . expr bool_op expr
    (80) expr -> . unary_op expr
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (98) unary_op -> . PLUS
    (99) unary_op -> . MINUS
    (100) unary_op -> . NOT
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE
    (71) lhs -> . field_access
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID

    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NOT             shift and go to state 113
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96
    ID              shift and go to state 108

    expr                           shift and go to state 178
    primary                        shift and go to state 105
    assign                         shift and go to state 106
    unary_op                       shift and go to state 107
    literal                        shift and go to state 87
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 110
    field_access                   shift and go to state 114

state 171

    (46) stmt -> RETURN expr SEMICOLON stmt .

    RBRACE          reduce using rule 46 (stmt -> RETURN expr SEMICOLON stmt .)
    ELSE            reduce using rule 46 (stmt -> RETURN expr SEMICOLON stmt .)


state 172

    (75) method_invocation -> field_access LPAREN arguments RPAREN .

    SEMICOLON       reduce using rule 75 (method_invocation -> field_access LPAREN arguments RPAREN .)
    PERIOD          reduce using rule 75 (method_invocation -> field_access LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 75 (method_invocation -> field_access LPAREN arguments RPAREN .)
    PLUS            reduce using rule 75 (method_invocation -> field_access LPAREN arguments RPAREN .)
    MINUS           reduce using rule 75 (method_invocation -> field_access LPAREN arguments RPAREN .)
    TIMES           reduce using rule 75 (method_invocation -> field_access LPAREN arguments RPAREN .)
    DIVIDE          reduce using rule 75 (method_invocation -> field_access LPAREN arguments RPAREN .)
    AND             reduce using rule 75 (method_invocation -> field_access LPAREN arguments RPAREN .)
    OR              reduce using rule 75 (method_invocation -> field_access LPAREN arguments RPAREN .)
    EQUALSCOMPARE   reduce using rule 75 (method_invocation -> field_access LPAREN arguments RPAREN .)
    NOTEQUALS       reduce using rule 75 (method_invocation -> field_access LPAREN arguments RPAREN .)
    LESSTHAN        reduce using rule 75 (method_invocation -> field_access LPAREN arguments RPAREN .)
    GREATERTHAN     reduce using rule 75 (method_invocation -> field_access LPAREN arguments RPAREN .)
    LESSTHANOREQ    reduce using rule 75 (method_invocation -> field_access LPAREN arguments RPAREN .)
    GREATERTHANOREQ reduce using rule 75 (method_invocation -> field_access LPAREN arguments RPAREN .)
    COMMA           reduce using rule 75 (method_invocation -> field_access LPAREN arguments RPAREN .)


state 173

    (69) arguments -> arguments COMMA . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . expr arith_op expr
    (79) expr -> . expr bool_op expr
    (80) expr -> . unary_op expr
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (98) unary_op -> . PLUS
    (99) unary_op -> . MINUS
    (100) unary_op -> . NOT
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE
    (71) lhs -> . field_access
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID

    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NOT             shift and go to state 113
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96
    ID              shift and go to state 108

    expr                           shift and go to state 179
    primary                        shift and go to state 105
    assign                         shift and go to state 106
    unary_op                       shift and go to state 107
    literal                        shift and go to state 87
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 110
    field_access                   shift and go to state 114

state 174

    (64) primary -> NEW ID LPAREN arguments . RPAREN
    (69) arguments -> arguments . COMMA expr

    RPAREN          shift and go to state 180
    COMMA           shift and go to state 173


state 175

    (65) primary -> NEW ID LPAREN RPAREN .

    PERIOD          reduce using rule 65 (primary -> NEW ID LPAREN RPAREN .)
    RPAREN          reduce using rule 65 (primary -> NEW ID LPAREN RPAREN .)
    PLUS            reduce using rule 65 (primary -> NEW ID LPAREN RPAREN .)
    MINUS           reduce using rule 65 (primary -> NEW ID LPAREN RPAREN .)
    TIMES           reduce using rule 65 (primary -> NEW ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 65 (primary -> NEW ID LPAREN RPAREN .)
    AND             reduce using rule 65 (primary -> NEW ID LPAREN RPAREN .)
    OR              reduce using rule 65 (primary -> NEW ID LPAREN RPAREN .)
    EQUALSCOMPARE   reduce using rule 65 (primary -> NEW ID LPAREN RPAREN .)
    NOTEQUALS       reduce using rule 65 (primary -> NEW ID LPAREN RPAREN .)
    LESSTHAN        reduce using rule 65 (primary -> NEW ID LPAREN RPAREN .)
    GREATERTHAN     reduce using rule 65 (primary -> NEW ID LPAREN RPAREN .)
    LESSTHANOREQ    reduce using rule 65 (primary -> NEW ID LPAREN RPAREN .)
    GREATERTHANOREQ reduce using rule 65 (primary -> NEW ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 65 (primary -> NEW ID LPAREN RPAREN .)
    COMMA           reduce using rule 65 (primary -> NEW ID LPAREN RPAREN .)


state 176

    (41) stmt -> IF LPAREN expr RPAREN stmt .
    (42) stmt -> IF LPAREN expr RPAREN stmt . ELSE stmt

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt .)
    ELSE            shift and go to state 181

  ! ELSE            [ reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt .) ]


state 177

    (43) stmt -> WHILE LPAREN expr RPAREN stmt .

    RBRACE          reduce using rule 43 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    ELSE            reduce using rule 43 (stmt -> WHILE LPAREN expr RPAREN stmt .)


state 178

    (44) stmt -> FOR LPAREN stmt_expr SEMICOLON expr . SEMICOLON stmt_expr RPAREN stmt
    (78) expr -> expr . arith_op expr
    (79) expr -> expr . bool_op expr
    (86) arith_op -> . PLUS
    (87) arith_op -> . MINUS
    (88) arith_op -> . TIMES
    (89) arith_op -> . DIVIDE
    (90) bool_op -> . AND
    (91) bool_op -> . OR
    (92) bool_op -> . EQUALSCOMPARE
    (93) bool_op -> . NOTEQUALS
    (94) bool_op -> . LESSTHAN
    (95) bool_op -> . GREATERTHAN
    (96) bool_op -> . LESSTHANOREQ
    (97) bool_op -> . GREATERTHANOREQ

    SEMICOLON       shift and go to state 182
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    AND             shift and go to state 142
    OR              shift and go to state 143
    EQUALSCOMPARE   shift and go to state 144
    NOTEQUALS       shift and go to state 145
    LESSTHAN        shift and go to state 146
    GREATERTHAN     shift and go to state 147
    LESSTHANOREQ    shift and go to state 148
    GREATERTHANOREQ shift and go to state 149

    arith_op                       shift and go to state 136
    bool_op                        shift and go to state 137

state 179

    (69) arguments -> arguments COMMA expr .
    (78) expr -> expr . arith_op expr
    (79) expr -> expr . bool_op expr
    (86) arith_op -> . PLUS
    (87) arith_op -> . MINUS
    (88) arith_op -> . TIMES
    (89) arith_op -> . DIVIDE
    (90) bool_op -> . AND
    (91) bool_op -> . OR
    (92) bool_op -> . EQUALSCOMPARE
    (93) bool_op -> . NOTEQUALS
    (94) bool_op -> . LESSTHAN
    (95) bool_op -> . GREATERTHAN
    (96) bool_op -> . LESSTHANOREQ
    (97) bool_op -> . GREATERTHANOREQ

    RPAREN          reduce using rule 69 (arguments -> arguments COMMA expr .)
    COMMA           reduce using rule 69 (arguments -> arguments COMMA expr .)
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    AND             shift and go to state 142
    OR              shift and go to state 143
    EQUALSCOMPARE   shift and go to state 144
    NOTEQUALS       shift and go to state 145
    LESSTHAN        shift and go to state 146
    GREATERTHAN     shift and go to state 147
    LESSTHANOREQ    shift and go to state 148
    GREATERTHANOREQ shift and go to state 149

    arith_op                       shift and go to state 136
    bool_op                        shift and go to state 137

state 180

    (64) primary -> NEW ID LPAREN arguments RPAREN .

    PERIOD          reduce using rule 64 (primary -> NEW ID LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 64 (primary -> NEW ID LPAREN arguments RPAREN .)
    PLUS            reduce using rule 64 (primary -> NEW ID LPAREN arguments RPAREN .)
    MINUS           reduce using rule 64 (primary -> NEW ID LPAREN arguments RPAREN .)
    TIMES           reduce using rule 64 (primary -> NEW ID LPAREN arguments RPAREN .)
    DIVIDE          reduce using rule 64 (primary -> NEW ID LPAREN arguments RPAREN .)
    AND             reduce using rule 64 (primary -> NEW ID LPAREN arguments RPAREN .)
    OR              reduce using rule 64 (primary -> NEW ID LPAREN arguments RPAREN .)
    EQUALSCOMPARE   reduce using rule 64 (primary -> NEW ID LPAREN arguments RPAREN .)
    NOTEQUALS       reduce using rule 64 (primary -> NEW ID LPAREN arguments RPAREN .)
    LESSTHAN        reduce using rule 64 (primary -> NEW ID LPAREN arguments RPAREN .)
    GREATERTHAN     reduce using rule 64 (primary -> NEW ID LPAREN arguments RPAREN .)
    LESSTHANOREQ    reduce using rule 64 (primary -> NEW ID LPAREN arguments RPAREN .)
    GREATERTHANOREQ reduce using rule 64 (primary -> NEW ID LPAREN arguments RPAREN .)
    SEMICOLON       reduce using rule 64 (primary -> NEW ID LPAREN arguments RPAREN .)
    COMMA           reduce using rule 64 (primary -> NEW ID LPAREN arguments RPAREN .)


state 181

    (42) stmt -> IF LPAREN expr RPAREN stmt ELSE . stmt
    (41) stmt -> . IF LPAREN expr RPAREN stmt
    (42) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (43) stmt -> . WHILE LPAREN expr RPAREN stmt
    (44) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (45) stmt -> . RETURN SEMICOLON stmt
    (46) stmt -> . RETURN expr SEMICOLON stmt
    (47) stmt -> . stmt_expr SEMICOLON stmt
    (48) stmt -> . BREAK SEMICOLON stmt
    (49) stmt -> . CONTINUE SEMICOLON stmt
    (50) stmt -> . block stmt
    (51) stmt -> . var_decl SEMICOLON stmt
    (52) stmt -> . SEMICOLON stmt
    (53) stmt -> . empty
    (101) stmt_expr -> . assign
    (102) stmt_expr -> . method_invocation
    (40) block -> . LBRACE stmt RBRACE
    (18) var_decl -> . type variables
    (1) empty -> .
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . VOID
    (23) type -> . ID
    (71) lhs -> . field_access
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE

    IF              shift and go to state 66
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    RETURN          shift and go to state 72
    BREAK           shift and go to state 73
    CONTINUE        shift and go to state 74
    SEMICOLON       shift and go to state 71
    LBRACE          shift and go to state 57
    RBRACE          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 85
    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96

    stmt                           shift and go to state 183
    stmt_expr                      shift and go to state 70
    block                          shift and go to state 75
    var_decl                       shift and go to state 76
    empty                          shift and go to state 77
    assign                         shift and go to state 78
    method_invocation              shift and go to state 79
    type                           shift and go to state 80
    lhs                            shift and go to state 81
    field_access                   shift and go to state 84
    primary                        shift and go to state 86
    literal                        shift and go to state 87

state 182

    (44) stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON . stmt_expr RPAREN stmt
    (101) stmt_expr -> . assign
    (102) stmt_expr -> . method_invocation
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (71) lhs -> . field_access
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE

    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    ID              shift and go to state 108
    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96

    stmt_expr                      shift and go to state 184
    assign                         shift and go to state 78
    method_invocation              shift and go to state 79
    lhs                            shift and go to state 81
    field_access                   shift and go to state 84
    primary                        shift and go to state 86
    literal                        shift and go to state 87

state 183

    (42) stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .

    RBRACE          reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    ELSE            reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)


state 184

    (44) stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr . RPAREN stmt

    RPAREN          shift and go to state 185


state 185

    (44) stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN . stmt
    (41) stmt -> . IF LPAREN expr RPAREN stmt
    (42) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (43) stmt -> . WHILE LPAREN expr RPAREN stmt
    (44) stmt -> . FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt
    (45) stmt -> . RETURN SEMICOLON stmt
    (46) stmt -> . RETURN expr SEMICOLON stmt
    (47) stmt -> . stmt_expr SEMICOLON stmt
    (48) stmt -> . BREAK SEMICOLON stmt
    (49) stmt -> . CONTINUE SEMICOLON stmt
    (50) stmt -> . block stmt
    (51) stmt -> . var_decl SEMICOLON stmt
    (52) stmt -> . SEMICOLON stmt
    (53) stmt -> . empty
    (101) stmt_expr -> . assign
    (102) stmt_expr -> . method_invocation
    (40) block -> . LBRACE stmt RBRACE
    (18) var_decl -> . type variables
    (1) empty -> .
    (81) assign -> . lhs EQUALS expr
    (82) assign -> . lhs PLUSPLUS
    (83) assign -> . PLUSPLUS lhs
    (84) assign -> . lhs MINUSMINUS
    (85) assign -> . MINUSMINUS lhs
    (74) method_invocation -> . field_access LPAREN RPAREN
    (75) method_invocation -> . field_access LPAREN arguments RPAREN
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . VOID
    (23) type -> . ID
    (71) lhs -> . field_access
    (72) field_access -> . primary PERIOD ID
    (73) field_access -> . ID
    (60) primary -> . literal
    (61) primary -> . THIS
    (62) primary -> . SUPER
    (63) primary -> . LPAREN expr RPAREN
    (64) primary -> . NEW ID LPAREN arguments RPAREN
    (65) primary -> . NEW ID LPAREN RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (54) literal -> . INTCONST
    (55) literal -> . FLOATCONST
    (56) literal -> . STRINGCONST
    (57) literal -> . NULL
    (58) literal -> . TRUE
    (59) literal -> . FALSE

    IF              shift and go to state 66
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    RETURN          shift and go to state 72
    BREAK           shift and go to state 73
    CONTINUE        shift and go to state 74
    SEMICOLON       shift and go to state 71
    LBRACE          shift and go to state 57
    RBRACE          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    BOOLEAN         shift and go to state 30
    VOID            shift and go to state 50
    ID              shift and go to state 85
    THIS            shift and go to state 88
    SUPER           shift and go to state 89
    LPAREN          shift and go to state 67
    NEW             shift and go to state 90
    INTCONST        shift and go to state 91
    FLOATCONST      shift and go to state 92
    STRINGCONST     shift and go to state 93
    NULL            shift and go to state 94
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96

    stmt_expr                      shift and go to state 70
    stmt                           shift and go to state 186
    block                          shift and go to state 75
    var_decl                       shift and go to state 76
    empty                          shift and go to state 77
    assign                         shift and go to state 78
    method_invocation              shift and go to state 79
    type                           shift and go to state 80
    lhs                            shift and go to state 81
    field_access                   shift and go to state 84
    primary                        shift and go to state 86
    literal                        shift and go to state 87

state 186

    (44) stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .

    RBRACE          reduce using rule 44 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)
    ELSE            reduce using rule 44 (stmt -> FOR LPAREN stmt_expr SEMICOLON expr SEMICOLON stmt_expr RPAREN stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 27 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 39 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 42 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 51 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 130 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 150 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 150 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 150 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 150 resolved as shift
WARNING: shift/reduce conflict for AND in state 150 resolved as shift
WARNING: shift/reduce conflict for OR in state 150 resolved as shift
WARNING: shift/reduce conflict for EQUALSCOMPARE in state 150 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 150 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 150 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 150 resolved as shift
WARNING: shift/reduce conflict for LESSTHANOREQ in state 150 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANOREQ in state 150 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 165 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 167 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 167 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 167 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 167 resolved as shift
WARNING: shift/reduce conflict for AND in state 167 resolved as shift
WARNING: shift/reduce conflict for OR in state 167 resolved as shift
WARNING: shift/reduce conflict for EQUALSCOMPARE in state 167 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 167 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 167 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 167 resolved as shift
WARNING: shift/reduce conflict for LESSTHANOREQ in state 167 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANOREQ in state 167 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 168 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 168 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 168 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 168 resolved as shift
WARNING: shift/reduce conflict for AND in state 168 resolved as shift
WARNING: shift/reduce conflict for OR in state 168 resolved as shift
WARNING: shift/reduce conflict for EQUALSCOMPARE in state 168 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 168 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 168 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 168 resolved as shift
WARNING: shift/reduce conflict for LESSTHANOREQ in state 168 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANOREQ in state 168 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 176 resolved as shift
WARNING: reduce/reduce conflict in state 56 resolved using rule (method_decl -> modifier ID LPAREN RPAREN block)
WARNING: rejected rule (constructor_decl -> modifier ID LPAREN RPAREN block) in state 56
WARNING: reduce/reduce conflict in state 97 resolved using rule (method_decl -> modifier ID LPAREN formals RPAREN block)
WARNING: rejected rule (constructor_decl -> modifier ID LPAREN formals RPAREN block) in state 97
WARNING: Rule (constructor_decl -> modifier ID LPAREN RPAREN block) is never reduced
WARNING: Rule (constructor_decl -> modifier ID LPAREN formals RPAREN block) is never reduced
